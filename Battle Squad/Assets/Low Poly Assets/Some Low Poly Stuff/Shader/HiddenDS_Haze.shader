Shader "Hidden/DS_Haze" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "black" {}
	}
	SubShader {
		Pass {
			Name "DS_RENDERLIGHTSHAFTS_16_HALF"
			Blend One One, One One
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 61049
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[18], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_constantbuffer CB2[24], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_comparison
					dcl_sampler s2, mode_default
					dcl_resource_texture3d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v2.xyz
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 17
					sample r0.xyzw, v2.xyzx, t0.xyzw, s2
					sample r1.xyzw, v1.xyxx, t1.xyzw, s0
					mad r0.y, cb1[7].x, r1.x, cb1[7].y
					div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
					mul r1.xyz, r0.yyyy, v3.xyzx
					mad r0.yzw, v3.xxyz, r0.yyyy, cb1[4].xxyz
					mul r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000)
					mad r3.xyz, r2.xyzx, r0.xxxx, cb1[4].xyzx
					dp3 r1.w, r2.xyzx, r2.xyzx
					sqrt r1.w, r1.w
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r5.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r4.y, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r4.z, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r4.w, r5.xyzx, r5.xyzx
					lt r4.xyzw, r4.xyzw, cb2[4].xyzw
					movc r5.xyz, r4.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r5.xyz, r5.xyzx, r4.yzwy
					max r4.yzw, r5.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r5.xyz, cb1[4].yyyy, cb2[13].xyzx
					mad r5.xyz, cb2[12].xyzx, cb1[4].xxxx, r5.xyzx
					mad r5.xyz, cb2[14].xyzx, cb1[4].zzzz, r5.xyzx
					add r5.xyz, r5.xyzx, cb2[15].xyzx
					mul r6.xyz, r0.zzzz, cb2[13].xyzx
					mad r6.xyz, cb2[12].xyzx, r0.yyyy, r6.xyzx
					mad r6.xyz, cb2[14].xyzx, r0.wwww, r6.xyzx
					add r6.xyz, r6.xyzx, cb2[15].xyzx
					add r6.xyz, -r5.xyzx, r6.xyzx
					mul r7.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000)
					mad r5.xyz, r7.xyzx, r0.xxxx, r5.xyzx
					mad r7.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mul r8.xyz, r4.yyyy, r7.xyzx
					mad r7.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mul r9.xyz, cb1[4].yyyy, cb2[9].xyzx
					mad r9.xyz, cb2[8].xyzx, cb1[4].xxxx, r9.xyzx
					mad r9.xyz, cb2[10].xyzx, cb1[4].zzzz, r9.xyzx
					add r9.xyz, r9.xyzx, cb2[11].xyzx
					mul r10.xyz, r0.zzzz, cb2[9].xyzx
					mad r10.xyz, cb2[8].xyzx, r0.yyyy, r10.xyzx
					mad r10.xyz, cb2[10].xyzx, r0.wwww, r10.xyzx
					add r10.xyz, r10.xyzx, cb2[11].xyzx
					add r10.xyz, -r9.xyzx, r10.xyzx
					mul r11.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000)
					mad r9.xyz, r11.xyzx, r0.xxxx, r9.xyzx
					mad r11.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r9.xyzx
					mad r8.xyz, r11.xyzx, r4.xxxx, r8.xyzx
					mad r11.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r11.xyzx
					dp4 r2.w, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r12.xyz, cb1[4].yyyy, cb2[17].xyzx
					mad r12.xyz, cb2[16].xyzx, cb1[4].xxxx, r12.xyzx
					mad r12.xyz, cb2[18].xyzx, cb1[4].zzzz, r12.xyzx
					add r12.xyz, r12.xyzx, cb2[19].xyzx
					mul r13.xyz, r0.zzzz, cb2[17].xyzx
					mad r13.xyz, cb2[16].xyzx, r0.yyyy, r13.xyzx
					mad r13.xyz, cb2[18].xyzx, r0.wwww, r13.xyzx
					add r13.xyz, r13.xyzx, cb2[19].xyzx
					add r13.xyz, -r12.xyzx, r13.xyzx
					mul r14.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000)
					mad r12.xyz, r14.xyzx, r0.xxxx, r12.xyzx
					mad r14.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r12.xyzx
					mad r4.xyz, r14.xyzx, r4.zzzz, r8.xyzx
					mad r8.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r14.xyzx
					mul r14.xyz, cb1[4].yyyy, cb2[21].xyzx
					mad r14.xyz, cb2[20].xyzx, cb1[4].xxxx, r14.xyzx
					mad r14.xyz, cb2[22].xyzx, cb1[4].zzzz, r14.xyzx
					add r14.xyz, r14.xyzx, cb2[23].xyzx
					mul r15.xyz, r0.zzzz, cb2[21].xyzx
					mad r15.xyz, cb2[20].xyzx, r0.yyyy, r15.xyzx
					mad r0.yzw, cb2[22].xxyz, r0.wwww, r15.xxyz
					add r0.yzw, r0.yyzw, cb2[23].xxyz
					add r0.yzw, -r14.xxyz, r0.yyzw
					mul r15.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000)
					mad r14.xyz, r15.xyzx, r0.xxxx, r14.xyzx
					mad r15.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r14.xyzx
					mad r4.xyz, r15.xyzx, r4.wwww, r4.xyzx
					mad r15.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r15.xyzx
					sample_c_lz r0.x, r4.xyxx, t2.xxxx, s1, r4.z
					movc r0.x, r2.w, r0.x, l(1.000000)
					mad r2.w, -cb0[13].w, cb0[13].w, l(1.000000)
					dp3 r3.w, r1.xyzx, r1.xyzx
					rsq r3.w, r3.w
					mul r4.xyz, r1.xyzx, r3.wwww
					dp3 r3.w, cb0[16].xyzx, r4.xyzx
					mad r3.w, -cb0[13].w, r3.w, l(1.000000)
					mul r3.w, r3.w, r3.w
					div r2.w, r2.w, r3.w
					mul r2.w, r2.w, l(0.079577)
					mul r2.w, r2.w, cb0[12].x
					mul r1.w, r1.w, r2.w
					mul r2.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mul r2.w, r1.w, r2.w
					mul r0.x, r0.x, r2.w
					mul r0.x, r0.x, cb0[12].y
					add r4.xyz, r3.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r16.xyz, r3.xyzx, -cb2[1].xyzx
					dp3 r4.y, r16.xyzx, r16.xyzx
					add r16.xyz, r3.xyzx, -cb2[2].xyzx
					dp3 r4.z, r16.xyzx, r16.xyzx
					add r3.xzw, r3.xxyz, -cb2[3].xxyz
					mul r2.w, r3.y, -cb0[13].y
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mul r2.w, r1.w, r2.w
					dp3 r4.w, r3.xzwx, r3.xzwx
					lt r3.xyzw, r4.xyzw, cb2[4].xyzw
					and r4.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r4.yzwy
					max r4.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r3.x, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r3.x, r3.x, l(4.000000)
					mul r3.yzw, r4.yyyy, r5.xxyz
					mad r3.yzw, r9.xxyz, r4.xxxx, r3.yyzw
					mad r3.yzw, r12.xxyz, r4.zzzz, r3.yyzw
					mad r3.yzw, r14.xxyz, r4.wwww, r3.yyzw
					sample_c_lz r3.y, r3.yzyy, t2.xxxx, s1, r3.w
					movc r3.x, r3.x, r3.y, l(1.000000)
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r4.xyzx, r4.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r4.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r4.yzwy
					max r4.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r4.yyyy, r7.xyzx
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r11.xyzx, r4.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r11.xyzx
					mad r3.xyz, r8.xyzx, r4.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					mad r3.xyz, r15.xyzx, r4.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r15.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r6.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r10.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r9.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					mad r0.yzw, r0.yyzw, l(0.000000, 0.066667, 0.066667, 0.066667), r8.xxyz
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mad r1.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r11.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r11.xyzx, r11.xyzx
					add r11.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r11.xyzx, r11.xyzx
					add r2.xzw, r2.xxyz, -cb2[3].xxyz
					mul r2.y, r2.y, -cb0[13].y
					mul r2.y, r2.y, l(1.442695)
					exp r2.y, r2.y
					min r2.y, r2.y, l(1.000000)
					mul r2.y, r1.w, r2.y
					dp3 r3.w, r2.xzwx, r2.xzwx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r11.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r2.xzw, r3.xxyz, l(-1.000000,0,-1.000000,-1.000000), l(-0.000000,0,-0.000000,-0.000000)
					add r2.xzw, r2.xxzw, r11.yyzw
					max r11.yzw, r2.xxzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r2.xzw, r5.xxyz, r11.yyyy
					mad r2.xzw, r7.xxyz, r11.xxxx, r2.xxzw
					dp4 r3.x, r11.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r3.x, r3.x, l(4.000000)
					mad r2.xzw, r4.xxyz, r11.zzzz, r2.xxzw
					mad r2.xzw, r8.xxyz, r11.wwww, r2.xxzw
					sample_c_lz r2.x, r2.xzxx, t2.xxxx, s1, r2.w
					movc r2.x, r3.x, r2.x, l(1.000000)
					mul r2.x, r2.x, r2.y
					mad r0.x, r2.x, cb0[12].y, r0.x
					add r2.xyz, r1.xyzx, -cb2[0].xyzx
					dp3 r2.x, r2.xyzx, r2.xyzx
					add r3.xyz, r1.xyzx, -cb2[1].xyzx
					dp3 r2.y, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[2].xyzx
					dp3 r2.z, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[3].xyzx
					mul r1.x, r1.y, -cb0[13].y
					mul r1.x, r1.x, l(1.442695)
					exp r1.x, r1.x
					min r1.x, r1.x, l(1.000000)
					mul r1.x, r1.x, r1.w
					dp3 r2.w, r3.xyzx, r3.xyzx
					lt r2.xyzw, r2.xyzw, cb2[4].xyzw
					and r3.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r1.yzw, r2.xxyz, l(0,-1.000000,-1.000000,-1.000000), l(0,-0.000000,-0.000000,-0.000000)
					add r1.yzw, r1.yyzw, r3.yyzw
					max r3.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r1.yzw, r3.yyyy, r6.xxyz
					mad r1.yzw, r10.xxyz, r3.xxxx, r1.yyzw
					dp4 r2.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.x, r2.x, l(4.000000)
					mad r1.yzw, r9.xxyz, r3.zzzz, r1.yyzw
					mad r0.yzw, r0.yyzw, r3.wwww, r1.yyzw
					sample_c_lz r0.y, r0.yzyy, t2.xxxx, s1, r0.w
					movc r0.y, r2.x, r0.y, l(1.000000)
					mul r0.y, r0.y, r1.x
					mad r0.x, r0.y, cb0[12].y, r0.x
					mul o0.xyz, r0.xxxx, cb0[17].xyzx
					mov o0.w, l(0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Name "DS_RENDERLIGHTSHAFTS_24_HALF"
			Blend One One, One One
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 73497
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[18], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_constantbuffer CB2[24], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_comparison
					dcl_sampler s2, mode_default
					dcl_resource_texture3d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v2.xyz
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 17
					sample r0.xyzw, v2.xyzx, t0.xyzw, s2
					sample r1.xyzw, v1.xyxx, t1.xyzw, s0
					mad r0.y, cb1[7].x, r1.x, cb1[7].y
					div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
					mul r1.xyz, r0.yyyy, v3.xyzx
					mad r0.yzw, v3.xxyz, r0.yyyy, cb1[4].xxyz
					mul r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000)
					mad r3.xyz, r2.xyzx, r0.xxxx, cb1[4].xyzx
					dp3 r1.w, r2.xyzx, r2.xyzx
					sqrt r1.w, r1.w
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r5.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r4.y, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r4.z, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r4.w, r5.xyzx, r5.xyzx
					lt r4.xyzw, r4.xyzw, cb2[4].xyzw
					movc r5.xyz, r4.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r5.xyz, r5.xyzx, r4.yzwy
					max r4.yzw, r5.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r5.xyz, cb1[4].yyyy, cb2[9].xyzx
					mad r5.xyz, cb2[8].xyzx, cb1[4].xxxx, r5.xyzx
					mad r5.xyz, cb2[10].xyzx, cb1[4].zzzz, r5.xyzx
					add r5.xyz, r5.xyzx, cb2[11].xyzx
					mul r6.xyz, r0.zzzz, cb2[9].xyzx
					mad r6.xyz, cb2[8].xyzx, r0.yyyy, r6.xyzx
					mad r6.xyz, cb2[10].xyzx, r0.wwww, r6.xyzx
					add r6.xyz, r6.xyzx, cb2[11].xyzx
					add r6.xyz, -r5.xyzx, r6.xyzx
					mul r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000)
					mad r5.xyz, r7.xyzx, r0.xxxx, r5.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mul r8.xyz, cb1[4].yyyy, cb2[13].xyzx
					mad r8.xyz, cb2[12].xyzx, cb1[4].xxxx, r8.xyzx
					mad r8.xyz, cb2[14].xyzx, cb1[4].zzzz, r8.xyzx
					add r8.xyz, r8.xyzx, cb2[15].xyzx
					mul r9.xyz, r0.zzzz, cb2[13].xyzx
					mad r9.xyz, cb2[12].xyzx, r0.yyyy, r9.xyzx
					mad r9.xyz, cb2[14].xyzx, r0.wwww, r9.xyzx
					add r9.xyz, r9.xyzx, cb2[15].xyzx
					add r9.xyz, -r8.xyzx, r9.xyzx
					mul r10.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000)
					mad r8.xyz, r10.xyzx, r0.xxxx, r8.xyzx
					mad r10.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r8.xyzx
					mul r11.xyz, r4.yyyy, r10.xyzx
					mad r10.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r10.xyzx
					mad r11.xyz, r7.xyzx, r4.xxxx, r11.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mul r12.xyz, cb1[4].yyyy, cb2[17].xyzx
					mad r12.xyz, cb2[16].xyzx, cb1[4].xxxx, r12.xyzx
					mad r12.xyz, cb2[18].xyzx, cb1[4].zzzz, r12.xyzx
					add r12.xyz, r12.xyzx, cb2[19].xyzx
					mul r13.xyz, r0.zzzz, cb2[17].xyzx
					mad r13.xyz, cb2[16].xyzx, r0.yyyy, r13.xyzx
					mad r13.xyz, cb2[18].xyzx, r0.wwww, r13.xyzx
					add r13.xyz, r13.xyzx, cb2[19].xyzx
					add r13.xyz, -r12.xyzx, r13.xyzx
					mul r14.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000)
					mad r12.xyz, r14.xyzx, r0.xxxx, r12.xyzx
					mad r14.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r12.xyzx
					mad r4.xyz, r14.xyzx, r4.zzzz, r11.xyzx
					mad r11.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r14.xyzx
					mul r14.xyz, cb1[4].yyyy, cb2[21].xyzx
					mad r14.xyz, cb2[20].xyzx, cb1[4].xxxx, r14.xyzx
					mad r14.xyz, cb2[22].xyzx, cb1[4].zzzz, r14.xyzx
					add r14.xyz, r14.xyzx, cb2[23].xyzx
					mul r15.xyz, r0.zzzz, cb2[21].xyzx
					mad r15.xyz, cb2[20].xyzx, r0.yyyy, r15.xyzx
					mad r0.yzw, cb2[22].xxyz, r0.wwww, r15.xxyz
					add r0.yzw, r0.yyzw, cb2[23].xxyz
					add r0.yzw, -r14.xxyz, r0.yyzw
					mul r15.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000)
					mad r14.xyz, r15.xyzx, r0.xxxx, r14.xyzx
					mad r15.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r14.xyzx
					mad r4.xyz, r15.xyzx, r4.wwww, r4.xyzx
					mad r15.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r15.xyzx
					sample_c_lz r0.x, r4.xyxx, t2.xxxx, s1, r4.z
					movc r0.x, r2.w, r0.x, l(1.000000)
					mad r2.w, -cb0[13].w, cb0[13].w, l(1.000000)
					dp3 r3.w, r1.xyzx, r1.xyzx
					rsq r3.w, r3.w
					mul r4.xyz, r1.xyzx, r3.wwww
					dp3 r3.w, cb0[16].xyzx, r4.xyzx
					mad r3.w, -cb0[13].w, r3.w, l(1.000000)
					mul r3.w, r3.w, r3.w
					div r2.w, r2.w, r3.w
					mul r2.w, r2.w, l(0.079577)
					mul r2.w, r2.w, cb0[12].x
					mul r1.w, r1.w, r2.w
					mul r2.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mul r2.w, r1.w, r2.w
					mul r0.x, r0.x, r2.w
					mul r0.x, r0.x, cb0[12].y
					add r4.xyz, r3.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r16.xyz, r3.xyzx, -cb2[1].xyzx
					dp3 r4.y, r16.xyzx, r16.xyzx
					add r16.xyz, r3.xyzx, -cb2[2].xyzx
					dp3 r4.z, r16.xyzx, r16.xyzx
					add r3.xzw, r3.xxyz, -cb2[3].xxyz
					mul r2.w, r3.y, -cb0[13].y
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mul r2.w, r1.w, r2.w
					dp3 r4.w, r3.xzwx, r3.xzwx
					lt r3.xyzw, r4.xyzw, cb2[4].xyzw
					movc r4.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r4.xyz, r4.xyzx, r3.yzwy
					max r3.yzw, r4.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r4.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r4.x, r4.x, l(4.000000)
					mul r4.yzw, r3.yyyy, r8.xxyz
					mad r4.yzw, r5.xxyz, r3.xxxx, r4.yyzw
					mad r3.xyz, r12.xyzx, r3.zzzz, r4.yzwy
					mad r3.xyz, r14.xyzx, r3.wwww, r3.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r3.x, r4.x, r3.x, l(1.000000)
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r4.xyzx, r4.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					movc r4.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r4.xyz, r4.xyzx, r3.yzwy
					max r3.yzw, r4.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r4.xyz, r3.yyyy, r10.xyzx
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r10.xyzx
					mad r4.xyz, r7.xyzx, r3.xxxx, r4.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r3.xyz, r11.xyzx, r3.zzzz, r4.xyzx
					mad r3.xyz, r15.xyzx, r3.wwww, r3.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r15.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r11.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r9.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r6.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r10.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					mad r0.yzw, r0.yyzw, l(0.000000, 0.043478, 0.043478, 0.043478), r4.xxyz
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mad r1.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r11.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r11.xyzx, r11.xyzx
					add r11.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r11.xyzx, r11.xyzx
					add r2.xzw, r2.xxyz, -cb2[3].xxyz
					mul r2.y, r2.y, -cb0[13].y
					mul r2.y, r2.y, l(1.442695)
					exp r2.y, r2.y
					min r2.y, r2.y, l(1.000000)
					mul r2.y, r1.w, r2.y
					dp3 r8.w, r2.xzwx, r2.xzwx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r11.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r2.xzw, r8.xxyz, l(-1.000000,0,-1.000000,-1.000000), l(-0.000000,0,-0.000000,-0.000000)
					add r2.xzw, r2.xxzw, r11.yyzw
					max r11.yzw, r2.xxzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r2.xzw, r5.xxyz, r11.yyyy
					mad r2.xzw, r7.xxyz, r11.xxxx, r2.xxzw
					dp4 r3.w, r11.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r3.w, r3.w, l(4.000000)
					mad r2.xzw, r3.xxyz, r11.zzzz, r2.xxzw
					mad r2.xzw, r4.xxyz, r11.wwww, r2.xxzw
					sample_c_lz r2.x, r2.xzxx, t2.xxxx, s1, r2.w
					movc r2.x, r3.w, r2.x, l(1.000000)
					mul r2.x, r2.x, r2.y
					mad r0.x, r2.x, cb0[12].y, r0.x
					add r2.xyz, r1.xyzx, -cb2[0].xyzx
					dp3 r2.x, r2.xyzx, r2.xyzx
					add r3.xyz, r1.xyzx, -cb2[1].xyzx
					dp3 r2.y, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[2].xyzx
					dp3 r2.z, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[3].xyzx
					mul r1.x, r1.y, -cb0[13].y
					mul r1.x, r1.x, l(1.442695)
					exp r1.x, r1.x
					min r1.x, r1.x, l(1.000000)
					mul r1.x, r1.x, r1.w
					dp3 r2.w, r3.xyzx, r3.xyzx
					lt r2.xyzw, r2.xyzw, cb2[4].xyzw
					and r3.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r1.yzw, r2.xxyz, l(0,-1.000000,-1.000000,-1.000000), l(0,-0.000000,-0.000000,-0.000000)
					add r1.yzw, r1.yyzw, r3.yyzw
					max r3.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r1.yzw, r3.yyyy, r9.xxyz
					mad r1.yzw, r6.xxyz, r3.xxxx, r1.yyzw
					dp4 r2.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.x, r2.x, l(4.000000)
					mad r1.yzw, r10.xxyz, r3.zzzz, r1.yyzw
					mad r0.yzw, r0.yyzw, r3.wwww, r1.yyzw
					sample_c_lz r0.y, r0.yzyy, t2.xxxx, s1, r0.w
					movc r0.y, r2.x, r0.y, l(1.000000)
					mul r0.y, r0.y, r1.x
					mad r0.x, r0.y, cb0[12].y, r0.x
					mul o0.xyz, r0.xxxx, cb0[17].xyzx
					mov o0.w, l(0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Name "DS_RENDERLIGHTSHAFTS_32_HALF"
			Blend One One, One One
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 131627
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[18], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_constantbuffer CB2[24], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_comparison
					dcl_sampler s2, mode_default
					dcl_resource_texture3d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v2.xyz
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 17
					sample r0.xyzw, v2.xyzx, t0.xyzw, s2
					sample r1.xyzw, v1.xyxx, t1.xyzw, s0
					mad r0.y, cb1[7].x, r1.x, cb1[7].y
					div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
					mul r1.xyz, r0.yyyy, v3.xyzx
					mad r0.yzw, v3.xxyz, r0.yyyy, cb1[4].xxyz
					mul r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000)
					mad r3.xyz, r2.xyzx, r0.xxxx, cb1[4].xyzx
					dp3 r1.w, r2.xyzx, r2.xyzx
					sqrt r1.w, r1.w
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r5.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r4.y, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r4.z, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r4.w, r5.xyzx, r5.xyzx
					lt r4.xyzw, r4.xyzw, cb2[4].xyzw
					movc r5.xyz, r4.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r5.xyz, r5.xyzx, r4.yzwy
					max r4.yzw, r5.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r5.xyz, cb1[4].yyyy, cb2[9].xyzx
					mad r5.xyz, cb2[8].xyzx, cb1[4].xxxx, r5.xyzx
					mad r5.xyz, cb2[10].xyzx, cb1[4].zzzz, r5.xyzx
					add r5.xyz, r5.xyzx, cb2[11].xyzx
					mul r6.xyz, r0.zzzz, cb2[9].xyzx
					mad r6.xyz, cb2[8].xyzx, r0.yyyy, r6.xyzx
					mad r6.xyz, cb2[10].xyzx, r0.wwww, r6.xyzx
					add r6.xyz, r6.xyzx, cb2[11].xyzx
					add r6.xyz, -r5.xyzx, r6.xyzx
					mul r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000)
					mad r5.xyz, r7.xyzx, r0.xxxx, r5.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mul r8.xyz, cb1[4].yyyy, cb2[13].xyzx
					mad r8.xyz, cb2[12].xyzx, cb1[4].xxxx, r8.xyzx
					mad r8.xyz, cb2[14].xyzx, cb1[4].zzzz, r8.xyzx
					add r8.xyz, r8.xyzx, cb2[15].xyzx
					mul r9.xyz, r0.zzzz, cb2[13].xyzx
					mad r9.xyz, cb2[12].xyzx, r0.yyyy, r9.xyzx
					mad r9.xyz, cb2[14].xyzx, r0.wwww, r9.xyzx
					add r9.xyz, r9.xyzx, cb2[15].xyzx
					add r9.xyz, -r8.xyzx, r9.xyzx
					mul r10.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000)
					mad r8.xyz, r10.xyzx, r0.xxxx, r8.xyzx
					mad r10.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r8.xyzx
					mul r11.xyz, r4.yyyy, r10.xyzx
					mad r10.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r10.xyzx
					mad r11.xyz, r7.xyzx, r4.xxxx, r11.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mul r12.xyz, cb1[4].yyyy, cb2[17].xyzx
					mad r12.xyz, cb2[16].xyzx, cb1[4].xxxx, r12.xyzx
					mad r12.xyz, cb2[18].xyzx, cb1[4].zzzz, r12.xyzx
					add r12.xyz, r12.xyzx, cb2[19].xyzx
					mul r13.xyz, r0.zzzz, cb2[17].xyzx
					mad r13.xyz, cb2[16].xyzx, r0.yyyy, r13.xyzx
					mad r13.xyz, cb2[18].xyzx, r0.wwww, r13.xyzx
					add r13.xyz, r13.xyzx, cb2[19].xyzx
					add r13.xyz, -r12.xyzx, r13.xyzx
					mul r14.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000)
					mad r12.xyz, r14.xyzx, r0.xxxx, r12.xyzx
					mad r14.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r12.xyzx
					mad r4.xyz, r14.xyzx, r4.zzzz, r11.xyzx
					mad r11.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r14.xyzx
					mul r14.xyz, cb1[4].yyyy, cb2[21].xyzx
					mad r14.xyz, cb2[20].xyzx, cb1[4].xxxx, r14.xyzx
					mad r14.xyz, cb2[22].xyzx, cb1[4].zzzz, r14.xyzx
					add r14.xyz, r14.xyzx, cb2[23].xyzx
					mul r15.xyz, r0.zzzz, cb2[21].xyzx
					mad r15.xyz, cb2[20].xyzx, r0.yyyy, r15.xyzx
					mad r0.yzw, cb2[22].xxyz, r0.wwww, r15.xxyz
					add r0.yzw, r0.yyzw, cb2[23].xxyz
					add r0.yzw, -r14.xxyz, r0.yyzw
					mul r15.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000)
					mad r14.xyz, r15.xyzx, r0.xxxx, r14.xyzx
					mad r15.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r14.xyzx
					mad r4.xyz, r15.xyzx, r4.wwww, r4.xyzx
					mad r15.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r15.xyzx
					sample_c_lz r0.x, r4.xyxx, t2.xxxx, s1, r4.z
					movc r0.x, r2.w, r0.x, l(1.000000)
					mul r2.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mad r3.w, -cb0[13].w, cb0[13].w, l(1.000000)
					dp3 r4.x, r1.xyzx, r1.xyzx
					rsq r4.x, r4.x
					mul r4.xyz, r1.xyzx, r4.xxxx
					dp3 r4.x, cb0[16].xyzx, r4.xyzx
					mad r4.x, -cb0[13].w, r4.x, l(1.000000)
					mul r4.x, r4.x, r4.x
					div r3.w, r3.w, r4.x
					mul r3.w, r3.w, l(0.079577)
					mul r3.w, r3.w, cb0[12].x
					mul r1.w, r1.w, r3.w
					mul r2.w, r2.w, r1.w
					mul r0.x, r0.x, r2.w
					mul r0.x, r0.x, cb0[12].y
					add r4.xyz, r3.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r16.xyz, r3.xyzx, -cb2[1].xyzx
					dp3 r4.y, r16.xyzx, r16.xyzx
					add r16.xyz, r3.xyzx, -cb2[2].xyzx
					dp3 r4.z, r16.xyzx, r16.xyzx
					add r3.xzw, r3.xxyz, -cb2[3].xxyz
					mul r2.w, r3.y, -cb0[13].y
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mul r2.w, r1.w, r2.w
					dp3 r4.w, r3.xzwx, r3.xzwx
					lt r3.xyzw, r4.xyzw, cb2[4].xyzw
					movc r4.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r4.xyz, r4.xyzx, r3.yzwy
					max r3.yzw, r4.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r4.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r4.x, r4.x, l(4.000000)
					mul r4.yzw, r3.yyyy, r8.xxyz
					mad r4.yzw, r5.xxyz, r3.xxxx, r4.yyzw
					mad r3.xyz, r12.xyzx, r3.zzzz, r4.yzwy
					mad r3.xyz, r14.xyzx, r3.wwww, r3.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r3.x, r4.x, r3.x, l(1.000000)
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r4.xyzx, r4.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					movc r4.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r4.xyz, r4.xyzx, r3.yzwy
					max r3.yzw, r4.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r4.xyz, r3.yyyy, r10.xyzx
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r10.xyzx
					mad r4.xyz, r7.xyzx, r3.xxxx, r4.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r3.xyz, r11.xyzx, r3.zzzz, r4.xyzx
					mad r3.xyz, r15.xyzx, r3.wwww, r3.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r15.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r11.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					movc r10.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r8.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r10.xyz, r10.xyzx, r8.yzwy
					max r8.yzw, r10.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r10.xyz, r5.xyzx, r8.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r10.xyz, r7.xyzx, r8.xxxx, r10.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r8.zzzz, r10.xyzx
					mad r8.xyz, r4.xyzx, r8.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					movc r10.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r8.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r10.xyz, r10.xyzx, r8.yzwy
					max r8.yzw, r10.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r10.xyz, r5.xyzx, r8.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r10.xyz, r7.xyzx, r8.xxxx, r10.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r8.zzzz, r10.xyzx
					mad r8.xyz, r4.xyzx, r8.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					movc r10.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r8.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r10.xyz, r10.xyzx, r8.yzwy
					max r8.yzw, r10.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r10.xyz, r5.xyzx, r8.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r10.xyz, r7.xyzx, r8.xxxx, r10.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r8.zzzz, r10.xyzx
					mad r8.xyz, r4.xyzx, r8.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					movc r10.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r8.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r10.xyz, r10.xyzx, r8.yzwy
					max r8.yzw, r10.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r10.xyz, r5.xyzx, r8.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r10.xyz, r7.xyzx, r8.xxxx, r10.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r8.zzzz, r10.xyzx
					mad r8.xyz, r4.xyzx, r8.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r9.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r6.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r10.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					mad r0.yzw, r0.yyzw, l(0.000000, 0.032258, 0.032258, 0.032258), r4.xxyz
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mad r1.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r11.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r11.xyzx, r11.xyzx
					add r11.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r11.xyzx, r11.xyzx
					add r2.xzw, r2.xxyz, -cb2[3].xxyz
					mul r2.y, r2.y, -cb0[13].y
					mul r2.y, r2.y, l(1.442695)
					exp r2.y, r2.y
					min r2.y, r2.y, l(1.000000)
					mul r2.y, r1.w, r2.y
					dp3 r8.w, r2.xzwx, r2.xzwx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r11.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r2.xzw, r8.xxyz, l(-1.000000,0,-1.000000,-1.000000), l(-0.000000,0,-0.000000,-0.000000)
					add r2.xzw, r2.xxzw, r11.yyzw
					max r11.yzw, r2.xxzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r2.xzw, r5.xxyz, r11.yyyy
					mad r2.xzw, r7.xxyz, r11.xxxx, r2.xxzw
					dp4 r3.w, r11.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r3.w, r3.w, l(4.000000)
					mad r2.xzw, r3.xxyz, r11.zzzz, r2.xxzw
					mad r2.xzw, r4.xxyz, r11.wwww, r2.xxzw
					sample_c_lz r2.x, r2.xzxx, t2.xxxx, s1, r2.w
					movc r2.x, r3.w, r2.x, l(1.000000)
					mul r2.x, r2.x, r2.y
					mad r0.x, r2.x, cb0[12].y, r0.x
					add r2.xyz, r1.xyzx, -cb2[0].xyzx
					dp3 r2.x, r2.xyzx, r2.xyzx
					add r3.xyz, r1.xyzx, -cb2[1].xyzx
					dp3 r2.y, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[2].xyzx
					dp3 r2.z, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[3].xyzx
					mul r1.x, r1.y, -cb0[13].y
					mul r1.x, r1.x, l(1.442695)
					exp r1.x, r1.x
					min r1.x, r1.x, l(1.000000)
					mul r1.x, r1.x, r1.w
					dp3 r2.w, r3.xyzx, r3.xyzx
					lt r2.xyzw, r2.xyzw, cb2[4].xyzw
					and r3.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r1.yzw, r2.xxyz, l(0,-1.000000,-1.000000,-1.000000), l(0,-0.000000,-0.000000,-0.000000)
					add r1.yzw, r1.yyzw, r3.yyzw
					max r3.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r1.yzw, r3.yyyy, r9.xxyz
					mad r1.yzw, r6.xxyz, r3.xxxx, r1.yyzw
					dp4 r2.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.x, r2.x, l(4.000000)
					mad r1.yzw, r10.xxyz, r3.zzzz, r1.yyzw
					mad r0.yzw, r0.yyzw, r3.wwww, r1.yyzw
					sample_c_lz r0.y, r0.yzyy, t2.xxxx, s1, r0.w
					movc r0.y, r2.x, r0.y, l(1.000000)
					mul r0.y, r0.y, r1.x
					mad r0.x, r0.y, cb0[12].y, r0.x
					mul o0.xyz, r0.xxxx, cb0[17].xyzx
					mov o0.w, l(0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Name "DS_RENDERLIGHTSHAFTS_16_QUARTER"
			Blend One One, One One
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 197691
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.250000, 0.250000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[18], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_constantbuffer CB2[24], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_comparison
					dcl_sampler s2, mode_default
					dcl_resource_texture3d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v2.xyz
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 17
					sample r0.xyzw, v2.xyzx, t0.xyzw, s2
					sample r1.xyzw, v1.xyxx, t1.xyzw, s0
					mad r0.y, cb1[7].x, r1.x, cb1[7].y
					div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
					mul r1.xyz, r0.yyyy, v3.xyzx
					mad r0.yzw, v3.xxyz, r0.yyyy, cb1[4].xxyz
					mul r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000)
					mad r3.xyz, r2.xyzx, r0.xxxx, cb1[4].xyzx
					dp3 r1.w, r2.xyzx, r2.xyzx
					sqrt r1.w, r1.w
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r5.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r4.y, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r4.z, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r4.w, r5.xyzx, r5.xyzx
					lt r4.xyzw, r4.xyzw, cb2[4].xyzw
					movc r5.xyz, r4.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r5.xyz, r5.xyzx, r4.yzwy
					max r4.yzw, r5.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r5.xyz, cb1[4].yyyy, cb2[13].xyzx
					mad r5.xyz, cb2[12].xyzx, cb1[4].xxxx, r5.xyzx
					mad r5.xyz, cb2[14].xyzx, cb1[4].zzzz, r5.xyzx
					add r5.xyz, r5.xyzx, cb2[15].xyzx
					mul r6.xyz, r0.zzzz, cb2[13].xyzx
					mad r6.xyz, cb2[12].xyzx, r0.yyyy, r6.xyzx
					mad r6.xyz, cb2[14].xyzx, r0.wwww, r6.xyzx
					add r6.xyz, r6.xyzx, cb2[15].xyzx
					add r6.xyz, -r5.xyzx, r6.xyzx
					mul r7.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000)
					mad r5.xyz, r7.xyzx, r0.xxxx, r5.xyzx
					mad r7.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mul r8.xyz, r4.yyyy, r7.xyzx
					mad r7.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mul r9.xyz, cb1[4].yyyy, cb2[9].xyzx
					mad r9.xyz, cb2[8].xyzx, cb1[4].xxxx, r9.xyzx
					mad r9.xyz, cb2[10].xyzx, cb1[4].zzzz, r9.xyzx
					add r9.xyz, r9.xyzx, cb2[11].xyzx
					mul r10.xyz, r0.zzzz, cb2[9].xyzx
					mad r10.xyz, cb2[8].xyzx, r0.yyyy, r10.xyzx
					mad r10.xyz, cb2[10].xyzx, r0.wwww, r10.xyzx
					add r10.xyz, r10.xyzx, cb2[11].xyzx
					add r10.xyz, -r9.xyzx, r10.xyzx
					mul r11.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000)
					mad r9.xyz, r11.xyzx, r0.xxxx, r9.xyzx
					mad r11.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r9.xyzx
					mad r8.xyz, r11.xyzx, r4.xxxx, r8.xyzx
					mad r11.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r11.xyzx
					dp4 r2.w, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r12.xyz, cb1[4].yyyy, cb2[17].xyzx
					mad r12.xyz, cb2[16].xyzx, cb1[4].xxxx, r12.xyzx
					mad r12.xyz, cb2[18].xyzx, cb1[4].zzzz, r12.xyzx
					add r12.xyz, r12.xyzx, cb2[19].xyzx
					mul r13.xyz, r0.zzzz, cb2[17].xyzx
					mad r13.xyz, cb2[16].xyzx, r0.yyyy, r13.xyzx
					mad r13.xyz, cb2[18].xyzx, r0.wwww, r13.xyzx
					add r13.xyz, r13.xyzx, cb2[19].xyzx
					add r13.xyz, -r12.xyzx, r13.xyzx
					mul r14.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000)
					mad r12.xyz, r14.xyzx, r0.xxxx, r12.xyzx
					mad r14.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r12.xyzx
					mad r4.xyz, r14.xyzx, r4.zzzz, r8.xyzx
					mad r8.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r14.xyzx
					mul r14.xyz, cb1[4].yyyy, cb2[21].xyzx
					mad r14.xyz, cb2[20].xyzx, cb1[4].xxxx, r14.xyzx
					mad r14.xyz, cb2[22].xyzx, cb1[4].zzzz, r14.xyzx
					add r14.xyz, r14.xyzx, cb2[23].xyzx
					mul r15.xyz, r0.zzzz, cb2[21].xyzx
					mad r15.xyz, cb2[20].xyzx, r0.yyyy, r15.xyzx
					mad r0.yzw, cb2[22].xxyz, r0.wwww, r15.xxyz
					add r0.yzw, r0.yyzw, cb2[23].xxyz
					add r0.yzw, -r14.xxyz, r0.yyzw
					mul r15.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000)
					mad r14.xyz, r15.xyzx, r0.xxxx, r14.xyzx
					mad r15.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r14.xyzx
					mad r4.xyz, r15.xyzx, r4.wwww, r4.xyzx
					mad r15.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r15.xyzx
					sample_c_lz r0.x, r4.xyxx, t2.xxxx, s1, r4.z
					movc r0.x, r2.w, r0.x, l(1.000000)
					mad r2.w, -cb0[13].w, cb0[13].w, l(1.000000)
					dp3 r3.w, r1.xyzx, r1.xyzx
					rsq r3.w, r3.w
					mul r4.xyz, r1.xyzx, r3.wwww
					dp3 r3.w, cb0[16].xyzx, r4.xyzx
					mad r3.w, -cb0[13].w, r3.w, l(1.000000)
					mul r3.w, r3.w, r3.w
					div r2.w, r2.w, r3.w
					mul r2.w, r2.w, l(0.079577)
					mul r2.w, r2.w, cb0[12].x
					mul r1.w, r1.w, r2.w
					mul r2.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mul r2.w, r1.w, r2.w
					mul r0.x, r0.x, r2.w
					mul r0.x, r0.x, cb0[12].y
					add r4.xyz, r3.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r16.xyz, r3.xyzx, -cb2[1].xyzx
					dp3 r4.y, r16.xyzx, r16.xyzx
					add r16.xyz, r3.xyzx, -cb2[2].xyzx
					dp3 r4.z, r16.xyzx, r16.xyzx
					add r3.xzw, r3.xxyz, -cb2[3].xxyz
					mul r2.w, r3.y, -cb0[13].y
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mul r2.w, r1.w, r2.w
					dp3 r4.w, r3.xzwx, r3.xzwx
					lt r3.xyzw, r4.xyzw, cb2[4].xyzw
					and r4.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r4.yzwy
					max r4.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r3.x, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r3.x, r3.x, l(4.000000)
					mul r3.yzw, r4.yyyy, r5.xxyz
					mad r3.yzw, r9.xxyz, r4.xxxx, r3.yyzw
					mad r3.yzw, r12.xxyz, r4.zzzz, r3.yyzw
					mad r3.yzw, r14.xxyz, r4.wwww, r3.yyzw
					sample_c_lz r3.y, r3.yzyy, t2.xxxx, s1, r3.w
					movc r3.x, r3.x, r3.y, l(1.000000)
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r4.xyzx, r4.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r4.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r4.yzwy
					max r4.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r4.yyyy, r7.xyzx
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r11.xyzx, r4.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r11.xyzx
					mad r3.xyz, r8.xyzx, r4.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					mad r3.xyz, r15.xyzx, r4.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r15.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r9.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r9.xyzx, r9.xyzx
					add r9.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r9.xyzx, r9.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r9.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r3.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r3.xyz, r3.xyzx, r9.yzwy
					max r9.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r3.xyz, r5.xyzx, r9.yyyy
					mad r5.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r6.xyz, r6.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r5.xyzx
					mad r3.xyz, r7.xyzx, r9.xxxx, r3.xyzx
					dp4 r2.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r10.xyz, r10.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r7.xyzx
					mad r3.xyz, r4.xyzx, r9.zzzz, r3.xyzx
					mad r4.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r9.xyz, r13.xyzx, l(0.066667, 0.066667, 0.066667, 0.000000), r4.xyzx
					mad r3.xyz, r8.xyzx, r9.wwww, r3.xyzx
					mad r8.xyz, r0.yzwy, l(0.066667, 0.066667, 0.066667, 0.000000), r8.xyzx
					mad r0.yzw, r0.yyzw, l(0.000000, 0.066667, 0.066667, 0.066667), r8.xxyz
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mul r3.x, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mad r1.xyz, r1.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r2.xyzx
					mul r3.x, r3.x, l(1.442695)
					exp r3.x, r3.x
					min r3.x, r3.x, l(1.000000)
					mul r3.x, r1.w, r3.x
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r11.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r11.xyzx, r11.xyzx
					add r11.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r11.xyzx, r11.xyzx
					add r2.xzw, r2.xxyz, -cb2[3].xxyz
					mul r2.y, r2.y, -cb0[13].y
					mul r2.y, r2.y, l(1.442695)
					exp r2.y, r2.y
					min r2.y, r2.y, l(1.000000)
					mul r2.y, r1.w, r2.y
					dp3 r3.w, r2.xzwx, r2.xzwx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					and r11.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r2.xzw, r3.xxyz, l(-1.000000,0,-1.000000,-1.000000), l(-0.000000,0,-0.000000,-0.000000)
					add r2.xzw, r2.xxzw, r11.yyzw
					max r11.yzw, r2.xxzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r2.xzw, r5.xxyz, r11.yyyy
					mad r2.xzw, r7.xxyz, r11.xxxx, r2.xxzw
					dp4 r3.x, r11.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r3.x, r3.x, l(4.000000)
					mad r2.xzw, r4.xxyz, r11.zzzz, r2.xxzw
					mad r2.xzw, r8.xxyz, r11.wwww, r2.xxzw
					sample_c_lz r2.x, r2.xzxx, t2.xxxx, s1, r2.w
					movc r2.x, r3.x, r2.x, l(1.000000)
					mul r2.x, r2.x, r2.y
					mad r0.x, r2.x, cb0[12].y, r0.x
					add r2.xyz, r1.xyzx, -cb2[0].xyzx
					dp3 r2.x, r2.xyzx, r2.xyzx
					add r3.xyz, r1.xyzx, -cb2[1].xyzx
					dp3 r2.y, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[2].xyzx
					dp3 r2.z, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[3].xyzx
					mul r1.x, r1.y, -cb0[13].y
					mul r1.x, r1.x, l(1.442695)
					exp r1.x, r1.x
					min r1.x, r1.x, l(1.000000)
					mul r1.x, r1.x, r1.w
					dp3 r2.w, r3.xyzx, r3.xyzx
					lt r2.xyzw, r2.xyzw, cb2[4].xyzw
					and r3.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r1.yzw, r2.xxyz, l(0,-1.000000,-1.000000,-1.000000), l(0,-0.000000,-0.000000,-0.000000)
					add r1.yzw, r1.yyzw, r3.yyzw
					max r3.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r1.yzw, r3.yyyy, r6.xxyz
					mad r1.yzw, r10.xxyz, r3.xxxx, r1.yyzw
					dp4 r2.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.x, r2.x, l(4.000000)
					mad r1.yzw, r9.xxyz, r3.zzzz, r1.yyzw
					mad r0.yzw, r0.yyzw, r3.wwww, r1.yyzw
					sample_c_lz r0.y, r0.yzyy, t2.xxxx, s1, r0.w
					movc r0.y, r2.x, r0.y, l(1.000000)
					mul r0.y, r0.y, r1.x
					mad r0.x, r0.y, cb0[12].y, r0.x
					mul o0.xyz, r0.xxxx, cb0[17].xyzx
					mov o0.w, l(0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Name "DS_RENDERLIGHTSHAFTS_24_QUARTER"
			Blend One One, One One
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 318829
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.250000, 0.250000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[18], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_constantbuffer CB2[24], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_comparison
					dcl_sampler s2, mode_default
					dcl_resource_texture3d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v2.xyz
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 17
					sample r0.xyzw, v2.xyzx, t0.xyzw, s2
					sample r1.xyzw, v1.xyxx, t1.xyzw, s0
					mad r0.y, cb1[7].x, r1.x, cb1[7].y
					div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
					mul r1.xyz, r0.yyyy, v3.xyzx
					mad r0.yzw, v3.xxyz, r0.yyyy, cb1[4].xxyz
					mul r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000)
					mad r3.xyz, r2.xyzx, r0.xxxx, cb1[4].xyzx
					dp3 r1.w, r2.xyzx, r2.xyzx
					sqrt r1.w, r1.w
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r5.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r4.y, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r4.z, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r4.w, r5.xyzx, r5.xyzx
					lt r4.xyzw, r4.xyzw, cb2[4].xyzw
					movc r5.xyz, r4.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r5.xyz, r5.xyzx, r4.yzwy
					max r4.yzw, r5.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r5.xyz, cb1[4].yyyy, cb2[9].xyzx
					mad r5.xyz, cb2[8].xyzx, cb1[4].xxxx, r5.xyzx
					mad r5.xyz, cb2[10].xyzx, cb1[4].zzzz, r5.xyzx
					add r5.xyz, r5.xyzx, cb2[11].xyzx
					mul r6.xyz, r0.zzzz, cb2[9].xyzx
					mad r6.xyz, cb2[8].xyzx, r0.yyyy, r6.xyzx
					mad r6.xyz, cb2[10].xyzx, r0.wwww, r6.xyzx
					add r6.xyz, r6.xyzx, cb2[11].xyzx
					add r6.xyz, -r5.xyzx, r6.xyzx
					mul r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000)
					mad r5.xyz, r7.xyzx, r0.xxxx, r5.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mul r8.xyz, cb1[4].yyyy, cb2[13].xyzx
					mad r8.xyz, cb2[12].xyzx, cb1[4].xxxx, r8.xyzx
					mad r8.xyz, cb2[14].xyzx, cb1[4].zzzz, r8.xyzx
					add r8.xyz, r8.xyzx, cb2[15].xyzx
					mul r9.xyz, r0.zzzz, cb2[13].xyzx
					mad r9.xyz, cb2[12].xyzx, r0.yyyy, r9.xyzx
					mad r9.xyz, cb2[14].xyzx, r0.wwww, r9.xyzx
					add r9.xyz, r9.xyzx, cb2[15].xyzx
					add r9.xyz, -r8.xyzx, r9.xyzx
					mul r10.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000)
					mad r8.xyz, r10.xyzx, r0.xxxx, r8.xyzx
					mad r10.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r8.xyzx
					mul r11.xyz, r4.yyyy, r10.xyzx
					mad r10.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r10.xyzx
					mad r11.xyz, r7.xyzx, r4.xxxx, r11.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mul r12.xyz, cb1[4].yyyy, cb2[17].xyzx
					mad r12.xyz, cb2[16].xyzx, cb1[4].xxxx, r12.xyzx
					mad r12.xyz, cb2[18].xyzx, cb1[4].zzzz, r12.xyzx
					add r12.xyz, r12.xyzx, cb2[19].xyzx
					mul r13.xyz, r0.zzzz, cb2[17].xyzx
					mad r13.xyz, cb2[16].xyzx, r0.yyyy, r13.xyzx
					mad r13.xyz, cb2[18].xyzx, r0.wwww, r13.xyzx
					add r13.xyz, r13.xyzx, cb2[19].xyzx
					add r13.xyz, -r12.xyzx, r13.xyzx
					mul r14.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000)
					mad r12.xyz, r14.xyzx, r0.xxxx, r12.xyzx
					mad r14.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r12.xyzx
					mad r4.xyz, r14.xyzx, r4.zzzz, r11.xyzx
					mad r11.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r14.xyzx
					mul r14.xyz, cb1[4].yyyy, cb2[21].xyzx
					mad r14.xyz, cb2[20].xyzx, cb1[4].xxxx, r14.xyzx
					mad r14.xyz, cb2[22].xyzx, cb1[4].zzzz, r14.xyzx
					add r14.xyz, r14.xyzx, cb2[23].xyzx
					mul r15.xyz, r0.zzzz, cb2[21].xyzx
					mad r15.xyz, cb2[20].xyzx, r0.yyyy, r15.xyzx
					mad r0.yzw, cb2[22].xxyz, r0.wwww, r15.xxyz
					add r0.yzw, r0.yyzw, cb2[23].xxyz
					add r0.yzw, -r14.xxyz, r0.yyzw
					mul r15.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000)
					mad r14.xyz, r15.xyzx, r0.xxxx, r14.xyzx
					mad r15.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r14.xyzx
					mad r4.xyz, r15.xyzx, r4.wwww, r4.xyzx
					mad r15.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r15.xyzx
					sample_c_lz r0.x, r4.xyxx, t2.xxxx, s1, r4.z
					movc r0.x, r2.w, r0.x, l(1.000000)
					mad r2.w, -cb0[13].w, cb0[13].w, l(1.000000)
					dp3 r3.w, r1.xyzx, r1.xyzx
					rsq r3.w, r3.w
					mul r4.xyz, r1.xyzx, r3.wwww
					dp3 r3.w, cb0[16].xyzx, r4.xyzx
					mad r3.w, -cb0[13].w, r3.w, l(1.000000)
					mul r3.w, r3.w, r3.w
					div r2.w, r2.w, r3.w
					mul r2.w, r2.w, l(0.079577)
					mul r2.w, r2.w, cb0[12].x
					mul r1.w, r1.w, r2.w
					mul r2.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mul r2.w, r1.w, r2.w
					mul r0.x, r0.x, r2.w
					mul r0.x, r0.x, cb0[12].y
					add r4.xyz, r3.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r16.xyz, r3.xyzx, -cb2[1].xyzx
					dp3 r4.y, r16.xyzx, r16.xyzx
					add r16.xyz, r3.xyzx, -cb2[2].xyzx
					dp3 r4.z, r16.xyzx, r16.xyzx
					add r3.xzw, r3.xxyz, -cb2[3].xxyz
					mul r2.w, r3.y, -cb0[13].y
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mul r2.w, r1.w, r2.w
					dp3 r4.w, r3.xzwx, r3.xzwx
					lt r3.xyzw, r4.xyzw, cb2[4].xyzw
					movc r4.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r4.xyz, r4.xyzx, r3.yzwy
					max r3.yzw, r4.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r4.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r4.x, r4.x, l(4.000000)
					mul r4.yzw, r3.yyyy, r8.xxyz
					mad r4.yzw, r5.xxyz, r3.xxxx, r4.yyzw
					mad r3.xyz, r12.xyzx, r3.zzzz, r4.yzwy
					mad r3.xyz, r14.xyzx, r3.wwww, r3.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r3.x, r4.x, r3.x, l(1.000000)
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r4.xyzx, r4.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					movc r4.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r4.xyz, r4.xyzx, r3.yzwy
					max r3.yzw, r4.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r4.xyz, r3.yyyy, r10.xyzx
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r10.xyzx
					mad r4.xyz, r7.xyzx, r3.xxxx, r4.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r3.xyz, r11.xyzx, r3.zzzz, r4.xyzx
					mad r3.xyz, r15.xyzx, r3.wwww, r3.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r15.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r11.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r9.xyz, r9.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r6.xyz, r6.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r10.xyz, r13.xyzx, l(0.043478, 0.043478, 0.043478, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.043478, 0.043478, 0.043478, 0.000000), r4.xyzx
					mad r0.yzw, r0.yyzw, l(0.000000, 0.043478, 0.043478, 0.043478), r4.xxyz
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mad r1.xyz, r1.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r11.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r11.xyzx, r11.xyzx
					add r11.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r11.xyzx, r11.xyzx
					add r2.xzw, r2.xxyz, -cb2[3].xxyz
					mul r2.y, r2.y, -cb0[13].y
					mul r2.y, r2.y, l(1.442695)
					exp r2.y, r2.y
					min r2.y, r2.y, l(1.000000)
					mul r2.y, r1.w, r2.y
					dp3 r8.w, r2.xzwx, r2.xzwx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r11.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r2.xzw, r8.xxyz, l(-1.000000,0,-1.000000,-1.000000), l(-0.000000,0,-0.000000,-0.000000)
					add r2.xzw, r2.xxzw, r11.yyzw
					max r11.yzw, r2.xxzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r2.xzw, r5.xxyz, r11.yyyy
					mad r2.xzw, r7.xxyz, r11.xxxx, r2.xxzw
					dp4 r3.w, r11.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r3.w, r3.w, l(4.000000)
					mad r2.xzw, r3.xxyz, r11.zzzz, r2.xxzw
					mad r2.xzw, r4.xxyz, r11.wwww, r2.xxzw
					sample_c_lz r2.x, r2.xzxx, t2.xxxx, s1, r2.w
					movc r2.x, r3.w, r2.x, l(1.000000)
					mul r2.x, r2.x, r2.y
					mad r0.x, r2.x, cb0[12].y, r0.x
					add r2.xyz, r1.xyzx, -cb2[0].xyzx
					dp3 r2.x, r2.xyzx, r2.xyzx
					add r3.xyz, r1.xyzx, -cb2[1].xyzx
					dp3 r2.y, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[2].xyzx
					dp3 r2.z, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[3].xyzx
					mul r1.x, r1.y, -cb0[13].y
					mul r1.x, r1.x, l(1.442695)
					exp r1.x, r1.x
					min r1.x, r1.x, l(1.000000)
					mul r1.x, r1.x, r1.w
					dp3 r2.w, r3.xyzx, r3.xyzx
					lt r2.xyzw, r2.xyzw, cb2[4].xyzw
					and r3.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r1.yzw, r2.xxyz, l(0,-1.000000,-1.000000,-1.000000), l(0,-0.000000,-0.000000,-0.000000)
					add r1.yzw, r1.yyzw, r3.yyzw
					max r3.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r1.yzw, r3.yyyy, r9.xxyz
					mad r1.yzw, r6.xxyz, r3.xxxx, r1.yyzw
					dp4 r2.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.x, r2.x, l(4.000000)
					mad r1.yzw, r10.xxyz, r3.zzzz, r1.yyzw
					mad r0.yzw, r0.yyzw, r3.wwww, r1.yyzw
					sample_c_lz r0.y, r0.yzyy, t2.xxxx, s1, r0.w
					movc r0.y, r2.x, r0.y, l(1.000000)
					mul r0.y, r0.y, r1.x
					mad r0.x, r0.y, cb0[12].y, r0.x
					mul o0.xyz, r0.xxxx, cb0[17].xyzx
					mov o0.w, l(0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Name "DS_RENDERLIGHTSHAFTS_32_QUARTER"
			Blend One One, One One
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 354825
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.250000, 0.250000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[18], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_constantbuffer CB2[24], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_comparison
					dcl_sampler s2, mode_default
					dcl_resource_texture3d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v2.xyz
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 17
					sample r0.xyzw, v2.xyzx, t0.xyzw, s2
					sample r1.xyzw, v1.xyxx, t1.xyzw, s0
					mad r0.y, cb1[7].x, r1.x, cb1[7].y
					div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
					mul r1.xyz, r0.yyyy, v3.xyzx
					mad r0.yzw, v3.xxyz, r0.yyyy, cb1[4].xxyz
					mul r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000)
					mad r3.xyz, r2.xyzx, r0.xxxx, cb1[4].xyzx
					dp3 r1.w, r2.xyzx, r2.xyzx
					sqrt r1.w, r1.w
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r5.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r4.y, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r4.z, r5.xyzx, r5.xyzx
					add r5.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r4.w, r5.xyzx, r5.xyzx
					lt r4.xyzw, r4.xyzw, cb2[4].xyzw
					movc r5.xyz, r4.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r5.xyz, r5.xyzx, r4.yzwy
					max r4.yzw, r5.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r5.xyz, cb1[4].yyyy, cb2[9].xyzx
					mad r5.xyz, cb2[8].xyzx, cb1[4].xxxx, r5.xyzx
					mad r5.xyz, cb2[10].xyzx, cb1[4].zzzz, r5.xyzx
					add r5.xyz, r5.xyzx, cb2[11].xyzx
					mul r6.xyz, r0.zzzz, cb2[9].xyzx
					mad r6.xyz, cb2[8].xyzx, r0.yyyy, r6.xyzx
					mad r6.xyz, cb2[10].xyzx, r0.wwww, r6.xyzx
					add r6.xyz, r6.xyzx, cb2[11].xyzx
					add r6.xyz, -r5.xyzx, r6.xyzx
					mul r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000)
					mad r5.xyz, r7.xyzx, r0.xxxx, r5.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mul r8.xyz, cb1[4].yyyy, cb2[13].xyzx
					mad r8.xyz, cb2[12].xyzx, cb1[4].xxxx, r8.xyzx
					mad r8.xyz, cb2[14].xyzx, cb1[4].zzzz, r8.xyzx
					add r8.xyz, r8.xyzx, cb2[15].xyzx
					mul r9.xyz, r0.zzzz, cb2[13].xyzx
					mad r9.xyz, cb2[12].xyzx, r0.yyyy, r9.xyzx
					mad r9.xyz, cb2[14].xyzx, r0.wwww, r9.xyzx
					add r9.xyz, r9.xyzx, cb2[15].xyzx
					add r9.xyz, -r8.xyzx, r9.xyzx
					mul r10.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000)
					mad r8.xyz, r10.xyzx, r0.xxxx, r8.xyzx
					mad r10.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r8.xyzx
					mul r11.xyz, r4.yyyy, r10.xyzx
					mad r10.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r10.xyzx
					mad r11.xyz, r7.xyzx, r4.xxxx, r11.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mul r12.xyz, cb1[4].yyyy, cb2[17].xyzx
					mad r12.xyz, cb2[16].xyzx, cb1[4].xxxx, r12.xyzx
					mad r12.xyz, cb2[18].xyzx, cb1[4].zzzz, r12.xyzx
					add r12.xyz, r12.xyzx, cb2[19].xyzx
					mul r13.xyz, r0.zzzz, cb2[17].xyzx
					mad r13.xyz, cb2[16].xyzx, r0.yyyy, r13.xyzx
					mad r13.xyz, cb2[18].xyzx, r0.wwww, r13.xyzx
					add r13.xyz, r13.xyzx, cb2[19].xyzx
					add r13.xyz, -r12.xyzx, r13.xyzx
					mul r14.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000)
					mad r12.xyz, r14.xyzx, r0.xxxx, r12.xyzx
					mad r14.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r12.xyzx
					mad r4.xyz, r14.xyzx, r4.zzzz, r11.xyzx
					mad r11.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r14.xyzx
					mul r14.xyz, cb1[4].yyyy, cb2[21].xyzx
					mad r14.xyz, cb2[20].xyzx, cb1[4].xxxx, r14.xyzx
					mad r14.xyz, cb2[22].xyzx, cb1[4].zzzz, r14.xyzx
					add r14.xyz, r14.xyzx, cb2[23].xyzx
					mul r15.xyz, r0.zzzz, cb2[21].xyzx
					mad r15.xyz, cb2[20].xyzx, r0.yyyy, r15.xyzx
					mad r0.yzw, cb2[22].xxyz, r0.wwww, r15.xxyz
					add r0.yzw, r0.yyzw, cb2[23].xxyz
					add r0.yzw, -r14.xxyz, r0.yyzw
					mul r15.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000)
					mad r14.xyz, r15.xyzx, r0.xxxx, r14.xyzx
					mad r15.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r14.xyzx
					mad r4.xyz, r15.xyzx, r4.wwww, r4.xyzx
					mad r15.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r15.xyzx
					sample_c_lz r0.x, r4.xyxx, t2.xxxx, s1, r4.z
					movc r0.x, r2.w, r0.x, l(1.000000)
					mul r2.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mad r3.w, -cb0[13].w, cb0[13].w, l(1.000000)
					dp3 r4.x, r1.xyzx, r1.xyzx
					rsq r4.x, r4.x
					mul r4.xyz, r1.xyzx, r4.xxxx
					dp3 r4.x, cb0[16].xyzx, r4.xyzx
					mad r4.x, -cb0[13].w, r4.x, l(1.000000)
					mul r4.x, r4.x, r4.x
					div r3.w, r3.w, r4.x
					mul r3.w, r3.w, l(0.079577)
					mul r3.w, r3.w, cb0[12].x
					mul r1.w, r1.w, r3.w
					mul r2.w, r2.w, r1.w
					mul r0.x, r0.x, r2.w
					mul r0.x, r0.x, cb0[12].y
					add r4.xyz, r3.xyzx, -cb2[0].xyzx
					dp3 r4.x, r4.xyzx, r4.xyzx
					add r16.xyz, r3.xyzx, -cb2[1].xyzx
					dp3 r4.y, r16.xyzx, r16.xyzx
					add r16.xyz, r3.xyzx, -cb2[2].xyzx
					dp3 r4.z, r16.xyzx, r16.xyzx
					add r3.xzw, r3.xxyz, -cb2[3].xxyz
					mul r2.w, r3.y, -cb0[13].y
					mul r2.w, r2.w, l(1.442695)
					exp r2.w, r2.w
					min r2.w, r2.w, l(1.000000)
					mul r2.w, r1.w, r2.w
					dp3 r4.w, r3.xzwx, r3.xzwx
					lt r3.xyzw, r4.xyzw, cb2[4].xyzw
					movc r4.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r4.xyz, r4.xyzx, r3.yzwy
					max r3.yzw, r4.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r4.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r4.x, r4.x, l(4.000000)
					mul r4.yzw, r3.yyyy, r8.xxyz
					mad r4.yzw, r5.xxyz, r3.xxxx, r4.yyzw
					mad r3.xyz, r12.xyzx, r3.zzzz, r4.yzwy
					mad r3.xyz, r14.xyzx, r3.wwww, r3.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r3.x, r4.x, r3.x, l(1.000000)
					mul r2.w, r2.w, r3.x
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r3.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r3.x, r3.xyzx, r3.xyzx
					add r4.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r3.y, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r3.z, r4.xyzx, r4.xyzx
					add r4.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r3.w, r4.xyzx, r4.xyzx
					lt r3.xyzw, r3.xyzw, cb2[4].xyzw
					movc r4.xyz, r3.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r4.xyz, r4.xyzx, r3.yzwy
					max r3.yzw, r4.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r4.xyz, r3.yyyy, r10.xyzx
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r10.xyzx
					mad r4.xyz, r7.xyzx, r3.xxxx, r4.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r3.xyz, r11.xyzx, r3.zzzz, r4.xyzx
					mad r3.xyz, r15.xyzx, r3.wwww, r3.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r15.xyzx
					sample_c_lz r3.x, r3.xyxx, t2.xxxx, s1, r3.z
					movc r2.w, r2.w, r3.x, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r11.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					movc r10.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r8.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r10.xyz, r10.xyzx, r8.yzwy
					max r8.yzw, r10.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r10.xyz, r5.xyzx, r8.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r10.xyz, r7.xyzx, r8.xxxx, r10.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r8.zzzz, r10.xyzx
					mad r8.xyz, r4.xyzx, r8.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					movc r10.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r8.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r10.xyz, r10.xyzx, r8.yzwy
					max r8.yzw, r10.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r10.xyz, r5.xyzx, r8.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r10.xyz, r7.xyzx, r8.xxxx, r10.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r8.zzzz, r10.xyzx
					mad r8.xyz, r4.xyzx, r8.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					movc r10.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r8.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r10.xyz, r10.xyzx, r8.yzwy
					max r8.yzw, r10.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r10.xyz, r5.xyzx, r8.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r10.xyz, r7.xyzx, r8.xxxx, r10.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r8.zzzz, r10.xyzx
					mad r8.xyz, r4.xyzx, r8.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					movc r10.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					and r8.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					add r10.xyz, r10.xyzx, r8.yzwy
					max r8.yzw, r10.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r10.xyz, r5.xyzx, r8.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r10.xyz, r7.xyzx, r8.xxxx, r10.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r8.zzzz, r10.xyzx
					mad r8.xyz, r4.xyzx, r8.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r10.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r10.xyzx, r10.xyzx
					add r10.xyz, r2.xyzx, -cb2[3].xyzx
					dp3 r8.w, r10.xyzx, r10.xyzx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r10.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r8.xyz, r8.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
					add r8.xyz, r8.xyzx, r10.yzwy
					max r10.yzw, r8.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r8.xyz, r5.xyzx, r10.yyyy
					mad r5.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r9.xyz, r9.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r5.xyzx
					mad r8.xyz, r7.xyzx, r10.xxxx, r8.xyzx
					dp4 r2.w, r10.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.w, r2.w, l(4.000000)
					mad r7.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r6.xyz, r6.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r7.xyzx
					mad r8.xyz, r3.xyzx, r10.zzzz, r8.xyzx
					mad r3.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r10.xyz, r13.xyzx, l(0.032258, 0.032258, 0.032258, 0.000000), r3.xyzx
					mad r8.xyz, r4.xyzx, r10.wwww, r8.xyzx
					mad r4.xyz, r0.yzwy, l(0.032258, 0.032258, 0.032258, 0.000000), r4.xyzx
					mad r0.yzw, r0.yyzw, l(0.000000, 0.032258, 0.032258, 0.032258), r4.xxyz
					sample_c_lz r3.w, r8.xyxx, t2.xxxx, s1, r8.z
					movc r2.w, r2.w, r3.w, l(1.000000)
					mul r3.w, r2.y, -cb0[13].y
					mad r2.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mad r1.xyz, r1.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r2.xyzx
					mul r3.w, r3.w, l(1.442695)
					exp r3.w, r3.w
					min r3.w, r3.w, l(1.000000)
					mul r3.w, r1.w, r3.w
					mul r2.w, r2.w, r3.w
					mad r0.x, r2.w, cb0[12].y, r0.x
					add r8.xyz, r2.xyzx, -cb2[0].xyzx
					dp3 r8.x, r8.xyzx, r8.xyzx
					add r11.xyz, r2.xyzx, -cb2[1].xyzx
					dp3 r8.y, r11.xyzx, r11.xyzx
					add r11.xyz, r2.xyzx, -cb2[2].xyzx
					dp3 r8.z, r11.xyzx, r11.xyzx
					add r2.xzw, r2.xxyz, -cb2[3].xxyz
					mul r2.y, r2.y, -cb0[13].y
					mul r2.y, r2.y, l(1.442695)
					exp r2.y, r2.y
					min r2.y, r2.y, l(1.000000)
					mul r2.y, r1.w, r2.y
					dp3 r8.w, r2.xzwx, r2.xzwx
					lt r8.xyzw, r8.xyzw, cb2[4].xyzw
					and r11.xyzw, r8.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r2.xzw, r8.xxyz, l(-1.000000,0,-1.000000,-1.000000), l(-0.000000,0,-0.000000,-0.000000)
					add r2.xzw, r2.xxzw, r11.yyzw
					max r11.yzw, r2.xxzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r2.xzw, r5.xxyz, r11.yyyy
					mad r2.xzw, r7.xxyz, r11.xxxx, r2.xxzw
					dp4 r3.w, r11.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r3.w, r3.w, l(4.000000)
					mad r2.xzw, r3.xxyz, r11.zzzz, r2.xxzw
					mad r2.xzw, r4.xxyz, r11.wwww, r2.xxzw
					sample_c_lz r2.x, r2.xzxx, t2.xxxx, s1, r2.w
					movc r2.x, r3.w, r2.x, l(1.000000)
					mul r2.x, r2.x, r2.y
					mad r0.x, r2.x, cb0[12].y, r0.x
					add r2.xyz, r1.xyzx, -cb2[0].xyzx
					dp3 r2.x, r2.xyzx, r2.xyzx
					add r3.xyz, r1.xyzx, -cb2[1].xyzx
					dp3 r2.y, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[2].xyzx
					dp3 r2.z, r3.xyzx, r3.xyzx
					add r3.xyz, r1.xyzx, -cb2[3].xyzx
					mul r1.x, r1.y, -cb0[13].y
					mul r1.x, r1.x, l(1.442695)
					exp r1.x, r1.x
					min r1.x, r1.x, l(1.000000)
					mul r1.x, r1.x, r1.w
					dp3 r2.w, r3.xyzx, r3.xyzx
					lt r2.xyzw, r2.xyzw, cb2[4].xyzw
					and r3.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
					movc r1.yzw, r2.xxyz, l(0,-1.000000,-1.000000,-1.000000), l(0,-0.000000,-0.000000,-0.000000)
					add r1.yzw, r1.yyzw, r3.yyzw
					max r3.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					mul r1.yzw, r3.yyyy, r9.xxyz
					mad r1.yzw, r6.xxyz, r3.xxxx, r1.yyzw
					dp4 r2.x, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					lt r2.x, r2.x, l(4.000000)
					mad r1.yzw, r10.xxyz, r3.zzzz, r1.yyzw
					mad r0.yzw, r0.yyzw, r3.wwww, r1.yyzw
					sample_c_lz r0.y, r0.yzyy, t2.xxxx, s1, r0.w
					movc r0.y, r2.x, r0.y, l(1.000000)
					mul r0.y, r0.y, r1.x
					mad r0.x, r0.y, cb0[12].y, r0.x
					mul o0.xyz, r0.xxxx, cb0[17].xyzx
					mov o0.w, l(0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Name "DS_BILATERALBLUR_X"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 410776
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[21], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.y, r0.x, r0.y, v1.y
					mov o1.x, v1.x
					mov o1.z, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[23], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 6
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r1.xyzw, cb0[20].xyxy, l(1.000000, 0.000000, 2.000000, 0.000000), v1.xyxy
					sample_l r2.xyzw, r1.xyxx, t1.xyzw, s1, l(0.000000)
					mad r2.x, cb1[7].x, r2.x, cb1[7].y
					div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mad r2.y, cb1[7].x, r3.x, cb1[7].y
					div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
					add r2.x, -r2.y, r2.x
					mul r2.x, |r2.x|, cb0[22].x
					mul r2.x, r2.x, -r2.x
					mul r2.x, r2.x, l(1.442695)
					exp r2.x, r2.x
					mul r2.z, r2.x, l(0.135435)
					mad r2.x, r2.x, l(0.135435), l(0.144464)
					sample_l r3.xyzw, r1.xyxx, t0.xyzw, s0, l(0.000000)
					mul r3.xyzw, r2.zzzz, r3.xyzw
					mad r0.xyzw, r0.xyzw, l(0.144464, 0.144464, 0.144464, 0.144464), r3.xyzw
					mad r3.xyzw, -cb0[20].xyxy, l(1.000000, 0.000000, 2.000000, 0.000000), v1.xyxy
					sample_l r4.xyzw, r3.xyxx, t1.xyzw, s1, l(0.000000)
					mad r1.x, cb1[7].x, r4.x, cb1[7].y
					div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
					add r1.x, -r2.y, r1.x
					mul r1.x, |r1.x|, cb0[22].x
					mul r1.x, r1.x, -r1.x
					mul r1.x, r1.x, l(1.442695)
					exp r1.x, r1.x
					mul r1.y, r1.x, l(0.135435)
					mad r1.x, r1.x, l(0.135435), r2.x
					sample_l r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
					mad r0.xyzw, r4.xyzw, r1.yyyy, r0.xyzw
					sample_l r4.xyzw, r1.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r5.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.111535)
					mad r1.x, r1.y, l(0.111535), r1.x
					mad r0.xyzw, r5.xyzw, r1.zzzz, r0.xyzw
					sample_l r4.xyzw, r3.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.111535)
					mad r1.x, r1.y, l(0.111535), r1.x
					mad r0.xyzw, r3.xyzw, r1.zzzz, r0.xyzw
					mad r3.xyzw, cb0[20].xyxy, l(3.000000, 0.000000, 4.000000, 0.000000), v1.xyxy
					sample_l r4.xyzw, r3.xyxx, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.080553)
					mad r1.x, r1.y, l(0.080553), r1.x
					sample_l r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
					mad r0.xyzw, r4.xyzw, r1.zzzz, r0.xyzw
					mad r4.xyzw, -cb0[20].xyxy, l(3.000000, 0.000000, 4.000000, 0.000000), v1.xyxy
					sample_l r5.xyzw, r4.xyxx, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r5.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.080553)
					mad r1.x, r1.y, l(0.080553), r1.x
					sample_l r5.xyzw, r4.xyxx, t0.xyzw, s0, l(0.000000)
					mad r0.xyzw, r5.xyzw, r1.zzzz, r0.xyzw
					sample_l r5.xyzw, r3.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r5.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.050876)
					mad r1.x, r1.y, l(0.050876), r1.x
					mad r0.xyzw, r3.xyzw, r1.zzzz, r0.xyzw
					sample_l r3.xyzw, r4.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r4.xyzw, r4.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r3.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.050876)
					mad r1.x, r1.y, l(0.050876), r1.x
					mad r0.xyzw, r4.xyzw, r1.zzzz, r0.xyzw
					mad r3.xyzw, cb0[20].xyxy, l(5.000000, 0.000000, 6.000000, 0.000000), v1.xyxy
					sample_l r4.xyzw, r3.xyxx, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.027982)
					mad r1.x, r1.y, l(0.027982), r1.x
					sample_l r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
					mad r0.xyzw, r4.xyzw, r1.zzzz, r0.xyzw
					mad r4.xyzw, -cb0[20].xyxy, l(5.000000, 0.000000, 6.000000, 0.000000), v1.xyxy
					sample_l r5.xyzw, r4.xyxx, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r5.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.027982)
					mad r1.x, r1.y, l(0.027982), r1.x
					sample_l r5.xyzw, r4.xyxx, t0.xyzw, s0, l(0.000000)
					mad r0.xyzw, r5.xyzw, r1.zzzz, r0.xyzw
					sample_l r5.xyzw, r3.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r5.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.013325)
					mad r1.x, r1.y, l(0.013325), r1.x
					mad r0.xyzw, r3.xyzw, r1.zzzz, r0.xyzw
					sample_l r3.xyzw, r4.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r4.xyzw, r4.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r3.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.013325)
					mad r1.x, r1.y, l(0.013325), r1.x
					mad r0.xyzw, r4.xyzw, r1.zzzz, r0.xyzw
					mad r1.yz, cb0[20].xxyx, l(0.000000, 7.000000, 0.000000, 0.000000), v1.xxyx
					sample_l r3.xyzw, r1.yzyy, t0.xyzw, s0, l(0.000000)
					sample_l r4.xyzw, r1.yzyy, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.005451)
					mad r1.x, r1.y, l(0.005451), r1.x
					mad r0.xyzw, r3.xyzw, r1.zzzz, r0.xyzw
					mad r1.yz, -cb0[20].xxyx, l(0.000000, 7.000000, 0.000000, 0.000000), v1.xxyx
					sample_l r3.xyzw, r1.yzyy, t0.xyzw, s0, l(0.000000)
					sample_l r4.xyzw, r1.yzyy, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.005451)
					mad r1.x, r1.y, l(0.005451), r1.x
					mad r0.xyzw, r3.xyzw, r1.zzzz, r0.xyzw
					div o0.xyzw, r0.xyzw, r1.xxxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Name "DS_BILATERALBLUR_Y"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 494845
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[21], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.y, r0.x, r0.y, v1.y
					mov o1.x, v1.x
					mov o1.z, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[23], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 6
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r1.xyzw, cb0[20].xyxy, l(0.000000, 1.000000, 0.000000, 2.000000), v1.xyxy
					sample_l r2.xyzw, r1.xyxx, t1.xyzw, s1, l(0.000000)
					mad r2.x, cb1[7].x, r2.x, cb1[7].y
					div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mad r2.y, cb1[7].x, r3.x, cb1[7].y
					div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
					add r2.x, -r2.y, r2.x
					mul r2.x, |r2.x|, cb0[22].x
					mul r2.x, r2.x, -r2.x
					mul r2.x, r2.x, l(1.442695)
					exp r2.x, r2.x
					mul r2.z, r2.x, l(0.135435)
					mad r2.x, r2.x, l(0.135435), l(0.144464)
					sample_l r3.xyzw, r1.xyxx, t0.xyzw, s0, l(0.000000)
					mul r3.xyzw, r2.zzzz, r3.xyzw
					mad r0.xyzw, r0.xyzw, l(0.144464, 0.144464, 0.144464, 0.144464), r3.xyzw
					mad r3.xyzw, -cb0[20].xyxy, l(0.000000, 1.000000, 0.000000, 2.000000), v1.xyxy
					sample_l r4.xyzw, r3.xyxx, t1.xyzw, s1, l(0.000000)
					mad r1.x, cb1[7].x, r4.x, cb1[7].y
					div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
					add r1.x, -r2.y, r1.x
					mul r1.x, |r1.x|, cb0[22].x
					mul r1.x, r1.x, -r1.x
					mul r1.x, r1.x, l(1.442695)
					exp r1.x, r1.x
					mul r1.y, r1.x, l(0.135435)
					mad r1.x, r1.x, l(0.135435), r2.x
					sample_l r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
					mad r0.xyzw, r4.xyzw, r1.yyyy, r0.xyzw
					sample_l r4.xyzw, r1.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r5.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.111535)
					mad r1.x, r1.y, l(0.111535), r1.x
					mad r0.xyzw, r5.xyzw, r1.zzzz, r0.xyzw
					sample_l r4.xyzw, r3.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.111535)
					mad r1.x, r1.y, l(0.111535), r1.x
					mad r0.xyzw, r3.xyzw, r1.zzzz, r0.xyzw
					mad r3.xyzw, cb0[20].xyxy, l(0.000000, 3.000000, 0.000000, 4.000000), v1.xyxy
					sample_l r4.xyzw, r3.xyxx, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.080553)
					mad r1.x, r1.y, l(0.080553), r1.x
					sample_l r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
					mad r0.xyzw, r4.xyzw, r1.zzzz, r0.xyzw
					mad r4.xyzw, -cb0[20].xyxy, l(0.000000, 3.000000, 0.000000, 4.000000), v1.xyxy
					sample_l r5.xyzw, r4.xyxx, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r5.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.080553)
					mad r1.x, r1.y, l(0.080553), r1.x
					sample_l r5.xyzw, r4.xyxx, t0.xyzw, s0, l(0.000000)
					mad r0.xyzw, r5.xyzw, r1.zzzz, r0.xyzw
					sample_l r5.xyzw, r3.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r5.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.050876)
					mad r1.x, r1.y, l(0.050876), r1.x
					mad r0.xyzw, r3.xyzw, r1.zzzz, r0.xyzw
					sample_l r3.xyzw, r4.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r4.xyzw, r4.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r3.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.050876)
					mad r1.x, r1.y, l(0.050876), r1.x
					mad r0.xyzw, r4.xyzw, r1.zzzz, r0.xyzw
					mad r3.xyzw, cb0[20].xyxy, l(0.000000, 5.000000, 0.000000, 6.000000), v1.xyxy
					sample_l r4.xyzw, r3.xyxx, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.027982)
					mad r1.x, r1.y, l(0.027982), r1.x
					sample_l r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
					mad r0.xyzw, r4.xyzw, r1.zzzz, r0.xyzw
					mad r4.xyzw, -cb0[20].xyxy, l(0.000000, 5.000000, 0.000000, 6.000000), v1.xyxy
					sample_l r5.xyzw, r4.xyxx, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r5.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.027982)
					mad r1.x, r1.y, l(0.027982), r1.x
					sample_l r5.xyzw, r4.xyxx, t0.xyzw, s0, l(0.000000)
					mad r0.xyzw, r5.xyzw, r1.zzzz, r0.xyzw
					sample_l r5.xyzw, r3.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r5.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.013325)
					mad r1.x, r1.y, l(0.013325), r1.x
					mad r0.xyzw, r3.xyzw, r1.zzzz, r0.xyzw
					sample_l r3.xyzw, r4.zwzz, t1.xyzw, s1, l(0.000000)
					sample_l r4.xyzw, r4.zwzz, t0.xyzw, s0, l(0.000000)
					mad r1.y, cb1[7].x, r3.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.013325)
					mad r1.x, r1.y, l(0.013325), r1.x
					mad r0.xyzw, r4.xyzw, r1.zzzz, r0.xyzw
					mad r1.yz, cb0[20].xxyx, l(0.000000, 0.000000, 7.000000, 0.000000), v1.xxyx
					sample_l r3.xyzw, r1.yzyy, t0.xyzw, s0, l(0.000000)
					sample_l r4.xyzw, r1.yzyy, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.005451)
					mad r1.x, r1.y, l(0.005451), r1.x
					mad r0.xyzw, r3.xyzw, r1.zzzz, r0.xyzw
					mad r1.yz, -cb0[20].xxyx, l(0.000000, 0.000000, 7.000000, 0.000000), v1.xxyx
					sample_l r3.xyzw, r1.yzyy, t0.xyzw, s0, l(0.000000)
					sample_l r4.xyzw, r1.yzyy, t1.xyzw, s1, l(0.000000)
					mad r1.y, cb1[7].x, r4.x, cb1[7].y
					div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
					add r1.y, -r2.y, r1.y
					mul r1.y, |r1.y|, cb0[22].x
					mul r1.y, r1.y, -r1.y
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					mul r1.z, r1.y, l(0.005451)
					mad r1.x, r1.y, l(0.005451), r1.x
					mad r0.xyzw, r3.xyzw, r1.zzzz, r0.xyzw
					div o0.xyzw, r0.xyzw, r1.xxxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Name "DS_TEMPORALUPSCALE"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 565083
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_EXTINCTION" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_EXTINCTION" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xyzw        1     NONE   float   xy  
					// TEXCOORD                 1   xyzw        2     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					// TEXCOORD                 1   xyz         2     NONE   float   xyz 
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[7], immediateIndexed
					dcl_constantbuffer CB2[4], immediateIndexed
					dcl_constantbuffer CB3[21], immediateIndexed
					dcl_input v0.xy
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_output o2.xyz
					dcl_output o3.xyz
					dcl_temps 3
					mul r0.xyzw, v0.yyyy, cb2[1].xyzw
					mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb2[2].xyzw, l(0.100000, 0.100000, 0.100000, 0.100000), r0.xyzw
					add r0.xyzw, r0.xyzw, cb2[3].xyzw
					mul r1.xyzw, r0.yyyy, cb3[18].xyzw
					mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					mul r0.yz, cb1[6].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
					div r0.yz, r0.yyzy, cb0[23].zzzz
					mad r1.y, -v1.y, r0.z, l(1.000000)
					mul r2.xy, r0.yzyy, v1.xyxx
					add r1.x, -v1.y, l(1.000000)
					mov r2.z, v1.y
					movc r0.xy, r0.xxxx, r1.xyxx, r2.zyzz
					mov o2.x, r2.x
					mov r0.z, v1.x
					mov r0.w, l(1.000000)
					mov o1.xyz, r0.zxwz
					mov o2.y, r0.y
					mov o2.z, cb0[27].x
					mad r0.yzw, cb0[25].xxyz, v1.xxxx, cb0[24].xxyz
					mad o3.xyz, cb0[26].xyzx, r0.xxxx, r0.yzwy
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 5
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					sample r1.xyzw, v1.xyxx, t1.xyzw, s1
					lt r0.y, r0.x, l(0.999900)
					if_nz r0.y
					  mov r0.yzw, x0[r0.z + 0].xxyz
					  mul r2.xyz, r0.xxxx, v3.xyzx
					  dp3 r0.x, r2.xyzx, r2.xyzx
					  sqrt r2.w, r0.x
					  rsq r0.x, r0.x
					  mul r3.xyz, r0.xxxx, r2.xyzx
					  dp3 r0.x, cb0[16].xyzx, r3.xyzx
					  mul r2.xz, r2.wwww, cb0[15].xxyx
					  lt r3.x, l(0.001000), |r2.y|
					  mul r3.yz, r2.yyyy, cb0[13].xxyx
					  lt r4.xy, |r3.yzyy|, l(0.000010, 0.000010, 0.000000, 0.000000)
					  movc r3.yz, r4.xxyx, l(0,0.000010,0.000010,0), r3.yyzy
					  mul r4.xy, r3.yzyy, l(-1.442695, -1.442695, 0.000000, 0.000000)
					  exp r4.xy, r4.xyxx
					  add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					  div r3.yz, r4.xxyx, r3.yyzy
					  mul r3.yz, r2.xxzx, r3.yyzy
					  movc r2.xz, r3.xxxx, r3.yyzy, r2.xxzx
					  mul r3.yzw, cb0[11].xxyz, cb0[17].xxyz
					  mul r3.yzw, r2.xxxx, r3.yyzw
					  mad r2.x, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r4.x, -cb0[13].w, r0.x, l(1.000000)
					  mul r4.x, r4.x, r4.x
					  div r2.x, r2.x, r4.x
					  mul r2.x, r2.x, l(0.079577)
					  mul r2.x, r2.x, cb0[12].x
					  mul r2.x, r2.z, r2.x
					  add r2.z, -cb0[12].y, l(1.000000)
					  mul r2.x, r2.z, r2.x
					  mad r2.z, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.x, -cb0[14].w, r0.x, l(1.000000)
					  mul r0.x, r0.x, r0.x
					  div r0.x, r2.z, r0.x
					  mul r0.x, r0.x, l(0.079577)
					  mad r2.z, -cb0[14].x, cb1[5].z, r2.w
					  max r2.z, r2.z, l(0.000000)
					  mul r2.z, r2.z, cb0[15].z
					  mul r2.y, r2.y, cb0[14].y
					  lt r2.w, |r2.y|, l(0.000010)
					  movc r2.y, r2.w, l(0.000010), r2.y
					  mul r2.w, r2.y, l(-1.442695)
					  exp r2.w, r2.w
					  add r2.w, -r2.w, l(1.000000)
					  div r2.y, r2.w, r2.y
					  mul r2.y, r2.y, r2.z
					  movc r2.y, r3.x, r2.y, r2.z
					  mul r2.y, r2.y, -cb0[12].w
					  mul r2.y, r2.y, l(1.442695)
					  exp r2.y, r2.y
					  min r2.y, r2.y, l(1.000000)
					  add r2.y, -r2.y, l(1.000000)
					  mul r2.y, r2.y, cb0[14].z
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mad r3.xyz, r3.yzwy, l(0.079577, 0.079577, 0.079577, 0.000000), r1.xyzx
					  mad r2.xzw, cb0[17].xxyz, r2.xxxx, r3.xxyz
					  mad r3.xyz, cb0[19].xyzx, r0.xxxx, cb0[18].xyzx
					  add r3.xyz, -r2.xzwx, r3.xyzx
					  mad r2.xyz, r2.yyyy, r3.xyzx, r2.xzwx
					  add r1.xyz, r0.yzwy, r2.xyzx
					endif 
					mov o0.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					mad r2.xyz, v3.xyzx, r0.xxxx, cb1[4].xyzx
					mul r3.xyz, r2.yyyy, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.zzzz, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r2.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r2.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r2.w, l(1.000000), r2.w
					or r2.w, r2.w, r3.z
					if_z r2.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xyz, r2.xyzx, -r3.xyzx
					  dp3 r2.x, r2.xyzx, r2.xyzx
					  sqrt r2.x, r2.x
					  mul r2.x, -r2.x, cb0[22].z
					  mul r2.x, r2.x, l(1.442695)
					  exp r2.x, r2.x
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r2.x, r2.x, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r2.xxxx, r3.xyzw, r1.xyzw
					endif 
					sample r2.xyzw, v1.xyxx, t1.xyzw, s1
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  dp3 r0.x, r0.yzwy, r0.yzwy
					  sqrt r3.x, r0.x
					  rsq r0.x, r0.x
					  mul r0.xyw, r0.xxxx, r0.yzyw
					  dp3 r0.x, cb0[16].xyzx, r0.xywx
					  mul r0.yw, r3.xxxx, cb0[15].xxxy
					  lt r3.y, l(0.001000), |r0.z|
					  mul r3.zw, r0.zzzz, cb0[13].xxxy
					  lt r4.xy, |r3.zwzz|, l(0.000010, 0.000010, 0.000000, 0.000000)
					  movc r3.zw, r4.xxxy, l(0,0,0.000010,0.000010), r3.zzzw
					  mul r4.xy, r3.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
					  exp r4.xy, r4.xyxx
					  add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					  div r3.zw, r4.xxxy, r3.zzzw
					  mul r3.zw, r0.yyyw, r3.zzzw
					  movc r0.yw, r3.yyyy, r3.zzzw, r0.yyyw
					  mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					  mul r4.xyz, r0.yyyy, r4.xyzx
					  mad r0.y, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r3.z, -cb0[13].w, r0.x, l(1.000000)
					  mul r3.z, r3.z, r3.z
					  div r0.y, r0.y, r3.z
					  mul r0.y, r0.y, l(0.079577)
					  mul r0.y, r0.y, cb0[12].x
					  mul r0.y, r0.w, r0.y
					  add r0.w, -cb0[12].y, l(1.000000)
					  mul r0.y, r0.w, r0.y
					  mad r0.w, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.x, -cb0[14].w, r0.x, l(1.000000)
					  mul r0.x, r0.x, r0.x
					  div r0.x, r0.w, r0.x
					  mad r0.w, -cb0[14].x, cb1[5].z, r3.x
					  max r0.w, r0.w, l(0.000000)
					  mul r0.w, r0.w, cb0[15].z
					  mul r0.z, r0.z, cb0[14].y
					  lt r3.x, |r0.z|, l(0.000010)
					  movc r0.z, r3.x, l(0.000010), r0.z
					  mul r3.x, r0.z, l(-1.442695)
					  exp r3.x, r3.x
					  add r3.x, -r3.x, l(1.000000)
					  div r0.z, r3.x, r0.z
					  mul r0.z, r0.z, r0.w
					  movc r0.z, r3.y, r0.z, r0.w
					  mul r0.z, r0.z, -cb0[12].w
					  mul r0.xz, r0.xxzx, l(0.079577, 0.000000, 1.442695, 0.000000)
					  exp r0.z, r0.z
					  min r0.z, r0.z, l(1.000000)
					  add r0.z, -r0.z, l(1.000000)
					  mul r0.z, r0.z, cb0[14].z
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mad r3.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r2.xyzx
					  mad r3.xyz, cb0[17].xyzx, r0.yyyy, r3.xyzx
					  mad r0.xyw, cb0[19].xyxz, r0.xxxx, cb0[18].xyxz
					  add r0.xyw, -r3.xyxz, r0.xyxw
					  mad r0.xyz, r0.zzzz, r0.xywx, r3.xyzx
					  add r2.xyz, r1.xyzx, r0.xyzx
					endif 
					mov o0.xyzw, r2.xyzw
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 5
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r0.y, r1.xyzx, r1.xyzx
					rsq r0.w, r0.y
					mul r1.xzw, r0.wwww, r1.xxyz
					dp3 r0.w, cb0[16].xyzx, r1.xzwx
					sample r2.xyzw, v1.xyxx, t1.xyzw, s1
					mad r1.x, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r1.z, -cb0[14].w, r0.w, l(1.000000)
					mul r1.z, r1.z, r1.z
					div r1.x, r1.x, r1.z
					mul r1.x, r1.x, l(0.079577)
					mul r1.x, r1.x, cb0[12].z
					mul r1.x, r1.x, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mov r3.xyz, x0[r0.z + 0].xyzx
					  sqrt r0.x, r0.y
					  mad r0.y, -cb0[14].x, cb1[5].z, r0.x
					  max r0.y, r0.y, l(0.000000)
					  mul r0.y, r0.y, cb0[15].z
					  lt r0.z, l(0.001000), |r1.y|
					  mul r1.z, r1.y, cb0[14].y
					  lt r1.w, |r1.z|, l(0.000010)
					  movc r1.z, r1.w, l(0.000010), r1.z
					  mul r1.w, r1.z, l(-1.442695)
					  exp r1.w, r1.w
					  add r1.w, -r1.w, l(1.000000)
					  div r1.z, r1.w, r1.z
					  mul r1.z, r0.y, r1.z
					  movc r0.y, r0.z, r1.z, r0.y
					  mul r0.y, r0.y, -cb0[12].w
					  mul r0.y, r0.y, l(1.442695)
					  exp r0.y, r0.y
					  min r0.y, r0.y, l(1.000000)
					  add r0.y, -r0.y, l(1.000000)
					  mul r0.y, r0.y, cb0[14].z
					  mul r1.zw, r0.xxxx, cb0[15].xxxy
					  mul r4.xy, r1.yyyy, cb0[13].xyxx
					  lt r4.zw, |r4.xxxy|, l(0.000000, 0.000000, 0.000010, 0.000010)
					  movc r4.xy, r4.zwzz, l(0.000010,0.000010,0,0), r4.xyxx
					  mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
					  exp r4.zw, r4.zzzw
					  add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
					  div r4.xy, r4.zwzz, r4.xyxx
					  mul r4.xy, r1.zwzz, r4.xyxx
					  movc r0.xz, r0.zzzz, r4.xxyx, r1.zzwz
					  mul r1.yzw, cb0[11].xxyz, cb0[17].xxyz
					  mul r1.yzw, r0.xxxx, r1.yyzw
					  mad r0.x, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.w, -cb0[13].w, r0.w, l(1.000000)
					  mul r0.w, r0.w, r0.w
					  div r0.x, r0.x, r0.w
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].x
					  mul r0.x, r0.z, r0.x
					  add r0.z, -cb0[12].y, l(1.000000)
					  mul r0.x, r0.z, r0.x
					  mad r1.yzw, r1.yyzw, l(0.000000, 0.079577, 0.079577, 0.079577), r2.xxyz
					  mad r0.xzw, cb0[17].xxyz, r0.xxxx, r1.yyzw
					  mad r1.yzw, cb0[19].xxyz, r1.xxxx, cb0[18].xxyz
					  add r1.yzw, -r0.xxzw, r1.yyzw
					  mad r0.xyz, r0.yyyy, r1.yzwy, r0.xzwx
					  add r2.xyz, r3.xyzx, r0.xyzx
					else 
					  mad r2.xyz, cb0[19].xyzx, r1.xxxx, r2.xyzx
					endif 
					mov o0.xyzw, r2.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					rsq r2.y, r2.x
					mul r2.yzw, r0.yyzw, r2.yyyy
					dp3 r0.y, cb0[16].xyzx, r2.yzwy
					mad r2.yzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.yyyy, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r0.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r0.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r0.w, l(1.000000), r0.w
					or r0.w, r0.w, r3.z
					if_z r0.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.yzw, r2.yyzw, -r3.xxyz
					  dp3 r0.w, r2.yzwy, r2.yzwy
					  sqrt r0.w, r0.w
					  mul r0.w, -r0.w, cb0[22].z
					  mul r0.w, r0.w, l(1.442695)
					  exp r0.w, r0.w
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.w, r0.w, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.wwww, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mad r0.w, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r2.y, -cb0[14].w, r0.y, l(1.000000)
					mul r2.y, r2.y, r2.y
					div r0.w, r0.w, r2.y
					mul r0.w, r0.w, l(0.079577)
					mul r0.w, r0.w, cb0[12].z
					mul r0.w, r0.w, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  sqrt r0.x, r2.x
					  mad r2.x, -cb0[14].x, cb1[5].z, r0.x
					  max r2.x, r2.x, l(0.000000)
					  mul r2.x, r2.x, cb0[15].z
					  lt r2.y, l(0.001000), |r0.z|
					  mul r2.z, r0.z, cb0[14].y
					  lt r2.w, |r2.z|, l(0.000010)
					  movc r2.z, r2.w, l(0.000010), r2.z
					  mul r2.w, r2.z, l(-1.442695)
					  exp r2.w, r2.w
					  add r2.w, -r2.w, l(1.000000)
					  div r2.z, r2.w, r2.z
					  mul r2.z, r2.z, r2.x
					  movc r2.x, r2.y, r2.z, r2.x
					  mul r2.x, r2.x, -cb0[12].w
					  mul r2.x, r2.x, l(1.442695)
					  exp r2.x, r2.x
					  min r2.x, r2.x, l(1.000000)
					  add r2.x, -r2.x, l(1.000000)
					  mul r2.x, r2.x, cb0[14].z
					  mul r2.zw, r0.xxxx, cb0[15].xxxy
					  mul r0.xz, r0.zzzz, cb0[13].xxyx
					  lt r4.xy, |r0.xzxx|, l(0.000010, 0.000010, 0.000000, 0.000000)
					  movc r0.xz, r4.xxyx, l(0.000010,0,0.000010,0), r0.xxzx
					  mul r4.xy, r0.xzxx, l(-1.442695, -1.442695, 0.000000, 0.000000)
					  exp r4.xy, r4.xyxx
					  add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					  div r0.xz, r4.xxyx, r0.xxzx
					  mul r0.xz, r0.xxzx, r2.zzwz
					  movc r0.xz, r2.yyyy, r0.xxzx, r2.zzwz
					  mul r2.yzw, cb0[11].xxyz, cb0[17].xxyz
					  mul r2.yzw, r0.xxxx, r2.yyzw
					  mad r0.x, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.y, -cb0[13].w, r0.y, l(1.000000)
					  mul r0.y, r0.y, r0.y
					  div r0.x, r0.x, r0.y
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].x
					  mul r0.x, r0.z, r0.x
					  add r0.y, -cb0[12].y, l(1.000000)
					  mul r0.x, r0.y, r0.x
					  mad r2.yzw, r2.yyzw, l(0.000000, 0.079577, 0.079577, 0.079577), r3.xxyz
					  mad r0.xyz, cb0[17].xyzx, r0.xxxx, r2.yzwy
					  mad r2.yzw, cb0[19].xxyz, r0.wwww, cb0[18].xxyz
					  add r2.yzw, -r0.xxyz, r2.yyzw
					  mad r0.xyz, r2.xxxx, r2.yzwy, r0.xyzx
					  add r3.xyz, r1.xyzx, r0.xyzx
					else 
					  mad r3.xyz, cb0[19].xyzx, r0.wwww, r3.xyzx
					endif 
					mov o0.xyzw, r3.xyzw
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_EXTINCTION" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 5
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r0.y, r1.xyzx, r1.xyzx
					sqrt r0.w, r0.y
					sample r2.xyzw, v1.xyxx, t1.xyzw, s1
					mad r1.w, -cb0[14].x, cb1[5].z, r0.w
					max r1.w, r1.w, l(0.000000)
					mul r1.w, r1.w, cb0[15].z
					lt r3.x, l(0.001000), |r1.y|
					mul r3.y, r1.y, cb0[14].y
					lt r3.z, |r3.y|, l(0.000010)
					movc r3.y, r3.z, l(0.000010), r3.y
					mul r3.z, r3.y, l(-1.442695)
					exp r3.z, r3.z
					add r3.z, -r3.z, l(1.000000)
					div r3.y, r3.z, r3.y
					mul r3.y, r1.w, r3.y
					movc r1.w, r3.x, r3.y, r1.w
					mul r1.w, r1.w, -cb0[12].w
					mul r1.w, r1.w, l(1.442695)
					exp r1.w, r1.w
					min r1.w, r1.w, l(1.000000)
					add r1.w, -r1.w, l(1.000000)
					mul r1.w, r1.w, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mov r3.yzw, x0[r0.z + 0].xxyz
					  rsq r0.x, r0.y
					  mul r0.xyz, r0.xxxx, r1.xyzx
					  dp3 r0.x, cb0[16].xyzx, r0.xyzx
					  mad r0.y, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.z, -cb0[14].w, r0.x, l(1.000000)
					  mul r0.z, r0.z, r0.z
					  div r0.y, r0.y, r0.z
					  mul r0.y, r0.y, l(0.079577)
					  mul r0.y, r0.y, cb0[12].z
					  mul r0.y, r0.y, cb0[14].z
					  mul r0.zw, r0.wwww, cb0[15].xxxy
					  mul r1.xy, r1.yyyy, cb0[13].xyxx
					  lt r4.xy, |r1.xyxx|, l(0.000010, 0.000010, 0.000000, 0.000000)
					  movc r1.xy, r4.xyxx, l(0.000010,0.000010,0,0), r1.xyxx
					  mul r4.xy, r1.xyxx, l(-1.442695, -1.442695, 0.000000, 0.000000)
					  exp r4.xy, r4.xyxx
					  add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					  div r1.xy, r4.xyxx, r1.xyxx
					  mul r1.xy, r0.zwzz, r1.xyxx
					  movc r0.zw, r3.xxxx, r1.xxxy, r0.zzzw
					  mul r1.xyz, cb0[11].xyzx, cb0[17].xyzx
					  mul r1.xyz, r0.zzzz, r1.xyzx
					  mad r0.z, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.x, -cb0[13].w, r0.x, l(1.000000)
					  mul r0.x, r0.x, r0.x
					  div r0.x, r0.z, r0.x
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].x
					  mul r0.x, r0.w, r0.x
					  add r0.z, -cb0[12].y, l(1.000000)
					  mul r0.x, r0.z, r0.x
					  mad r1.xyz, r1.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r2.xyzx
					  mad r0.xzw, cb0[17].xxyz, r0.xxxx, r1.xxyz
					  mad r1.xyz, cb0[19].xyzx, r0.yyyy, cb0[18].xyzx
					  add r1.xyz, -r0.xzwx, r1.xyzx
					  mad r0.xyz, r1.wwww, r1.xyzx, r0.xzwx
					  add r2.xyz, r3.yzwy, r0.xyzx
					else 
					  add r0.xyz, -r2.xyzx, cb0[18].xyzx
					  mad r2.xyz, r1.wwww, r0.xyzx, r2.xyzx
					endif 
					mov o0.xyzw, r2.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					mad r3.xyz, v3.xyzx, r0.xxxx, cb1[4].xyzx
					mul r4.xyz, r3.yyyy, cb0[29].xywx
					mad r4.xyz, cb0[28].xywx, r3.xxxx, r4.xyzx
					mad r4.xyz, cb0[30].xywx, r3.zzzz, r4.xyzx
					add r4.xyz, r4.xyzx, cb0[31].xywx
					div r2.zw, r4.xxxy, r4.zzzz
					add r4.xy, r2.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
					mul r5.x, r4.x, l(0.500000)
					mad r3.w, -r4.y, l(0.500000), l(1.000000)
					lt r4.z, r4.x, l(0.000000)
					lt r4.x, l(2.000000), r4.x
					or r4.x, r4.x, r4.z
					lt r4.z, r3.w, l(0.000000)
					or r4.x, r4.z, r4.x
					lt r3.w, l(1.000000), r3.w
					or r3.w, r3.w, r4.x
					if_z r3.w
					  mad r5.z, -r4.y, l(0.500000), l(1.000000)
					  sample r4.xyzw, r5.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r2.wwww, cb0[33].xyzw
					  mad r6.xyzw, cb0[32].xyzw, r2.zzzz, r6.xyzw
					  mad r4.xyzw, cb0[34].xyzw, r4.xxxx, r6.xyzw
					  add r4.xyzw, r4.xyzw, cb0[35].xyzw
					  div r4.xyz, r4.xyzx, r4.wwww
					  add r3.xyz, r3.xyzx, -r4.xyzx
					  dp3 r2.z, r3.xyzx, r3.xyzx
					  sqrt r2.z, r2.z
					  mul r2.z, -r2.z, cb0[22].z
					  mul r2.z, r2.z, l(1.442695)
					  exp r2.z, r2.z
					  sample r3.xyzw, r5.xzxx, t4.xyzw, s3
					  mul r2.z, r2.z, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r2.zzzz, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mad r2.z, -cb0[14].x, cb1[5].z, r2.y
					max r2.z, r2.z, l(0.000000)
					mul r2.z, r2.z, cb0[15].z
					lt r2.w, l(0.001000), |r0.z|
					mul r4.x, r0.z, cb0[14].y
					lt r4.y, |r4.x|, l(0.000010)
					movc r4.x, r4.y, l(0.000010), r4.x
					mul r4.y, r4.x, l(-1.442695)
					exp r4.y, r4.y
					add r4.y, -r4.y, l(1.000000)
					div r4.x, r4.y, r4.x
					mul r4.x, r2.z, r4.x
					movc r2.z, r2.w, r4.x, r2.z
					mul r2.z, r2.z, -cb0[12].w
					mul r2.z, r2.z, l(1.442695)
					exp r2.z, r2.z
					min r2.z, r2.z, l(1.000000)
					add r2.z, -r2.z, l(1.000000)
					mul r2.z, r2.z, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  rsq r0.x, r2.x
					  mul r0.xyw, r0.xxxx, r0.yzyw
					  dp3 r0.x, cb0[16].xyzx, r0.xywx
					  mad r0.y, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.w, -cb0[14].w, r0.x, l(1.000000)
					  mul r0.w, r0.w, r0.w
					  div r0.y, r0.y, r0.w
					  mul r0.y, r0.y, l(0.079577)
					  mul r0.y, r0.y, cb0[12].z
					  mul r0.y, r0.y, cb0[14].z
					  mul r2.xy, r2.yyyy, cb0[15].xyxx
					  mul r0.zw, r0.zzzz, cb0[13].xxxy
					  lt r4.xy, |r0.zwzz|, l(0.000010, 0.000010, 0.000000, 0.000000)
					  movc r0.zw, r4.xxxy, l(0,0,0.000010,0.000010), r0.zzzw
					  mul r4.xy, r0.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
					  exp r4.xy, r4.xyxx
					  add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					  div r0.zw, r4.xxxy, r0.zzzw
					  mul r0.zw, r0.zzzw, r2.xxxy
					  movc r0.zw, r2.wwww, r0.zzzw, r2.xxxy
					  mul r2.xyw, cb0[11].xyxz, cb0[17].xyxz
					  mul r2.xyw, r0.zzzz, r2.xyxw
					  mad r0.z, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.x, -cb0[13].w, r0.x, l(1.000000)
					  mul r0.x, r0.x, r0.x
					  div r0.x, r0.z, r0.x
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].x
					  mul r0.x, r0.w, r0.x
					  add r0.z, -cb0[12].y, l(1.000000)
					  mul r0.x, r0.z, r0.x
					  mad r2.xyw, r2.xyxw, l(0.079577, 0.079577, 0.000000, 0.079577), r3.xyxz
					  mad r0.xzw, cb0[17].xxyz, r0.xxxx, r2.xxyw
					  mad r2.xyw, cb0[19].xyxz, r0.yyyy, cb0[18].xyxz
					  add r2.xyw, -r0.xzxw, r2.xyxw
					  mad r0.xyz, r2.zzzz, r2.xywx, r0.xzwx
					  add r3.xyz, r1.xyzx, r0.xyzx
					else 
					  add r0.xyz, -r3.xyzx, cb0[18].xyzx
					  mad r3.xyz, r2.zzzz, r0.xyzx, r3.xyzx
					endif 
					mov o0.xyzw, r3.xyzw
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 5
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r0.y, r1.xyzx, r1.xyzx
					sqrt r0.w, r0.y
					rsq r0.y, r0.y
					mul r1.xzw, r0.yyyy, r1.xxyz
					dp3 r0.y, cb0[16].xyzx, r1.xzwx
					sample r2.xyzw, v1.xyxx, t1.xyzw, s1
					mad r1.x, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r1.z, -cb0[14].w, r0.y, l(1.000000)
					mul r1.z, r1.z, r1.z
					div r1.x, r1.x, r1.z
					mad r1.z, -cb0[14].x, cb1[5].z, r0.w
					max r1.z, r1.z, l(0.000000)
					mul r1.z, r1.z, cb0[15].z
					lt r1.w, l(0.001000), |r1.y|
					mul r3.x, r1.y, cb0[14].y
					lt r3.y, |r3.x|, l(0.000010)
					movc r3.x, r3.y, l(0.000010), r3.x
					mul r3.y, r3.x, l(-1.442695)
					exp r3.y, r3.y
					add r3.y, -r3.y, l(1.000000)
					div r3.x, r3.y, r3.x
					mul r3.x, r1.z, r3.x
					movc r1.z, r1.w, r3.x, r1.z
					mul r1.z, r1.z, -cb0[12].w
					mul r1.xz, r1.xxzx, l(0.079577, 0.000000, 1.442695, 0.000000)
					exp r1.z, r1.z
					min r1.z, r1.z, l(1.000000)
					add r1.z, -r1.z, l(1.000000)
					mul r1.z, r1.z, cb0[14].z
					mul r1.x, r1.x, cb0[12].z
					mul r1.x, r1.x, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mov r3.xyz, x0[r0.z + 0].xyzx
					  mul r0.xz, r0.wwww, cb0[15].xxyx
					  mul r4.xy, r1.yyyy, cb0[13].xyxx
					  lt r4.zw, |r4.xxxy|, l(0.000000, 0.000000, 0.000010, 0.000010)
					  movc r4.xy, r4.zwzz, l(0.000010,0.000010,0,0), r4.xyxx
					  mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
					  exp r4.zw, r4.zzzw
					  add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
					  div r4.xy, r4.zwzz, r4.xyxx
					  mul r4.xy, r0.xzxx, r4.xyxx
					  movc r0.xz, r1.wwww, r4.xxyx, r0.xxzx
					  mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					  mul r4.xyz, r0.xxxx, r4.xyzx
					  mad r0.x, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.y, -cb0[13].w, r0.y, l(1.000000)
					  mul r0.y, r0.y, r0.y
					  div r0.x, r0.x, r0.y
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].x
					  mul r0.x, r0.z, r0.x
					  add r0.y, -cb0[12].y, l(1.000000)
					  mul r0.x, r0.y, r0.x
					  mad r0.yzw, r4.xxyz, l(0.000000, 0.079577, 0.079577, 0.079577), r2.xxyz
					  mad r0.xyz, cb0[17].xyzx, r0.xxxx, r0.yzwy
					  mad r4.xyz, cb0[19].xyzx, r1.xxxx, cb0[18].xyzx
					  add r4.xyz, -r0.xyzx, r4.xyzx
					  mad r0.xyz, r1.zzzz, r4.xyzx, r0.xyzx
					  add r2.xyz, r3.xyzx, r0.xyzx
					else 
					  mad r0.xyz, cb0[19].xyzx, r1.xxxx, cb0[18].xyzx
					  add r0.xyz, -r2.xyzx, r0.xyzx
					  mad r2.xyz, r1.zzzz, r0.xyzx, r2.xyzx
					endif 
					mov o0.xyzw, r2.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					rsq r2.x, r2.x
					mul r2.xzw, r0.yyzw, r2.xxxx
					dp3 r0.y, cb0[16].xyzx, r2.xzwx
					mad r2.xzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r0.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r0.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r0.w, l(1.000000), r0.w
					or r0.w, r0.w, r3.z
					if_z r0.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xzw, r2.xxzw, -r3.xxyz
					  dp3 r0.w, r2.xzwx, r2.xzwx
					  sqrt r0.w, r0.w
					  mul r0.w, -r0.w, cb0[22].z
					  mul r0.w, r0.w, l(1.442695)
					  exp r0.w, r0.w
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.w, r0.w, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.wwww, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mad r0.w, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r2.x, -cb0[14].w, r0.y, l(1.000000)
					mul r2.x, r2.x, r2.x
					div r0.w, r0.w, r2.x
					mul r0.w, r0.w, l(0.079577)
					mad r2.x, -cb0[14].x, cb1[5].z, r2.y
					max r2.x, r2.x, l(0.000000)
					mul r2.x, r2.x, cb0[15].z
					lt r2.z, l(0.001000), |r0.z|
					mul r2.w, r0.z, cb0[14].y
					lt r4.x, |r2.w|, l(0.000010)
					movc r2.w, r4.x, l(0.000010), r2.w
					mul r4.x, r2.w, l(-1.442695)
					exp r4.x, r4.x
					add r4.x, -r4.x, l(1.000000)
					div r2.w, r4.x, r2.w
					mul r2.w, r2.w, r2.x
					movc r2.x, r2.z, r2.w, r2.x
					mul r2.x, r2.x, -cb0[12].w
					mul r2.x, r2.x, l(1.442695)
					exp r2.x, r2.x
					min r2.x, r2.x, l(1.000000)
					add r2.x, -r2.x, l(1.000000)
					mul r2.x, r2.x, cb0[14].z
					mul r0.w, r0.w, cb0[12].z
					mul r0.w, r0.w, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mul r2.yw, r2.yyyy, cb0[15].xxxy
					  mul r0.xz, r0.zzzz, cb0[13].xxyx
					  lt r4.xy, |r0.xzxx|, l(0.000010, 0.000010, 0.000000, 0.000000)
					  movc r0.xz, r4.xxyx, l(0.000010,0,0.000010,0), r0.xxzx
					  mul r4.xy, r0.xzxx, l(-1.442695, -1.442695, 0.000000, 0.000000)
					  exp r4.xy, r4.xyxx
					  add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					  div r0.xz, r4.xxyx, r0.xxzx
					  mul r0.xz, r0.xxzx, r2.yywy
					  movc r0.xz, r2.zzzz, r0.xxzx, r2.yywy
					  mul r2.yzw, cb0[11].xxyz, cb0[17].xxyz
					  mul r2.yzw, r0.xxxx, r2.yyzw
					  mad r0.x, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.y, -cb0[13].w, r0.y, l(1.000000)
					  mul r0.y, r0.y, r0.y
					  div r0.x, r0.x, r0.y
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].x
					  mul r0.x, r0.z, r0.x
					  add r0.y, -cb0[12].y, l(1.000000)
					  mul r0.x, r0.y, r0.x
					  mad r2.yzw, r2.yyzw, l(0.000000, 0.079577, 0.079577, 0.079577), r3.xxyz
					  mad r0.xyz, cb0[17].xyzx, r0.xxxx, r2.yzwy
					  mad r2.yzw, cb0[19].xxyz, r0.wwww, cb0[18].xxyz
					  add r2.yzw, -r0.xxyz, r2.yyzw
					  mad r0.xyz, r2.xxxx, r2.yzwy, r0.xyzx
					  add r3.xyz, r1.xyzx, r0.xyzx
					else 
					  mad r0.xyz, cb0[19].xyzx, r0.wwww, cb0[18].xyzx
					  add r0.xyz, -r3.xyzx, r0.xyzx
					  mad r3.xyz, r2.xxxx, r0.xyzx, r3.xyzx
					endif 
					mov o0.xyzw, r3.xyzw
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 5
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r0.yzw, x0[r0.z + 0].xxyz
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r1.w, r1.xyzx, r1.xyzx
					sqrt r2.x, r1.w
					rsq r1.w, r1.w
					mul r1.xzw, r1.wwww, r1.xxyz
					dp3 r1.x, cb0[16].xyzx, r1.xzwx
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.z, r2.x, cb0[15].y
					lt r1.w, l(0.001000), |r1.y|
					mul r2.y, r1.y, cb0[13].y
					lt r2.z, |r2.y|, l(0.000010)
					movc r2.y, r2.z, l(0.000010), r2.y
					mul r2.z, r2.y, l(-1.442695)
					exp r2.z, r2.z
					add r2.z, -r2.z, l(1.000000)
					div r2.y, r2.z, r2.y
					mul r2.y, r1.z, r2.y
					movc r1.z, r1.w, r2.y, r1.z
					mad r2.y, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.z, -cb0[13].w, r1.x, l(1.000000)
					mul r2.z, r2.z, r2.z
					div r2.y, r2.y, r2.z
					mul r2.y, r2.y, l(0.079577)
					mul r2.y, r2.y, cb0[12].x
					mul r1.z, r1.z, r2.y
					add r2.y, -cb0[12].y, l(1.000000)
					mul r1.z, r1.z, r2.y
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mul r0.x, r2.x, cb0[15].x
					  mul r2.y, r1.y, cb0[13].x
					  lt r2.z, |r2.y|, l(0.000010)
					  movc r2.y, r2.z, l(0.000010), r2.y
					  mul r2.z, r2.y, l(-1.442695)
					  exp r2.z, r2.z
					  add r2.z, -r2.z, l(1.000000)
					  div r2.y, r2.z, r2.y
					  mul r2.y, r0.x, r2.y
					  movc r0.x, r1.w, r2.y, r0.x
					  mul r2.yzw, cb0[11].xxyz, cb0[17].xxyz
					  mul r2.yzw, r0.xxxx, r2.yyzw
					  mad r0.x, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r1.x, -cb0[14].w, r1.x, l(1.000000)
					  mul r1.x, r1.x, r1.x
					  div r0.x, r0.x, r1.x
					  mul r0.x, r0.x, l(0.079577)
					  mad r1.x, -cb0[14].x, cb1[5].z, r2.x
					  max r1.x, r1.x, l(0.000000)
					  mul r1.x, r1.x, cb0[15].z
					  mul r1.y, r1.y, cb0[14].y
					  lt r2.x, |r1.y|, l(0.000010)
					  movc r1.y, r2.x, l(0.000010), r1.y
					  mul r2.x, r1.y, l(-1.442695)
					  exp r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  div r1.y, r2.x, r1.y
					  mul r1.y, r1.y, r1.x
					  movc r1.x, r1.w, r1.y, r1.x
					  mul r1.x, r1.x, -cb0[12].w
					  mul r1.x, r1.x, l(1.442695)
					  exp r1.x, r1.x
					  min r1.x, r1.x, l(1.000000)
					  add r1.x, -r1.x, l(1.000000)
					  mul r1.x, r1.x, cb0[14].z
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mad r2.xyz, r2.yzwy, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  mad r2.xyz, cb0[17].xyzx, r1.zzzz, r2.xyzx
					  mad r4.xyz, cb0[19].xyzx, r0.xxxx, cb0[18].xyzx
					  add r4.xyz, -r2.xyzx, r4.xyzx
					  mad r1.xyw, r1.xxxx, r4.xyxz, r2.xyxz
					else 
					  mad r1.xyw, cb0[17].xyxz, r1.zzzz, r3.xyxz
					endif 
					add o0.xyz, r0.yzwy, r1.xywx
					mov o0.w, r3.w
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					rsq r2.x, r2.x
					mul r2.xzw, r0.yyzw, r2.xxxx
					dp3 r0.y, cb0[16].xyzx, r2.xzwx
					mad r2.xzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r0.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r0.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r0.w, l(1.000000), r0.w
					or r0.w, r0.w, r3.z
					if_z r0.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xzw, r2.xxzw, -r3.xxyz
					  dp3 r0.w, r2.xzwx, r2.xzwx
					  sqrt r0.w, r0.w
					  mul r0.w, -r0.w, cb0[22].z
					  mul r0.w, r0.w, l(1.442695)
					  exp r0.w, r0.w
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.w, r0.w, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.wwww, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r0.w, r2.y, cb0[15].y
					lt r2.x, l(0.001000), |r0.z|
					mul r2.z, r0.z, cb0[13].y
					lt r2.w, |r2.z|, l(0.000010)
					movc r2.z, r2.w, l(0.000010), r2.z
					mul r2.w, r2.z, l(-1.442695)
					exp r2.w, r2.w
					add r2.w, -r2.w, l(1.000000)
					div r2.z, r2.w, r2.z
					mul r2.z, r0.w, r2.z
					movc r0.w, r2.x, r2.z, r0.w
					mad r2.z, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.w, -cb0[13].w, r0.y, l(1.000000)
					mul r2.w, r2.w, r2.w
					div r2.z, r2.z, r2.w
					mul r2.z, r2.z, l(0.079577)
					mul r2.z, r2.z, cb0[12].x
					mul r0.w, r0.w, r2.z
					add r2.z, -cb0[12].y, l(1.000000)
					mul r0.w, r0.w, r2.z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mul r0.x, r2.y, cb0[15].x
					  mul r2.z, r0.z, cb0[13].x
					  lt r2.w, |r2.z|, l(0.000010)
					  movc r2.z, r2.w, l(0.000010), r2.z
					  mul r2.w, r2.z, l(-1.442695)
					  exp r2.w, r2.w
					  add r2.w, -r2.w, l(1.000000)
					  div r2.z, r2.w, r2.z
					  mul r2.z, r0.x, r2.z
					  movc r0.x, r2.x, r2.z, r0.x
					  mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					  mul r4.xyz, r0.xxxx, r4.xyzx
					  mad r0.x, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.y, -cb0[14].w, r0.y, l(1.000000)
					  mul r0.y, r0.y, r0.y
					  div r0.x, r0.x, r0.y
					  mad r0.y, -cb0[14].x, cb1[5].z, r2.y
					  max r0.y, r0.y, l(0.000000)
					  mul r0.y, r0.y, cb0[15].z
					  mul r0.z, r0.z, cb0[14].y
					  lt r2.y, |r0.z|, l(0.000010)
					  movc r0.z, r2.y, l(0.000010), r0.z
					  mul r2.y, r0.z, l(-1.442695)
					  exp r2.y, r2.y
					  add r2.y, -r2.y, l(1.000000)
					  div r0.z, r2.y, r0.z
					  mul r0.z, r0.z, r0.y
					  movc r0.y, r2.x, r0.z, r0.y
					  mul r0.y, r0.y, -cb0[12].w
					  mul r0.xy, r0.xyxx, l(0.079577, 1.442695, 0.000000, 0.000000)
					  exp r0.y, r0.y
					  min r0.y, r0.y, l(1.000000)
					  add r0.y, -r0.y, l(1.000000)
					  mul r0.y, r0.y, cb0[14].z
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mad r2.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  mad r2.xyz, cb0[17].xyzx, r0.wwww, r2.xyzx
					  mad r4.xyz, cb0[19].xyzx, r0.xxxx, cb0[18].xyzx
					  add r4.xyz, -r2.xyzx, r4.xyzx
					  mad r0.xyz, r0.yyyy, r4.xyzx, r2.xyzx
					else 
					  mad r0.xyz, cb0[17].xyzx, r0.wwww, r3.xyzx
					endif 
					add o0.xyz, r1.xyzx, r0.xyzx
					mov o0.w, r3.w
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 5
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r0.yzw, x0[r0.z + 0].xxyz
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r1.w, r1.xyzx, r1.xyzx
					sqrt r2.x, r1.w
					rsq r1.w, r1.w
					mul r1.xzw, r1.wwww, r1.xxyz
					dp3 r1.x, cb0[16].xyzx, r1.xzwx
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.z, r2.x, cb0[15].y
					lt r1.w, l(0.001000), |r1.y|
					mul r2.y, r1.y, cb0[13].y
					lt r2.z, |r2.y|, l(0.000010)
					movc r2.y, r2.z, l(0.000010), r2.y
					mul r2.z, r2.y, l(-1.442695)
					exp r2.z, r2.z
					add r2.z, -r2.z, l(1.000000)
					div r2.y, r2.z, r2.y
					mul r2.y, r1.z, r2.y
					movc r1.z, r1.w, r2.y, r1.z
					mad r2.y, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.z, -cb0[13].w, r1.x, l(1.000000)
					mul r2.z, r2.z, r2.z
					div r2.y, r2.y, r2.z
					mul r2.y, r2.y, l(0.079577)
					mul r2.y, r2.y, cb0[12].x
					mul r1.z, r1.z, r2.y
					add r2.y, -cb0[12].y, l(1.000000)
					mul r1.z, r1.z, r2.y
					mad r2.y, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r1.x, -cb0[14].w, r1.x, l(1.000000)
					mul r1.x, r1.x, r1.x
					div r1.x, r2.y, r1.x
					mul r1.x, r1.x, l(0.079577)
					mul r1.x, r1.x, cb0[12].z
					mul r1.x, r1.x, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mad r0.x, -cb0[14].x, cb1[5].z, r2.x
					  max r0.x, r0.x, l(0.000000)
					  mul r0.x, r0.x, cb0[15].z
					  mul r2.y, r1.y, cb0[14].y
					  lt r2.z, |r2.y|, l(0.000010)
					  movc r2.y, r2.z, l(0.000010), r2.y
					  mul r2.z, r2.y, l(-1.442695)
					  exp r2.z, r2.z
					  add r2.z, -r2.z, l(1.000000)
					  div r2.y, r2.z, r2.y
					  mul r2.y, r0.x, r2.y
					  movc r0.x, r1.w, r2.y, r0.x
					  mul r0.x, r0.x, -cb0[12].w
					  mul r0.x, r0.x, l(1.442695)
					  exp r0.x, r0.x
					  min r0.x, r0.x, l(1.000000)
					  add r0.x, -r0.x, l(1.000000)
					  mul r0.x, r0.x, cb0[14].z
					  mul r2.x, r2.x, cb0[15].x
					  mul r1.y, r1.y, cb0[13].x
					  lt r2.y, |r1.y|, l(0.000010)
					  movc r1.y, r2.y, l(0.000010), r1.y
					  mul r2.y, r1.y, l(-1.442695)
					  exp r2.y, r2.y
					  add r2.y, -r2.y, l(1.000000)
					  div r1.y, r2.y, r1.y
					  mul r1.y, r1.y, r2.x
					  movc r1.y, r1.w, r1.y, r2.x
					  mul r2.xyz, cb0[11].xyzx, cb0[17].xyzx
					  mul r2.xyz, r1.yyyy, r2.xyzx
					  mad r2.xyz, r2.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  mad r2.xyz, cb0[17].xyzx, r1.zzzz, r2.xyzx
					  mad r4.xyz, cb0[19].xyzx, r1.xxxx, cb0[18].xyzx
					  add r4.xyz, -r2.xyzx, r4.xyzx
					  mad r2.xyz, r0.xxxx, r4.xyzx, r2.xyzx
					else 
					  mul r1.xyw, r1.xxxx, cb0[19].xyxz
					  mad r1.xyz, cb0[17].xyzx, r1.zzzz, r1.xywx
					  add r2.xyz, r1.xyzx, r3.xyzx
					endif 
					add o0.xyz, r0.yzwy, r2.xyzx
					mov o0.w, r3.w
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					rsq r2.x, r2.x
					mul r2.xzw, r0.yyzw, r2.xxxx
					dp3 r0.y, cb0[16].xyzx, r2.xzwx
					mad r2.xzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r0.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r0.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r0.w, l(1.000000), r0.w
					or r0.w, r0.w, r3.z
					if_z r0.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xzw, r2.xxzw, -r3.xxyz
					  dp3 r0.w, r2.xzwx, r2.xzwx
					  sqrt r0.w, r0.w
					  mul r0.w, -r0.w, cb0[22].z
					  mul r0.w, r0.w, l(1.442695)
					  exp r0.w, r0.w
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.w, r0.w, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.wwww, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r0.w, r2.y, cb0[15].y
					lt r2.x, l(0.001000), |r0.z|
					mul r2.z, r0.z, cb0[13].y
					lt r2.w, |r2.z|, l(0.000010)
					movc r2.z, r2.w, l(0.000010), r2.z
					mul r2.w, r2.z, l(-1.442695)
					exp r2.w, r2.w
					add r2.w, -r2.w, l(1.000000)
					div r2.z, r2.w, r2.z
					mul r2.z, r0.w, r2.z
					movc r0.w, r2.x, r2.z, r0.w
					mad r2.z, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.w, -cb0[13].w, r0.y, l(1.000000)
					mul r2.w, r2.w, r2.w
					div r2.z, r2.z, r2.w
					mul r2.z, r2.z, l(0.079577)
					mul r2.z, r2.z, cb0[12].x
					mul r0.w, r0.w, r2.z
					add r2.z, -cb0[12].y, l(1.000000)
					mul r0.w, r0.w, r2.z
					mad r2.z, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r0.y, -cb0[14].w, r0.y, l(1.000000)
					mul r0.y, r0.y, r0.y
					div r0.y, r2.z, r0.y
					mul r0.y, r0.y, l(0.079577)
					mul r0.y, r0.y, cb0[12].z
					mul r0.y, r0.y, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mad r0.x, -cb0[14].x, cb1[5].z, r2.y
					  max r0.x, r0.x, l(0.000000)
					  mul r0.x, r0.x, cb0[15].z
					  mul r2.z, r0.z, cb0[14].y
					  lt r2.w, |r2.z|, l(0.000010)
					  movc r2.z, r2.w, l(0.000010), r2.z
					  mul r2.w, r2.z, l(-1.442695)
					  exp r2.w, r2.w
					  add r2.w, -r2.w, l(1.000000)
					  div r2.z, r2.w, r2.z
					  mul r2.z, r0.x, r2.z
					  movc r0.x, r2.x, r2.z, r0.x
					  mul r0.x, r0.x, -cb0[12].w
					  mul r0.x, r0.x, l(1.442695)
					  exp r0.x, r0.x
					  min r0.x, r0.x, l(1.000000)
					  add r0.x, -r0.x, l(1.000000)
					  mul r0.x, r0.x, cb0[14].z
					  mul r2.y, r2.y, cb0[15].x
					  mul r0.z, r0.z, cb0[13].x
					  lt r2.z, |r0.z|, l(0.000010)
					  movc r0.z, r2.z, l(0.000010), r0.z
					  mul r2.z, r0.z, l(-1.442695)
					  exp r2.z, r2.z
					  add r2.z, -r2.z, l(1.000000)
					  div r0.z, r2.z, r0.z
					  mul r0.z, r0.z, r2.y
					  movc r0.z, r2.x, r0.z, r2.y
					  mul r2.xyz, cb0[11].xyzx, cb0[17].xyzx
					  mul r2.xyz, r0.zzzz, r2.xyzx
					  mad r2.xyz, r2.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  mad r2.xyz, cb0[17].xyzx, r0.wwww, r2.xyzx
					  mad r4.xyz, cb0[19].xyzx, r0.yyyy, cb0[18].xyzx
					  add r4.xyz, -r2.xyzx, r4.xyzx
					  mad r2.xyz, r0.xxxx, r4.xyzx, r2.xyzx
					else 
					  mul r0.xyz, r0.yyyy, cb0[19].xyzx
					  mad r0.xyz, cb0[17].xyzx, r0.wwww, r0.xyzx
					  add r2.xyz, r0.xyzx, r3.xyzx
					endif 
					add o0.xyz, r1.xyzx, r2.xyzx
					mov o0.w, r3.w
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 5
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r0.yzw, x0[r0.z + 0].xxyz
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r1.w, r1.xyzx, r1.xyzx
					sqrt r2.x, r1.w
					rsq r1.w, r1.w
					mul r1.xzw, r1.wwww, r1.xxyz
					dp3 r1.x, cb0[16].xyzx, r1.xzwx
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.z, r2.x, cb0[15].y
					lt r1.w, l(0.001000), |r1.y|
					mul r2.y, r1.y, cb0[13].y
					lt r2.z, |r2.y|, l(0.000010)
					movc r2.y, r2.z, l(0.000010), r2.y
					mul r2.z, r2.y, l(-1.442695)
					exp r2.z, r2.z
					add r2.z, -r2.z, l(1.000000)
					div r2.y, r2.z, r2.y
					mul r2.y, r1.z, r2.y
					movc r1.z, r1.w, r2.y, r1.z
					mad r2.y, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.z, -cb0[13].w, r1.x, l(1.000000)
					mul r2.z, r2.z, r2.z
					div r2.y, r2.y, r2.z
					mul r2.y, r2.y, l(0.079577)
					mul r2.y, r2.y, cb0[12].x
					mul r1.z, r1.z, r2.y
					add r2.y, -cb0[12].y, l(1.000000)
					mul r1.z, r1.z, r2.y
					mad r2.y, -cb0[14].x, cb1[5].z, r2.x
					max r2.y, r2.y, l(0.000000)
					mul r2.y, r2.y, cb0[15].z
					mul r2.z, r1.y, cb0[14].y
					lt r2.w, |r2.z|, l(0.000010)
					movc r2.z, r2.w, l(0.000010), r2.z
					mul r2.w, r2.z, l(-1.442695)
					exp r2.w, r2.w
					add r2.w, -r2.w, l(1.000000)
					div r2.z, r2.w, r2.z
					mul r2.z, r2.z, r2.y
					movc r2.y, r1.w, r2.z, r2.y
					mul r2.y, r2.y, -cb0[12].w
					mul r2.y, r2.y, l(1.442695)
					exp r2.y, r2.y
					min r2.y, r2.y, l(1.000000)
					add r2.y, -r2.y, l(1.000000)
					mul r2.y, r2.y, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mad r0.x, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r1.x, -cb0[14].w, r1.x, l(1.000000)
					  mul r1.x, r1.x, r1.x
					  div r0.x, r0.x, r1.x
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mul r1.x, r2.x, cb0[15].x
					  mul r1.y, r1.y, cb0[13].x
					  lt r2.x, |r1.y|, l(0.000010)
					  movc r1.y, r2.x, l(0.000010), r1.y
					  mul r2.x, r1.y, l(-1.442695)
					  exp r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  div r1.y, r2.x, r1.y
					  mul r1.y, r1.y, r1.x
					  movc r1.x, r1.w, r1.y, r1.x
					  mul r2.xzw, cb0[11].xxyz, cb0[17].xxyz
					  mul r1.xyw, r1.xxxx, r2.xzxw
					  mad r1.xyw, r1.xyxw, l(0.079577, 0.079577, 0.000000, 0.079577), r3.xyxz
					  mad r1.xyw, cb0[17].xyxz, r1.zzzz, r1.xyxw
					  mad r2.xzw, cb0[19].xxyz, r0.xxxx, cb0[18].xxyz
					  add r2.xzw, -r1.xxyw, r2.xxzw
					  mad r1.xyw, r2.yyyy, r2.xzxw, r1.xyxw
					else 
					  mad r2.xzw, cb0[17].xxyz, r1.zzzz, r3.xxyz
					  add r3.xyz, -r2.xzwx, cb0[18].xyzx
					  mad r1.xyw, r2.yyyy, r3.xyxz, r2.xzxw
					endif 
					add o0.xyz, r0.yzwy, r1.xywx
					mov o0.w, r3.w
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					rsq r2.x, r2.x
					mul r2.xzw, r0.yyzw, r2.xxxx
					dp3 r0.y, cb0[16].xyzx, r2.xzwx
					mad r2.xzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r0.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r0.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r0.w, l(1.000000), r0.w
					or r0.w, r0.w, r3.z
					if_z r0.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xzw, r2.xxzw, -r3.xxyz
					  dp3 r0.w, r2.xzwx, r2.xzwx
					  sqrt r0.w, r0.w
					  mul r0.w, -r0.w, cb0[22].z
					  mul r0.w, r0.w, l(1.442695)
					  exp r0.w, r0.w
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.w, r0.w, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.wwww, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r0.w, r2.y, cb0[15].y
					lt r2.x, l(0.001000), |r0.z|
					mul r2.z, r0.z, cb0[13].y
					lt r2.w, |r2.z|, l(0.000010)
					movc r2.z, r2.w, l(0.000010), r2.z
					mul r2.w, r2.z, l(-1.442695)
					exp r2.w, r2.w
					add r2.w, -r2.w, l(1.000000)
					div r2.z, r2.w, r2.z
					mul r2.z, r0.w, r2.z
					movc r0.w, r2.x, r2.z, r0.w
					mad r2.z, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.w, -cb0[13].w, r0.y, l(1.000000)
					mul r2.w, r2.w, r2.w
					div r2.z, r2.z, r2.w
					mul r2.z, r2.z, l(0.079577)
					mul r2.z, r2.z, cb0[12].x
					mul r0.w, r0.w, r2.z
					add r2.z, -cb0[12].y, l(1.000000)
					mul r0.w, r0.w, r2.z
					mad r2.z, -cb0[14].x, cb1[5].z, r2.y
					max r2.z, r2.z, l(0.000000)
					mul r2.z, r2.z, cb0[15].z
					mul r2.w, r0.z, cb0[14].y
					lt r4.x, |r2.w|, l(0.000010)
					movc r2.w, r4.x, l(0.000010), r2.w
					mul r4.x, r2.w, l(-1.442695)
					exp r4.x, r4.x
					add r4.x, -r4.x, l(1.000000)
					div r2.w, r4.x, r2.w
					mul r2.w, r2.w, r2.z
					movc r2.z, r2.x, r2.w, r2.z
					mul r2.z, r2.z, -cb0[12].w
					mul r2.z, r2.z, l(1.442695)
					exp r2.z, r2.z
					min r2.z, r2.z, l(1.000000)
					add r2.z, -r2.z, l(1.000000)
					mul r2.z, r2.z, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mad r0.x, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.y, -cb0[14].w, r0.y, l(1.000000)
					  mul r0.y, r0.y, r0.y
					  div r0.x, r0.x, r0.y
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mul r0.y, r2.y, cb0[15].x
					  mul r0.z, r0.z, cb0[13].x
					  lt r2.y, |r0.z|, l(0.000010)
					  movc r0.z, r2.y, l(0.000010), r0.z
					  mul r2.y, r0.z, l(-1.442695)
					  exp r2.y, r2.y
					  add r2.y, -r2.y, l(1.000000)
					  div r0.z, r2.y, r0.z
					  mul r0.z, r0.z, r0.y
					  movc r0.y, r2.x, r0.z, r0.y
					  mul r2.xyw, cb0[11].xyxz, cb0[17].xyxz
					  mul r2.xyw, r0.yyyy, r2.xyxw
					  mad r2.xyw, r2.xyxw, l(0.079577, 0.079577, 0.000000, 0.079577), r3.xyxz
					  mad r2.xyw, cb0[17].xyxz, r0.wwww, r2.xyxw
					  mad r0.xyz, cb0[19].xyzx, r0.xxxx, cb0[18].xyzx
					  add r0.xyz, -r2.xywx, r0.xyzx
					  mad r0.xyz, r2.zzzz, r0.xyzx, r2.xywx
					else 
					  mad r2.xyw, cb0[17].xyxz, r0.wwww, r3.xyxz
					  add r3.xyz, -r2.xywx, cb0[18].xyzx
					  mad r0.xyz, r2.zzzz, r3.xyzx, r2.xywx
					endif 
					add o0.xyz, r1.xyzx, r0.xyzx
					mov o0.w, r3.w
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 5
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r0.yzw, x0[r0.z + 0].xxyz
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r1.w, r1.xyzx, r1.xyzx
					sqrt r2.x, r1.w
					rsq r1.w, r1.w
					mul r1.xzw, r1.wwww, r1.xxyz
					dp3 r1.x, cb0[16].xyzx, r1.xzwx
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.z, r2.x, cb0[15].y
					lt r1.w, l(0.001000), |r1.y|
					mul r2.y, r1.y, cb0[13].y
					lt r2.z, |r2.y|, l(0.000010)
					movc r2.y, r2.z, l(0.000010), r2.y
					mul r2.z, r2.y, l(-1.442695)
					exp r2.z, r2.z
					add r2.z, -r2.z, l(1.000000)
					div r2.y, r2.z, r2.y
					mul r2.y, r1.z, r2.y
					movc r1.z, r1.w, r2.y, r1.z
					mad r2.y, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.z, -cb0[13].w, r1.x, l(1.000000)
					mul r2.z, r2.z, r2.z
					div r2.y, r2.y, r2.z
					mul r2.y, r2.y, l(0.079577)
					mul r2.y, r2.y, cb0[12].x
					mul r1.z, r1.z, r2.y
					add r2.y, -cb0[12].y, l(1.000000)
					mul r1.z, r1.z, r2.y
					mad r2.y, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r1.x, -cb0[14].w, r1.x, l(1.000000)
					mul r1.x, r1.x, r1.x
					div r1.x, r2.y, r1.x
					mul r1.x, r1.x, l(0.079577)
					mad r2.y, -cb0[14].x, cb1[5].z, r2.x
					max r2.y, r2.y, l(0.000000)
					mul r2.y, r2.y, cb0[15].z
					mul r2.z, r1.y, cb0[14].y
					lt r2.w, |r2.z|, l(0.000010)
					movc r2.z, r2.w, l(0.000010), r2.z
					mul r2.w, r2.z, l(-1.442695)
					exp r2.w, r2.w
					add r2.w, -r2.w, l(1.000000)
					div r2.z, r2.w, r2.z
					mul r2.z, r2.z, r2.y
					movc r2.y, r1.w, r2.z, r2.y
					mul r2.y, r2.y, -cb0[12].w
					mul r2.y, r2.y, l(1.442695)
					exp r2.y, r2.y
					min r2.y, r2.y, l(1.000000)
					add r2.y, -r2.y, l(1.000000)
					mul r2.y, r2.y, cb0[14].z
					mul r1.x, r1.x, cb0[12].z
					mul r1.x, r1.x, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mul r0.x, r2.x, cb0[15].x
					  mul r1.y, r1.y, cb0[13].x
					  lt r2.x, |r1.y|, l(0.000010)
					  movc r1.y, r2.x, l(0.000010), r1.y
					  mul r2.x, r1.y, l(-1.442695)
					  exp r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  div r1.y, r2.x, r1.y
					  mul r1.y, r0.x, r1.y
					  movc r0.x, r1.w, r1.y, r0.x
					  mul r2.xzw, cb0[11].xxyz, cb0[17].xxyz
					  mul r2.xzw, r0.xxxx, r2.xxzw
					  mad r2.xzw, r2.xxzw, l(0.079577, 0.000000, 0.079577, 0.079577), r3.xxyz
					  mad r2.xzw, cb0[17].xxyz, r1.zzzz, r2.xxzw
					  mad r4.xyz, cb0[19].xyzx, r1.xxxx, cb0[18].xyzx
					  add r4.xyz, -r2.xzwx, r4.xyzx
					  mad r2.xzw, r2.yyyy, r4.xxyz, r2.xxzw
					else 
					  mad r1.yzw, cb0[17].xxyz, r1.zzzz, r3.xxyz
					  mad r3.xyz, cb0[19].xyzx, r1.xxxx, cb0[18].xyzx
					  add r3.xyz, -r1.yzwy, r3.xyzx
					  mad r2.xzw, r2.yyyy, r3.xxyz, r1.yyzw
					endif 
					add o0.xyz, r0.yzwy, r2.xzwx
					mov o0.w, r3.w
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					rsq r2.x, r2.x
					mul r2.xzw, r0.yyzw, r2.xxxx
					dp3 r0.y, cb0[16].xyzx, r2.xzwx
					mad r2.xzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r0.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r0.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r0.w, l(1.000000), r0.w
					or r0.w, r0.w, r3.z
					if_z r0.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xzw, r2.xxzw, -r3.xxyz
					  dp3 r0.w, r2.xzwx, r2.xzwx
					  sqrt r0.w, r0.w
					  mul r0.w, -r0.w, cb0[22].z
					  mul r0.w, r0.w, l(1.442695)
					  exp r0.w, r0.w
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.w, r0.w, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.wwww, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r0.w, r2.y, cb0[15].y
					lt r2.x, l(0.001000), |r0.z|
					mul r2.z, r0.z, cb0[13].y
					lt r2.w, |r2.z|, l(0.000010)
					movc r2.z, r2.w, l(0.000010), r2.z
					mul r2.w, r2.z, l(-1.442695)
					exp r2.w, r2.w
					add r2.w, -r2.w, l(1.000000)
					div r2.z, r2.w, r2.z
					mul r2.z, r0.w, r2.z
					movc r0.w, r2.x, r2.z, r0.w
					mad r2.z, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.w, -cb0[13].w, r0.y, l(1.000000)
					mul r2.w, r2.w, r2.w
					div r2.z, r2.z, r2.w
					mul r2.z, r2.z, l(0.079577)
					mul r2.z, r2.z, cb0[12].x
					mul r0.w, r0.w, r2.z
					add r2.z, -cb0[12].y, l(1.000000)
					mul r0.w, r0.w, r2.z
					mad r2.z, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r0.y, -cb0[14].w, r0.y, l(1.000000)
					mul r0.y, r0.y, r0.y
					div r0.y, r2.z, r0.y
					mul r0.y, r0.y, l(0.079577)
					mad r2.z, -cb0[14].x, cb1[5].z, r2.y
					max r2.z, r2.z, l(0.000000)
					mul r2.z, r2.z, cb0[15].z
					mul r2.w, r0.z, cb0[14].y
					lt r4.x, |r2.w|, l(0.000010)
					movc r2.w, r4.x, l(0.000010), r2.w
					mul r4.x, r2.w, l(-1.442695)
					exp r4.x, r4.x
					add r4.x, -r4.x, l(1.000000)
					div r2.w, r4.x, r2.w
					mul r2.w, r2.w, r2.z
					movc r2.z, r2.x, r2.w, r2.z
					mul r2.z, r2.z, -cb0[12].w
					mul r2.z, r2.z, l(1.442695)
					exp r2.z, r2.z
					min r2.z, r2.z, l(1.000000)
					add r2.z, -r2.z, l(1.000000)
					mul r2.z, r2.z, cb0[14].z
					mul r0.y, r0.y, cb0[12].z
					mul r0.y, r0.y, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mul r0.x, r2.y, cb0[15].x
					  mul r0.z, r0.z, cb0[13].x
					  lt r2.y, |r0.z|, l(0.000010)
					  movc r0.z, r2.y, l(0.000010), r0.z
					  mul r2.y, r0.z, l(-1.442695)
					  exp r2.y, r2.y
					  add r2.y, -r2.y, l(1.000000)
					  div r0.z, r2.y, r0.z
					  mul r0.z, r0.z, r0.x
					  movc r0.x, r2.x, r0.z, r0.x
					  mul r2.xyw, cb0[11].xyxz, cb0[17].xyxz
					  mul r2.xyw, r0.xxxx, r2.xyxw
					  mad r2.xyw, r2.xyxw, l(0.079577, 0.079577, 0.000000, 0.079577), r3.xyxz
					  mad r2.xyw, cb0[17].xyxz, r0.wwww, r2.xyxw
					  mad r4.xyz, cb0[19].xyzx, r0.yyyy, cb0[18].xyzx
					  add r4.xyz, -r2.xywx, r4.xyzx
					  mad r2.xyw, r2.zzzz, r4.xyxz, r2.xyxw
					else 
					  mad r0.xzw, cb0[17].xxyz, r0.wwww, r3.xxyz
					  mad r3.xyz, cb0[19].xyzx, r0.yyyy, cb0[18].xyzx
					  add r3.xyz, -r0.xzwx, r3.xyzx
					  mad r2.xyw, r2.zzzz, r3.xyxz, r0.xzxw
					endif 
					add o0.xyz, r1.xyzx, r2.xywx
					mov o0.w, r3.w
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 5
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r0.y, r1.xyzx, r1.xyzx
					sqrt r0.w, r0.y
					sample r2.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.w, r0.w, cb0[15].x
					lt r3.x, l(0.001000), |r1.y|
					mul r3.y, r1.y, cb0[13].x
					lt r3.z, |r3.y|, l(0.000010)
					movc r3.y, r3.z, l(0.000010), r3.y
					mul r3.z, r3.y, l(-1.442695)
					exp r3.z, r3.z
					add r3.z, -r3.z, l(1.000000)
					div r3.y, r3.z, r3.y
					mul r3.y, r1.w, r3.y
					movc r1.w, r3.x, r3.y, r1.w
					mul r3.yzw, cb0[11].xxyz, cb0[17].xxyz
					mul r3.yzw, r1.wwww, r3.yyzw
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mov r4.xyz, x0[r0.z + 0].xyzx
					  rsq r0.x, r0.y
					  mul r0.xyz, r0.xxxx, r1.xyzx
					  dp3 r0.x, cb0[16].xyzx, r0.xyzx
					  mul r0.y, r0.w, cb0[15].y
					  mul r0.z, r1.y, cb0[13].y
					  lt r1.x, |r0.z|, l(0.000010)
					  movc r0.z, r1.x, l(0.000010), r0.z
					  mul r1.x, r0.z, l(-1.442695)
					  exp r1.x, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  div r0.z, r1.x, r0.z
					  mul r0.z, r0.z, r0.y
					  movc r0.y, r3.x, r0.z, r0.y
					  mad r0.z, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r1.x, -cb0[13].w, r0.x, l(1.000000)
					  mul r1.x, r1.x, r1.x
					  div r0.z, r0.z, r1.x
					  mul r0.z, r0.z, l(0.079577)
					  mul r0.z, r0.z, cb0[12].x
					  mul r0.y, r0.y, r0.z
					  add r0.z, -cb0[12].y, l(1.000000)
					  mul r0.y, r0.z, r0.y
					  mad r0.z, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.x, -cb0[14].w, r0.x, l(1.000000)
					  mul r0.x, r0.x, r0.x
					  div r0.x, r0.z, r0.x
					  mad r0.z, -cb0[14].x, cb1[5].z, r0.w
					  max r0.z, r0.z, l(0.000000)
					  mul r0.z, r0.z, cb0[15].z
					  mul r0.w, r1.y, cb0[14].y
					  lt r1.x, |r0.w|, l(0.000010)
					  movc r0.w, r1.x, l(0.000010), r0.w
					  mul r1.x, r0.w, l(-1.442695)
					  exp r1.x, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  div r0.w, r1.x, r0.w
					  mul r0.w, r0.w, r0.z
					  movc r0.z, r3.x, r0.w, r0.z
					  mul r0.z, r0.z, -cb0[12].w
					  mul r0.xz, r0.xxzx, l(0.079577, 0.000000, 1.442695, 0.000000)
					  exp r0.z, r0.z
					  min r0.z, r0.z, l(1.000000)
					  add r0.z, -r0.z, l(1.000000)
					  mul r0.z, r0.z, cb0[14].z
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mad r1.xyz, r3.yzwy, l(0.079577, 0.079577, 0.079577, 0.000000), r2.xyzx
					  mad r1.xyz, cb0[17].xyzx, r0.yyyy, r1.xyzx
					  mad r0.xyw, cb0[19].xyxz, r0.xxxx, cb0[18].xyxz
					  add r0.xyw, -r1.xyxz, r0.xyxw
					  mad r0.xyz, r0.zzzz, r0.xywx, r1.xyzx
					  add r2.xyz, r4.xyzx, r0.xyzx
					else 
					  mad r2.xyz, r3.yzwy, l(0.079577, 0.079577, 0.079577, 0.000000), r2.xyzx
					endif 
					mov o0.xyzw, r2.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					mad r3.xyz, v3.xyzx, r0.xxxx, cb1[4].xyzx
					mul r4.xyz, r3.yyyy, cb0[29].xywx
					mad r4.xyz, cb0[28].xywx, r3.xxxx, r4.xyzx
					mad r4.xyz, cb0[30].xywx, r3.zzzz, r4.xyzx
					add r4.xyz, r4.xyzx, cb0[31].xywx
					div r2.zw, r4.xxxy, r4.zzzz
					add r4.xy, r2.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
					mul r5.x, r4.x, l(0.500000)
					mad r3.w, -r4.y, l(0.500000), l(1.000000)
					lt r4.z, r4.x, l(0.000000)
					lt r4.x, l(2.000000), r4.x
					or r4.x, r4.x, r4.z
					lt r4.z, r3.w, l(0.000000)
					or r4.x, r4.z, r4.x
					lt r3.w, l(1.000000), r3.w
					or r3.w, r3.w, r4.x
					if_z r3.w
					  mad r5.z, -r4.y, l(0.500000), l(1.000000)
					  sample r4.xyzw, r5.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r2.wwww, cb0[33].xyzw
					  mad r6.xyzw, cb0[32].xyzw, r2.zzzz, r6.xyzw
					  mad r4.xyzw, cb0[34].xyzw, r4.xxxx, r6.xyzw
					  add r4.xyzw, r4.xyzw, cb0[35].xyzw
					  div r4.xyz, r4.xyzx, r4.wwww
					  add r3.xyz, r3.xyzx, -r4.xyzx
					  dp3 r2.z, r3.xyzx, r3.xyzx
					  sqrt r2.z, r2.z
					  mul r2.z, -r2.z, cb0[22].z
					  mul r2.z, r2.z, l(1.442695)
					  exp r2.z, r2.z
					  sample r3.xyzw, r5.xzxx, t4.xyzw, s3
					  mul r2.z, r2.z, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r2.zzzz, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r2.z, r2.y, cb0[15].x
					lt r2.w, l(0.001000), |r0.z|
					mul r4.x, r0.z, cb0[13].x
					lt r4.y, |r4.x|, l(0.000010)
					movc r4.x, r4.y, l(0.000010), r4.x
					mul r4.y, r4.x, l(-1.442695)
					exp r4.y, r4.y
					add r4.y, -r4.y, l(1.000000)
					div r4.x, r4.y, r4.x
					mul r4.x, r2.z, r4.x
					movc r2.z, r2.w, r4.x, r2.z
					mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r4.xyz, r2.zzzz, r4.xyzx
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  rsq r0.x, r2.x
					  mul r0.xyw, r0.xxxx, r0.yzyw
					  dp3 r0.x, cb0[16].xyzx, r0.xywx
					  mul r0.y, r2.y, cb0[15].y
					  mul r0.w, r0.z, cb0[13].y
					  lt r2.x, |r0.w|, l(0.000010)
					  movc r0.w, r2.x, l(0.000010), r0.w
					  mul r2.x, r0.w, l(-1.442695)
					  exp r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  div r0.w, r2.x, r0.w
					  mul r0.w, r0.w, r0.y
					  movc r0.y, r2.w, r0.w, r0.y
					  mad r0.w, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r2.x, -cb0[13].w, r0.x, l(1.000000)
					  mul r2.x, r2.x, r2.x
					  div r0.w, r0.w, r2.x
					  mul r0.w, r0.w, l(0.079577)
					  mul r0.w, r0.w, cb0[12].x
					  mul r0.y, r0.y, r0.w
					  add r0.w, -cb0[12].y, l(1.000000)
					  mul r0.y, r0.w, r0.y
					  mad r0.w, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.x, -cb0[14].w, r0.x, l(1.000000)
					  mul r0.x, r0.x, r0.x
					  div r0.x, r0.w, r0.x
					  mad r0.w, -cb0[14].x, cb1[5].z, r2.y
					  max r0.w, r0.w, l(0.000000)
					  mul r0.w, r0.w, cb0[15].z
					  mul r0.z, r0.z, cb0[14].y
					  lt r2.x, |r0.z|, l(0.000010)
					  movc r0.z, r2.x, l(0.000010), r0.z
					  mul r2.x, r0.z, l(-1.442695)
					  exp r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  div r0.z, r2.x, r0.z
					  mul r0.z, r0.z, r0.w
					  movc r0.z, r2.w, r0.z, r0.w
					  mul r0.z, r0.z, -cb0[12].w
					  mul r0.xz, r0.xxzx, l(0.079577, 0.000000, 1.442695, 0.000000)
					  exp r0.z, r0.z
					  min r0.z, r0.z, l(1.000000)
					  add r0.z, -r0.z, l(1.000000)
					  mul r0.z, r0.z, cb0[14].z
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mad r2.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  mad r2.xyz, cb0[17].xyzx, r0.yyyy, r2.xyzx
					  mad r0.xyw, cb0[19].xyxz, r0.xxxx, cb0[18].xyxz
					  add r0.xyw, -r2.xyxz, r0.xyxw
					  mad r0.xyz, r0.zzzz, r0.xywx, r2.xyzx
					  add r3.xyz, r1.xyzx, r0.xyzx
					else 
					  mad r3.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					endif 
					mov o0.xyzw, r3.xyzw
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 6
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r0.y, r1.xyzx, r1.xyzx
					sqrt r0.w, r0.y
					rsq r0.y, r0.y
					mul r1.xzw, r0.yyyy, r1.xxyz
					dp3 r0.y, cb0[16].xyzx, r1.xzwx
					sample r2.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.x, r0.w, cb0[15].x
					lt r1.z, l(0.001000), |r1.y|
					mul r1.w, r1.y, cb0[13].x
					lt r3.x, |r1.w|, l(0.000010)
					movc r1.w, r3.x, l(0.000010), r1.w
					mul r3.x, r1.w, l(-1.442695)
					exp r3.x, r3.x
					add r3.x, -r3.x, l(1.000000)
					div r1.w, r3.x, r1.w
					mul r1.w, r1.w, r1.x
					movc r1.x, r1.z, r1.w, r1.x
					mul r3.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r3.xyz, r1.xxxx, r3.xyzx
					mul r4.xyz, r3.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000)
					mad r1.x, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r1.w, -cb0[14].w, r0.y, l(1.000000)
					mul r1.w, r1.w, r1.w
					div r1.x, r1.x, r1.w
					mul r1.x, r1.x, l(0.079577)
					mul r1.x, r1.x, cb0[12].z
					mul r1.x, r1.x, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mov r5.xyz, x0[r0.z + 0].xyzx
					  mad r0.x, -cb0[14].x, cb1[5].z, r0.w
					  max r0.x, r0.x, l(0.000000)
					  mul r0.x, r0.x, cb0[15].z
					  mul r0.z, r1.y, cb0[14].y
					  lt r1.w, |r0.z|, l(0.000010)
					  movc r0.z, r1.w, l(0.000010), r0.z
					  mul r1.w, r0.z, l(-1.442695)
					  exp r1.w, r1.w
					  add r1.w, -r1.w, l(1.000000)
					  div r0.z, r1.w, r0.z
					  mul r0.z, r0.z, r0.x
					  movc r0.x, r1.z, r0.z, r0.x
					  mul r0.x, r0.x, -cb0[12].w
					  mul r0.x, r0.x, l(1.442695)
					  exp r0.x, r0.x
					  min r0.x, r0.x, l(1.000000)
					  add r0.x, -r0.x, l(1.000000)
					  mul r0.x, r0.x, cb0[14].z
					  mul r0.z, r0.w, cb0[15].y
					  mul r0.w, r1.y, cb0[13].y
					  lt r1.y, |r0.w|, l(0.000010)
					  movc r0.w, r1.y, l(0.000010), r0.w
					  mul r1.y, r0.w, l(-1.442695)
					  exp r1.y, r1.y
					  add r1.y, -r1.y, l(1.000000)
					  div r0.w, r1.y, r0.w
					  mul r0.w, r0.w, r0.z
					  movc r0.z, r1.z, r0.w, r0.z
					  mad r0.w, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.y, -cb0[13].w, r0.y, l(1.000000)
					  mul r0.y, r0.y, r0.y
					  div r0.y, r0.w, r0.y
					  mul r0.y, r0.y, l(0.079577)
					  mul r0.y, r0.y, cb0[12].x
					  mul r0.y, r0.z, r0.y
					  add r0.z, -cb0[12].y, l(1.000000)
					  mul r0.y, r0.z, r0.y
					  mad r1.yzw, r3.xxyz, l(0.000000, 0.079577, 0.079577, 0.079577), r2.xxyz
					  mad r0.yzw, cb0[17].xxyz, r0.yyyy, r1.yyzw
					  mad r1.yzw, cb0[19].xxyz, r1.xxxx, cb0[18].xxyz
					  add r1.yzw, -r0.yyzw, r1.yyzw
					  mad r0.xyz, r0.xxxx, r1.yzwy, r0.yzwy
					  add r2.xyz, r5.xyzx, r0.xyzx
					else 
					  mad r0.xyz, cb0[19].xyzx, r1.xxxx, r4.xyzx
					  add r2.xyz, r0.xyzx, r2.xyzx
					endif 
					mov o0.xyzw, r2.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					rsq r2.x, r2.x
					mul r2.xzw, r0.yyzw, r2.xxxx
					dp3 r0.y, cb0[16].xyzx, r2.xzwx
					mad r2.xzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r0.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r0.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r0.w, l(1.000000), r0.w
					or r0.w, r0.w, r3.z
					if_z r0.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xzw, r2.xxzw, -r3.xxyz
					  dp3 r0.w, r2.xzwx, r2.xzwx
					  sqrt r0.w, r0.w
					  mul r0.w, -r0.w, cb0[22].z
					  mul r0.w, r0.w, l(1.442695)
					  exp r0.w, r0.w
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.w, r0.w, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.wwww, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r0.w, r2.y, cb0[15].x
					lt r2.x, l(0.001000), |r0.z|
					mul r2.z, r0.z, cb0[13].x
					lt r2.w, |r2.z|, l(0.000010)
					movc r2.z, r2.w, l(0.000010), r2.z
					mul r2.w, r2.z, l(-1.442695)
					exp r2.w, r2.w
					add r2.w, -r2.w, l(1.000000)
					div r2.z, r2.w, r2.z
					mul r2.z, r0.w, r2.z
					movc r0.w, r2.x, r2.z, r0.w
					mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r4.xyz, r0.wwww, r4.xyzx
					mul r5.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000)
					mad r0.w, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r2.z, -cb0[14].w, r0.y, l(1.000000)
					mul r2.z, r2.z, r2.z
					div r0.w, r0.w, r2.z
					mul r0.w, r0.w, l(0.079577)
					mul r0.w, r0.w, cb0[12].z
					mul r0.w, r0.w, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mad r0.x, -cb0[14].x, cb1[5].z, r2.y
					  max r0.x, r0.x, l(0.000000)
					  mul r0.x, r0.x, cb0[15].z
					  mul r2.z, r0.z, cb0[14].y
					  lt r2.w, |r2.z|, l(0.000010)
					  movc r2.z, r2.w, l(0.000010), r2.z
					  mul r2.w, r2.z, l(-1.442695)
					  exp r2.w, r2.w
					  add r2.w, -r2.w, l(1.000000)
					  div r2.z, r2.w, r2.z
					  mul r2.z, r0.x, r2.z
					  movc r0.x, r2.x, r2.z, r0.x
					  mul r0.x, r0.x, -cb0[12].w
					  mul r0.x, r0.x, l(1.442695)
					  exp r0.x, r0.x
					  min r0.x, r0.x, l(1.000000)
					  add r0.x, -r0.x, l(1.000000)
					  mul r0.x, r0.x, cb0[14].z
					  mul r2.y, r2.y, cb0[15].y
					  mul r0.z, r0.z, cb0[13].y
					  lt r2.z, |r0.z|, l(0.000010)
					  movc r0.z, r2.z, l(0.000010), r0.z
					  mul r2.z, r0.z, l(-1.442695)
					  exp r2.z, r2.z
					  add r2.z, -r2.z, l(1.000000)
					  div r0.z, r2.z, r0.z
					  mul r0.z, r0.z, r2.y
					  movc r0.z, r2.x, r0.z, r2.y
					  mad r2.x, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.y, -cb0[13].w, r0.y, l(1.000000)
					  mul r0.y, r0.y, r0.y
					  div r0.y, r2.x, r0.y
					  mul r0.y, r0.y, l(0.079577)
					  mul r0.y, r0.y, cb0[12].x
					  mul r0.y, r0.z, r0.y
					  add r0.z, -cb0[12].y, l(1.000000)
					  mul r0.y, r0.z, r0.y
					  mad r2.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  mad r2.xyz, cb0[17].xyzx, r0.yyyy, r2.xyzx
					  mad r4.xyz, cb0[19].xyzx, r0.wwww, cb0[18].xyzx
					  add r4.xyz, -r2.xyzx, r4.xyzx
					  mad r0.xyz, r0.xxxx, r4.xyzx, r2.xyzx
					  add r3.xyz, r1.xyzx, r0.xyzx
					else 
					  mad r0.xyz, cb0[19].xyzx, r0.wwww, r5.xyzx
					  add r3.xyz, r0.xyzx, r3.xyzx
					endif 
					mov o0.xyzw, r3.xyzw
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_EXTINCTION" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 5
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r0.y, r1.xyzx, r1.xyzx
					sqrt r0.w, r0.y
					sample r2.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.w, r0.w, cb0[15].x
					lt r3.x, l(0.001000), |r1.y|
					mul r3.y, r1.y, cb0[13].x
					lt r3.z, |r3.y|, l(0.000010)
					movc r3.y, r3.z, l(0.000010), r3.y
					mul r3.z, r3.y, l(-1.442695)
					exp r3.z, r3.z
					add r3.z, -r3.z, l(1.000000)
					div r3.y, r3.z, r3.y
					mul r3.y, r1.w, r3.y
					movc r1.w, r3.x, r3.y, r1.w
					mul r3.yzw, cb0[11].xxyz, cb0[17].xxyz
					mul r3.yzw, r1.wwww, r3.yyzw
					mad r1.w, -cb0[14].x, cb1[5].z, r0.w
					max r1.w, r1.w, l(0.000000)
					mul r1.w, r1.w, cb0[15].z
					mul r4.x, r1.y, cb0[14].y
					lt r4.y, |r4.x|, l(0.000010)
					movc r4.x, r4.y, l(0.000010), r4.x
					mul r4.y, r4.x, l(-1.442695)
					exp r4.y, r4.y
					add r4.y, -r4.y, l(1.000000)
					div r4.x, r4.y, r4.x
					mul r4.x, r1.w, r4.x
					movc r1.w, r3.x, r4.x, r1.w
					mul r1.w, r1.w, -cb0[12].w
					mul r1.w, r1.w, l(1.442695)
					exp r1.w, r1.w
					min r1.w, r1.w, l(1.000000)
					add r1.w, -r1.w, l(1.000000)
					mul r1.w, r1.w, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mov r4.xyz, x0[r0.z + 0].xyzx
					  rsq r0.x, r0.y
					  mul r0.xyz, r0.xxxx, r1.xyzx
					  dp3 r0.x, cb0[16].xyzx, r0.xyzx
					  mad r0.y, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.z, -cb0[14].w, r0.x, l(1.000000)
					  mul r0.z, r0.z, r0.z
					  div r0.y, r0.y, r0.z
					  mul r0.y, r0.y, l(0.079577)
					  mul r0.y, r0.y, cb0[12].z
					  mul r0.y, r0.y, cb0[14].z
					  mul r0.z, r0.w, cb0[15].y
					  mul r0.w, r1.y, cb0[13].y
					  lt r1.x, |r0.w|, l(0.000010)
					  movc r0.w, r1.x, l(0.000010), r0.w
					  mul r1.x, r0.w, l(-1.442695)
					  exp r1.x, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  div r0.w, r1.x, r0.w
					  mul r0.w, r0.w, r0.z
					  movc r0.z, r3.x, r0.w, r0.z
					  mad r0.w, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.x, -cb0[13].w, r0.x, l(1.000000)
					  mul r0.x, r0.x, r0.x
					  div r0.x, r0.w, r0.x
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].x
					  mul r0.x, r0.z, r0.x
					  add r0.z, -cb0[12].y, l(1.000000)
					  mul r0.x, r0.z, r0.x
					  mad r1.xyz, r3.yzwy, l(0.079577, 0.079577, 0.079577, 0.000000), r2.xyzx
					  mad r0.xzw, cb0[17].xxyz, r0.xxxx, r1.xxyz
					  mad r1.xyz, cb0[19].xyzx, r0.yyyy, cb0[18].xyzx
					  add r1.xyz, -r0.xzwx, r1.xyzx
					  mad r0.xyz, r1.wwww, r1.xyzx, r0.xzwx
					  add r2.xyz, r4.xyzx, r0.xyzx
					else 
					  mad r0.xyz, r3.yzwy, l(0.079577, 0.079577, 0.079577, 0.000000), r2.xyzx
					  add r1.xyz, -r0.xyzx, cb0[18].xyzx
					  mad r2.xyz, r1.wwww, r1.xyzx, r0.xyzx
					endif 
					mov o0.xyzw, r2.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					mad r3.xyz, v3.xyzx, r0.xxxx, cb1[4].xyzx
					mul r4.xyz, r3.yyyy, cb0[29].xywx
					mad r4.xyz, cb0[28].xywx, r3.xxxx, r4.xyzx
					mad r4.xyz, cb0[30].xywx, r3.zzzz, r4.xyzx
					add r4.xyz, r4.xyzx, cb0[31].xywx
					div r2.zw, r4.xxxy, r4.zzzz
					add r4.xy, r2.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
					mul r5.x, r4.x, l(0.500000)
					mad r3.w, -r4.y, l(0.500000), l(1.000000)
					lt r4.z, r4.x, l(0.000000)
					lt r4.x, l(2.000000), r4.x
					or r4.x, r4.x, r4.z
					lt r4.z, r3.w, l(0.000000)
					or r4.x, r4.z, r4.x
					lt r3.w, l(1.000000), r3.w
					or r3.w, r3.w, r4.x
					if_z r3.w
					  mad r5.z, -r4.y, l(0.500000), l(1.000000)
					  sample r4.xyzw, r5.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r2.wwww, cb0[33].xyzw
					  mad r6.xyzw, cb0[32].xyzw, r2.zzzz, r6.xyzw
					  mad r4.xyzw, cb0[34].xyzw, r4.xxxx, r6.xyzw
					  add r4.xyzw, r4.xyzw, cb0[35].xyzw
					  div r4.xyz, r4.xyzx, r4.wwww
					  add r3.xyz, r3.xyzx, -r4.xyzx
					  dp3 r2.z, r3.xyzx, r3.xyzx
					  sqrt r2.z, r2.z
					  mul r2.z, -r2.z, cb0[22].z
					  mul r2.z, r2.z, l(1.442695)
					  exp r2.z, r2.z
					  sample r3.xyzw, r5.xzxx, t4.xyzw, s3
					  mul r2.z, r2.z, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r2.zzzz, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r2.z, r2.y, cb0[15].x
					lt r2.w, l(0.001000), |r0.z|
					mul r4.x, r0.z, cb0[13].x
					lt r4.y, |r4.x|, l(0.000010)
					movc r4.x, r4.y, l(0.000010), r4.x
					mul r4.y, r4.x, l(-1.442695)
					exp r4.y, r4.y
					add r4.y, -r4.y, l(1.000000)
					div r4.x, r4.y, r4.x
					mul r4.x, r2.z, r4.x
					movc r2.z, r2.w, r4.x, r2.z
					mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r4.xyz, r2.zzzz, r4.xyzx
					mad r2.z, -cb0[14].x, cb1[5].z, r2.y
					max r2.z, r2.z, l(0.000000)
					mul r2.z, r2.z, cb0[15].z
					mul r4.w, r0.z, cb0[14].y
					lt r5.x, |r4.w|, l(0.000010)
					movc r4.w, r5.x, l(0.000010), r4.w
					mul r5.x, r4.w, l(-1.442695)
					exp r5.x, r5.x
					add r5.x, -r5.x, l(1.000000)
					div r4.w, r5.x, r4.w
					mul r4.w, r2.z, r4.w
					movc r2.z, r2.w, r4.w, r2.z
					mul r2.z, r2.z, -cb0[12].w
					mul r2.z, r2.z, l(1.442695)
					exp r2.z, r2.z
					min r2.z, r2.z, l(1.000000)
					add r2.z, -r2.z, l(1.000000)
					mul r2.z, r2.z, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  rsq r0.x, r2.x
					  mul r0.xyw, r0.xxxx, r0.yzyw
					  dp3 r0.x, cb0[16].xyzx, r0.xywx
					  mad r0.y, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.w, -cb0[14].w, r0.x, l(1.000000)
					  mul r0.w, r0.w, r0.w
					  div r0.y, r0.y, r0.w
					  mul r0.y, r0.y, l(0.079577)
					  mul r0.y, r0.y, cb0[12].z
					  mul r0.y, r0.y, cb0[14].z
					  mul r0.w, r2.y, cb0[15].y
					  mul r0.z, r0.z, cb0[13].y
					  lt r2.x, |r0.z|, l(0.000010)
					  movc r0.z, r2.x, l(0.000010), r0.z
					  mul r2.x, r0.z, l(-1.442695)
					  exp r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  div r0.z, r2.x, r0.z
					  mul r0.z, r0.z, r0.w
					  movc r0.z, r2.w, r0.z, r0.w
					  mad r0.w, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.x, -cb0[13].w, r0.x, l(1.000000)
					  mul r0.x, r0.x, r0.x
					  div r0.x, r0.w, r0.x
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].x
					  mul r0.x, r0.z, r0.x
					  add r0.z, -cb0[12].y, l(1.000000)
					  mul r0.x, r0.z, r0.x
					  mad r2.xyw, r4.xyxz, l(0.079577, 0.079577, 0.000000, 0.079577), r3.xyxz
					  mad r0.xzw, cb0[17].xxyz, r0.xxxx, r2.xxyw
					  mad r2.xyw, cb0[19].xyxz, r0.yyyy, cb0[18].xyxz
					  add r2.xyw, -r0.xzxw, r2.xyxw
					  mad r0.xyz, r2.zzzz, r2.xywx, r0.xzwx
					  add r3.xyz, r1.xyzx, r0.xyzx
					else 
					  mad r0.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  add r2.xyw, -r0.xyxz, cb0[18].xyxz
					  mad r3.xyz, r2.zzzz, r2.xywx, r0.xyzx
					endif 
					mov o0.xyzw, r3.xyzw
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 6
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r0.y, r1.xyzx, r1.xyzx
					sqrt r0.w, r0.y
					rsq r0.y, r0.y
					mul r1.xzw, r0.yyyy, r1.xxyz
					dp3 r0.y, cb0[16].xyzx, r1.xzwx
					sample r2.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.x, r0.w, cb0[15].x
					lt r1.z, l(0.001000), |r1.y|
					mul r1.w, r1.y, cb0[13].x
					lt r3.x, |r1.w|, l(0.000010)
					movc r1.w, r3.x, l(0.000010), r1.w
					mul r3.x, r1.w, l(-1.442695)
					exp r3.x, r3.x
					add r3.x, -r3.x, l(1.000000)
					div r1.w, r3.x, r1.w
					mul r1.w, r1.w, r1.x
					movc r1.x, r1.z, r1.w, r1.x
					mul r3.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r3.xyz, r1.xxxx, r3.xyzx
					mad r1.x, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r1.w, -cb0[14].w, r0.y, l(1.000000)
					mul r1.w, r1.w, r1.w
					div r1.x, r1.x, r1.w
					mad r1.w, -cb0[14].x, cb1[5].z, r0.w
					max r1.w, r1.w, l(0.000000)
					mul r1.w, r1.w, cb0[15].z
					mul r3.w, r1.y, cb0[14].y
					lt r4.x, |r3.w|, l(0.000010)
					movc r3.w, r4.x, l(0.000010), r3.w
					mul r4.x, r3.w, l(-1.442695)
					exp r4.x, r4.x
					add r4.x, -r4.x, l(1.000000)
					div r3.w, r4.x, r3.w
					mul r3.w, r1.w, r3.w
					movc r1.w, r1.z, r3.w, r1.w
					mul r1.w, r1.w, -cb0[12].w
					mul r1.xw, r1.xxxw, l(0.079577, 0.000000, 0.000000, 1.442695)
					exp r1.w, r1.w
					min r1.w, r1.w, l(1.000000)
					add r1.w, -r1.w, l(1.000000)
					mul r1.w, r1.w, cb0[14].z
					mul r1.x, r1.x, cb0[12].z
					mul r1.x, r1.x, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mov r4.xyz, x0[r0.z + 0].xyzx
					  mul r0.x, r0.w, cb0[15].y
					  mul r0.z, r1.y, cb0[13].y
					  lt r0.w, |r0.z|, l(0.000010)
					  movc r0.z, r0.w, l(0.000010), r0.z
					  mul r0.w, r0.z, l(-1.442695)
					  exp r0.w, r0.w
					  add r0.w, -r0.w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  mul r0.z, r0.z, r0.x
					  movc r0.x, r1.z, r0.z, r0.x
					  mad r0.z, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.y, -cb0[13].w, r0.y, l(1.000000)
					  mul r0.y, r0.y, r0.y
					  div r0.y, r0.z, r0.y
					  mul r0.y, r0.y, l(0.079577)
					  mul r0.y, r0.y, cb0[12].x
					  mul r0.x, r0.x, r0.y
					  add r0.y, -cb0[12].y, l(1.000000)
					  mul r0.x, r0.y, r0.x
					  mad r0.yzw, r3.xxyz, l(0.000000, 0.079577, 0.079577, 0.079577), r2.xxyz
					  mad r0.xyz, cb0[17].xyzx, r0.xxxx, r0.yzwy
					  mad r5.xyz, cb0[19].xyzx, r1.xxxx, cb0[18].xyzx
					  add r5.xyz, -r0.xyzx, r5.xyzx
					  mad r0.xyz, r1.wwww, r5.xyzx, r0.xyzx
					  add r2.xyz, r4.xyzx, r0.xyzx
					else 
					  mad r0.xyz, r3.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r2.xyzx
					  mad r1.xyz, cb0[19].xyzx, r1.xxxx, cb0[18].xyzx
					  add r1.xyz, -r0.xyzx, r1.xyzx
					  mad r2.xyz, r1.wwww, r1.xyzx, r0.xyzx
					endif 
					mov o0.xyzw, r2.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					rsq r2.x, r2.x
					mul r2.xzw, r0.yyzw, r2.xxxx
					dp3 r0.y, cb0[16].xyzx, r2.xzwx
					mad r2.xzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r0.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r0.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r0.w, l(1.000000), r0.w
					or r0.w, r0.w, r3.z
					if_z r0.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xzw, r2.xxzw, -r3.xxyz
					  dp3 r0.w, r2.xzwx, r2.xzwx
					  sqrt r0.w, r0.w
					  mul r0.w, -r0.w, cb0[22].z
					  mul r0.w, r0.w, l(1.442695)
					  exp r0.w, r0.w
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.w, r0.w, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.wwww, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r0.w, r2.y, cb0[15].x
					lt r2.x, l(0.001000), |r0.z|
					mul r2.z, r0.z, cb0[13].x
					lt r2.w, |r2.z|, l(0.000010)
					movc r2.z, r2.w, l(0.000010), r2.z
					mul r2.w, r2.z, l(-1.442695)
					exp r2.w, r2.w
					add r2.w, -r2.w, l(1.000000)
					div r2.z, r2.w, r2.z
					mul r2.z, r0.w, r2.z
					movc r0.w, r2.x, r2.z, r0.w
					mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r4.xyz, r0.wwww, r4.xyzx
					mad r0.w, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r2.z, -cb0[14].w, r0.y, l(1.000000)
					mul r2.z, r2.z, r2.z
					div r0.w, r0.w, r2.z
					mul r0.w, r0.w, l(0.079577)
					mad r2.z, -cb0[14].x, cb1[5].z, r2.y
					max r2.z, r2.z, l(0.000000)
					mul r2.z, r2.z, cb0[15].z
					mul r2.w, r0.z, cb0[14].y
					lt r4.w, |r2.w|, l(0.000010)
					movc r2.w, r4.w, l(0.000010), r2.w
					mul r4.w, r2.w, l(-1.442695)
					exp r4.w, r4.w
					add r4.w, -r4.w, l(1.000000)
					div r2.w, r4.w, r2.w
					mul r2.w, r2.w, r2.z
					movc r2.z, r2.x, r2.w, r2.z
					mul r2.z, r2.z, -cb0[12].w
					mul r2.z, r2.z, l(1.442695)
					exp r2.z, r2.z
					min r2.z, r2.z, l(1.000000)
					add r2.z, -r2.z, l(1.000000)
					mul r2.z, r2.z, cb0[14].z
					mul r0.w, r0.w, cb0[12].z
					mul r0.w, r0.w, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mul r0.x, r2.y, cb0[15].y
					  mul r0.z, r0.z, cb0[13].y
					  lt r2.y, |r0.z|, l(0.000010)
					  movc r0.z, r2.y, l(0.000010), r0.z
					  mul r2.y, r0.z, l(-1.442695)
					  exp r2.y, r2.y
					  add r2.y, -r2.y, l(1.000000)
					  div r0.z, r2.y, r0.z
					  mul r0.z, r0.z, r0.x
					  movc r0.x, r2.x, r0.z, r0.x
					  mad r0.z, -cb0[13].w, cb0[13].w, l(1.000000)
					  mad r0.y, -cb0[13].w, r0.y, l(1.000000)
					  mul r0.y, r0.y, r0.y
					  div r0.y, r0.z, r0.y
					  mul r0.y, r0.y, l(0.079577)
					  mul r0.y, r0.y, cb0[12].x
					  mul r0.x, r0.x, r0.y
					  add r0.y, -cb0[12].y, l(1.000000)
					  mul r0.x, r0.y, r0.x
					  mad r2.xyw, r4.xyxz, l(0.079577, 0.079577, 0.000000, 0.079577), r3.xyxz
					  mad r0.xyz, cb0[17].xyzx, r0.xxxx, r2.xywx
					  mad r2.xyw, cb0[19].xyxz, r0.wwww, cb0[18].xyxz
					  add r2.xyw, -r0.xyxz, r2.xyxw
					  mad r0.xyz, r2.zzzz, r2.xywx, r0.xyzx
					  add r3.xyz, r1.xyzx, r0.xyzx
					else 
					  mad r0.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  mad r2.xyw, cb0[19].xyxz, r0.wwww, cb0[18].xyxz
					  add r2.xyw, -r0.xyxz, r2.xyxw
					  mad r3.xyz, r2.zzzz, r2.xywx, r0.xyzx
					endif 
					mov o0.xyzw, r3.xyzw
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 6
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r0.yzw, x0[r0.z + 0].xxyz
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r1.w, r1.xyzx, r1.xyzx
					sqrt r2.x, r1.w
					rsq r1.w, r1.w
					mul r1.xzw, r1.wwww, r1.xxyz
					dp3 r1.x, cb0[16].xyzx, r1.xzwx
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.zw, r2.xxxx, cb0[15].xxxy
					lt r2.y, l(0.001000), |r1.y|
					mul r2.zw, r1.yyyy, cb0[13].xxxy
					lt r4.xy, |r2.zwzz|, l(0.000010, 0.000010, 0.000000, 0.000000)
					movc r2.zw, r4.xxxy, l(0,0,0.000010,0.000010), r2.zzzw
					mul r4.xy, r2.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
					exp r4.xy, r4.xyxx
					add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					div r2.zw, r4.xxxy, r2.zzzw
					mul r2.zw, r1.zzzw, r2.zzzw
					movc r1.zw, r2.yyyy, r2.zzzw, r1.zzzw
					mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r4.xyz, r1.zzzz, r4.xyzx
					mul r5.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000)
					mad r1.z, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.z, -cb0[13].w, r1.x, l(1.000000)
					mul r2.z, r2.z, r2.z
					div r1.z, r1.z, r2.z
					mul r1.z, r1.z, l(0.079577)
					mul r1.z, r1.z, cb0[12].x
					mul r1.z, r1.w, r1.z
					add r1.w, -cb0[12].y, l(1.000000)
					mul r1.z, r1.w, r1.z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mad r0.x, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r1.x, -cb0[14].w, r1.x, l(1.000000)
					  mul r1.x, r1.x, r1.x
					  div r0.x, r0.x, r1.x
					  mul r0.x, r0.x, l(0.079577)
					  mad r1.x, -cb0[14].x, cb1[5].z, r2.x
					  max r1.x, r1.x, l(0.000000)
					  mul r1.x, r1.x, cb0[15].z
					  mul r1.y, r1.y, cb0[14].y
					  lt r1.w, |r1.y|, l(0.000010)
					  movc r1.y, r1.w, l(0.000010), r1.y
					  mul r1.w, r1.y, l(-1.442695)
					  exp r1.w, r1.w
					  add r1.w, -r1.w, l(1.000000)
					  div r1.y, r1.w, r1.y
					  mul r1.y, r1.y, r1.x
					  movc r1.x, r2.y, r1.y, r1.x
					  mul r1.x, r1.x, -cb0[12].w
					  mul r1.x, r1.x, l(1.442695)
					  exp r1.x, r1.x
					  min r1.x, r1.x, l(1.000000)
					  add r1.x, -r1.x, l(1.000000)
					  mul r1.x, r1.x, cb0[14].z
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mad r2.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  mad r2.xyz, cb0[17].xyzx, r1.zzzz, r2.xyzx
					  mad r4.xyz, cb0[19].xyzx, r0.xxxx, cb0[18].xyzx
					  add r4.xyz, -r2.xyzx, r4.xyzx
					  mad r1.xyw, r1.xxxx, r4.xyxz, r2.xyxz
					else 
					  mad r2.xyz, cb0[17].xyzx, r1.zzzz, r5.xyzx
					  add r1.xyw, r2.xyxz, r3.xyxz
					endif 
					add o0.xyz, r0.yzwy, r1.xywx
					mov o0.w, r3.w
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					rsq r2.x, r2.x
					mul r2.xzw, r0.yyzw, r2.xxxx
					dp3 r0.y, cb0[16].xyzx, r2.xzwx
					mad r2.xzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r0.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r0.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r0.w, l(1.000000), r0.w
					or r0.w, r0.w, r3.z
					if_z r0.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xzw, r2.xxzw, -r3.xxyz
					  dp3 r0.w, r2.xzwx, r2.xzwx
					  sqrt r0.w, r0.w
					  mul r0.w, -r0.w, cb0[22].z
					  mul r0.w, r0.w, l(1.442695)
					  exp r0.w, r0.w
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.w, r0.w, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.wwww, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r2.xz, r2.yyyy, cb0[15].xxyx
					lt r0.w, l(0.001000), |r0.z|
					mul r4.xy, r0.zzzz, cb0[13].xyxx
					lt r4.zw, |r4.xxxy|, l(0.000000, 0.000000, 0.000010, 0.000010)
					movc r4.xy, r4.zwzz, l(0.000010,0.000010,0,0), r4.xyxx
					mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
					exp r4.zw, r4.zzzw
					add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
					div r4.xy, r4.zwzz, r4.xyxx
					mul r4.xy, r2.xzxx, r4.xyxx
					movc r2.xz, r0.wwww, r4.xxyx, r2.xxzx
					mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r4.xyz, r2.xxxx, r4.xyzx
					mul r5.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000)
					mad r2.x, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.w, -cb0[13].w, r0.y, l(1.000000)
					mul r2.w, r2.w, r2.w
					div r2.x, r2.x, r2.w
					mul r2.x, r2.x, l(0.079577)
					mul r2.x, r2.x, cb0[12].x
					mul r2.x, r2.z, r2.x
					add r2.z, -cb0[12].y, l(1.000000)
					mul r2.x, r2.z, r2.x
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mad r0.x, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.y, -cb0[14].w, r0.y, l(1.000000)
					  mul r0.y, r0.y, r0.y
					  div r0.x, r0.x, r0.y
					  mad r0.y, -cb0[14].x, cb1[5].z, r2.y
					  max r0.y, r0.y, l(0.000000)
					  mul r0.y, r0.y, cb0[15].z
					  mul r0.z, r0.z, cb0[14].y
					  lt r2.y, |r0.z|, l(0.000010)
					  movc r0.z, r2.y, l(0.000010), r0.z
					  mul r2.y, r0.z, l(-1.442695)
					  exp r2.y, r2.y
					  add r2.y, -r2.y, l(1.000000)
					  div r0.z, r2.y, r0.z
					  mul r0.z, r0.z, r0.y
					  movc r0.y, r0.w, r0.z, r0.y
					  mul r0.y, r0.y, -cb0[12].w
					  mul r0.xy, r0.xyxx, l(0.079577, 1.442695, 0.000000, 0.000000)
					  exp r0.y, r0.y
					  min r0.y, r0.y, l(1.000000)
					  add r0.y, -r0.y, l(1.000000)
					  mul r0.y, r0.y, cb0[14].z
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mad r2.yzw, r4.xxyz, l(0.000000, 0.079577, 0.079577, 0.079577), r3.xxyz
					  mad r2.yzw, cb0[17].xxyz, r2.xxxx, r2.yyzw
					  mad r0.xzw, cb0[19].xxyz, r0.xxxx, cb0[18].xxyz
					  add r0.xzw, -r2.yyzw, r0.xxzw
					  mad r0.xyz, r0.yyyy, r0.xzwx, r2.yzwy
					else 
					  mad r2.xyz, cb0[17].xyzx, r2.xxxx, r5.xyzx
					  add r0.xyz, r2.xyzx, r3.xyzx
					endif 
					add o0.xyz, r1.xyzx, r0.xyzx
					mov o0.w, r3.w
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 6
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r0.yzw, x0[r0.z + 0].xxyz
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r1.w, r1.xyzx, r1.xyzx
					sqrt r2.x, r1.w
					rsq r1.w, r1.w
					mul r1.xzw, r1.wwww, r1.xxyz
					dp3 r1.x, cb0[16].xyzx, r1.xzwx
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.zw, r2.xxxx, cb0[15].xxxy
					lt r2.y, l(0.001000), |r1.y|
					mul r2.zw, r1.yyyy, cb0[13].xxxy
					lt r4.xy, |r2.zwzz|, l(0.000010, 0.000010, 0.000000, 0.000000)
					movc r2.zw, r4.xxxy, l(0,0,0.000010,0.000010), r2.zzzw
					mul r4.xy, r2.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
					exp r4.xy, r4.xyxx
					add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					div r2.zw, r4.xxxy, r2.zzzw
					mul r2.zw, r1.zzzw, r2.zzzw
					movc r1.zw, r2.yyyy, r2.zzzw, r1.zzzw
					mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r4.xyz, r1.zzzz, r4.xyzx
					mul r5.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000)
					mad r1.z, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.z, -cb0[13].w, r1.x, l(1.000000)
					mul r2.z, r2.z, r2.z
					div r1.z, r1.z, r2.z
					mul r1.z, r1.z, l(0.079577)
					mul r1.z, r1.z, cb0[12].x
					mul r1.z, r1.w, r1.z
					add r1.w, -cb0[12].y, l(1.000000)
					mul r1.z, r1.w, r1.z
					mad r1.w, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r1.x, -cb0[14].w, r1.x, l(1.000000)
					mul r1.x, r1.x, r1.x
					div r1.x, r1.w, r1.x
					mul r1.x, r1.x, l(0.079577)
					mul r1.x, r1.x, cb0[12].z
					mul r1.x, r1.x, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mad r0.x, -cb0[14].x, cb1[5].z, r2.x
					  max r0.x, r0.x, l(0.000000)
					  mul r0.x, r0.x, cb0[15].z
					  mul r1.y, r1.y, cb0[14].y
					  lt r1.w, |r1.y|, l(0.000010)
					  movc r1.y, r1.w, l(0.000010), r1.y
					  mul r1.w, r1.y, l(-1.442695)
					  exp r1.w, r1.w
					  add r1.w, -r1.w, l(1.000000)
					  div r1.y, r1.w, r1.y
					  mul r1.y, r0.x, r1.y
					  movc r0.x, r2.y, r1.y, r0.x
					  mul r0.x, r0.x, -cb0[12].w
					  mul r0.x, r0.x, l(1.442695)
					  exp r0.x, r0.x
					  min r0.x, r0.x, l(1.000000)
					  add r0.x, -r0.x, l(1.000000)
					  mul r0.x, r0.x, cb0[14].z
					  mad r2.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  mad r2.xyz, cb0[17].xyzx, r1.zzzz, r2.xyzx
					  mad r4.xyz, cb0[19].xyzx, r1.xxxx, cb0[18].xyzx
					  add r4.xyz, -r2.xyzx, r4.xyzx
					  mad r2.xyz, r0.xxxx, r4.xyzx, r2.xyzx
					else 
					  mad r1.yzw, cb0[17].xxyz, r1.zzzz, r5.xxyz
					  mad r1.xyz, cb0[19].xyzx, r1.xxxx, r1.yzwy
					  add r2.xyz, r1.xyzx, r3.xyzx
					endif 
					add o0.xyz, r0.yzwy, r2.xyzx
					mov o0.w, r3.w
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					rsq r2.x, r2.x
					mul r2.xzw, r0.yyzw, r2.xxxx
					dp3 r0.y, cb0[16].xyzx, r2.xzwx
					mad r2.xzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r0.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r0.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r0.w, l(1.000000), r0.w
					or r0.w, r0.w, r3.z
					if_z r0.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xzw, r2.xxzw, -r3.xxyz
					  dp3 r0.w, r2.xzwx, r2.xzwx
					  sqrt r0.w, r0.w
					  mul r0.w, -r0.w, cb0[22].z
					  mul r0.w, r0.w, l(1.442695)
					  exp r0.w, r0.w
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.w, r0.w, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.wwww, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r2.xz, r2.yyyy, cb0[15].xxyx
					lt r0.w, l(0.001000), |r0.z|
					mul r4.xy, r0.zzzz, cb0[13].xyxx
					lt r4.zw, |r4.xxxy|, l(0.000000, 0.000000, 0.000010, 0.000010)
					movc r4.xy, r4.zwzz, l(0.000010,0.000010,0,0), r4.xyxx
					mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
					exp r4.zw, r4.zzzw
					add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
					div r4.xy, r4.zwzz, r4.xyxx
					mul r4.xy, r2.xzxx, r4.xyxx
					movc r2.xz, r0.wwww, r4.xxyx, r2.xxzx
					mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r4.xyz, r2.xxxx, r4.xyzx
					mul r5.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000)
					mad r2.x, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.w, -cb0[13].w, r0.y, l(1.000000)
					mul r2.w, r2.w, r2.w
					div r2.x, r2.x, r2.w
					mul r2.x, r2.x, l(0.079577)
					mul r2.x, r2.x, cb0[12].x
					mul r2.x, r2.z, r2.x
					add r2.z, -cb0[12].y, l(1.000000)
					mul r2.x, r2.z, r2.x
					mad r2.z, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r0.y, -cb0[14].w, r0.y, l(1.000000)
					mul r0.y, r0.y, r0.y
					div r0.y, r2.z, r0.y
					mul r0.y, r0.y, l(0.079577)
					mul r0.y, r0.y, cb0[12].z
					mul r0.y, r0.y, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mad r0.x, -cb0[14].x, cb1[5].z, r2.y
					  max r0.x, r0.x, l(0.000000)
					  mul r0.x, r0.x, cb0[15].z
					  mul r0.z, r0.z, cb0[14].y
					  lt r2.y, |r0.z|, l(0.000010)
					  movc r0.z, r2.y, l(0.000010), r0.z
					  mul r2.y, r0.z, l(-1.442695)
					  exp r2.y, r2.y
					  add r2.y, -r2.y, l(1.000000)
					  div r0.z, r2.y, r0.z
					  mul r0.z, r0.z, r0.x
					  movc r0.x, r0.w, r0.z, r0.x
					  mul r0.x, r0.x, -cb0[12].w
					  mul r0.x, r0.x, l(1.442695)
					  exp r0.x, r0.x
					  min r0.x, r0.x, l(1.000000)
					  add r0.x, -r0.x, l(1.000000)
					  mul r0.x, r0.x, cb0[14].z
					  mad r2.yzw, r4.xxyz, l(0.000000, 0.079577, 0.079577, 0.079577), r3.xxyz
					  mad r2.yzw, cb0[17].xxyz, r2.xxxx, r2.yyzw
					  mad r4.xyz, cb0[19].xyzx, r0.yyyy, cb0[18].xyzx
					  add r4.xyz, -r2.yzwy, r4.xyzx
					  mad r0.xzw, r0.xxxx, r4.xxyz, r2.yyzw
					else 
					  mad r2.xyz, cb0[17].xyzx, r2.xxxx, r5.xyzx
					  mad r2.xyz, cb0[19].xyzx, r0.yyyy, r2.xyzx
					  add r0.xzw, r2.xxyz, r3.xxyz
					endif 
					add o0.xyz, r1.xyzx, r0.xzwx
					mov o0.w, r3.w
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 6
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r0.yzw, x0[r0.z + 0].xxyz
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r1.w, r1.xyzx, r1.xyzx
					sqrt r2.x, r1.w
					rsq r1.w, r1.w
					mul r1.xzw, r1.wwww, r1.xxyz
					dp3 r1.x, cb0[16].xyzx, r1.xzwx
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.zw, r2.xxxx, cb0[15].xxxy
					lt r2.y, l(0.001000), |r1.y|
					mul r2.zw, r1.yyyy, cb0[13].xxxy
					lt r4.xy, |r2.zwzz|, l(0.000010, 0.000010, 0.000000, 0.000000)
					movc r2.zw, r4.xxxy, l(0,0,0.000010,0.000010), r2.zzzw
					mul r4.xy, r2.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
					exp r4.xy, r4.xyxx
					add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					div r2.zw, r4.xxxy, r2.zzzw
					mul r2.zw, r1.zzzw, r2.zzzw
					movc r1.zw, r2.yyyy, r2.zzzw, r1.zzzw
					mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r4.xyz, r1.zzzz, r4.xyzx
					mad r1.z, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.z, -cb0[13].w, r1.x, l(1.000000)
					mul r2.z, r2.z, r2.z
					div r1.z, r1.z, r2.z
					mul r1.z, r1.z, l(0.079577)
					mul r1.z, r1.z, cb0[12].x
					mul r1.z, r1.w, r1.z
					add r1.w, -cb0[12].y, l(1.000000)
					mul r1.z, r1.w, r1.z
					mad r1.w, -cb0[14].x, cb1[5].z, r2.x
					max r1.w, r1.w, l(0.000000)
					mul r1.w, r1.w, cb0[15].z
					mul r1.y, r1.y, cb0[14].y
					lt r2.x, |r1.y|, l(0.000010)
					movc r1.y, r2.x, l(0.000010), r1.y
					mul r2.x, r1.y, l(-1.442695)
					exp r2.x, r2.x
					add r2.x, -r2.x, l(1.000000)
					div r1.y, r2.x, r1.y
					mul r1.y, r1.y, r1.w
					movc r1.y, r2.y, r1.y, r1.w
					mul r1.y, r1.y, -cb0[12].w
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					min r1.y, r1.y, l(1.000000)
					add r1.y, -r1.y, l(1.000000)
					mul r1.y, r1.y, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mad r0.x, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r1.x, -cb0[14].w, r1.x, l(1.000000)
					  mul r1.x, r1.x, r1.x
					  div r0.x, r0.x, r1.x
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mad r2.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  mad r2.xyz, cb0[17].xyzx, r1.zzzz, r2.xyzx
					  mad r5.xyz, cb0[19].xyzx, r0.xxxx, cb0[18].xyzx
					  add r5.xyz, -r2.xyzx, r5.xyzx
					  mad r2.xyz, r1.yyyy, r5.xyzx, r2.xyzx
					else 
					  mad r3.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					  mad r1.xzw, cb0[17].xxyz, r1.zzzz, r3.xxyz
					  add r3.xyz, -r1.xzwx, cb0[18].xyzx
					  mad r2.xyz, r1.yyyy, r3.xyzx, r1.xzwx
					endif 
					add o0.xyz, r0.yzwy, r2.xyzx
					mov o0.w, r3.w
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 7
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					rsq r2.x, r2.x
					mul r2.xzw, r0.yyzw, r2.xxxx
					dp3 r0.y, cb0[16].xyzx, r2.xzwx
					mad r2.xzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r3.xy, r3.xyxx, r3.zzzz
					add r3.zw, r3.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
					mul r4.x, r3.z, l(0.500000)
					mad r0.w, -r3.w, l(0.500000), l(1.000000)
					lt r4.y, r3.z, l(0.000000)
					lt r3.z, l(2.000000), r3.z
					or r3.z, r3.z, r4.y
					lt r4.y, r0.w, l(0.000000)
					or r3.z, r3.z, r4.y
					lt r0.w, l(1.000000), r0.w
					or r0.w, r0.w, r3.z
					if_z r0.w
					  mad r4.z, -r3.w, l(0.500000), l(1.000000)
					  sample r5.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r6.xyzw, r3.yyyy, cb0[33].xyzw
					  mad r3.xyzw, cb0[32].xyzw, r3.xxxx, r6.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r5.xxxx, r3.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xzw, r2.xxzw, -r3.xxyz
					  dp3 r0.w, r2.xzwx, r2.xzwx
					  sqrt r0.w, r0.w
					  mul r0.w, -r0.w, cb0[22].z
					  mul r0.w, r0.w, l(1.442695)
					  exp r0.w, r0.w
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.w, r0.w, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.wwww, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r2.xz, r2.yyyy, cb0[15].xxyx
					lt r0.w, l(0.001000), |r0.z|
					mul r4.xy, r0.zzzz, cb0[13].xyxx
					lt r4.zw, |r4.xxxy|, l(0.000000, 0.000000, 0.000010, 0.000010)
					movc r4.xy, r4.zwzz, l(0.000010,0.000010,0,0), r4.xyxx
					mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
					exp r4.zw, r4.zzzw
					add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
					div r4.xy, r4.zwzz, r4.xyxx
					mul r4.xy, r2.xzxx, r4.xyxx
					movc r2.xz, r0.wwww, r4.xxyx, r2.xxzx
					mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r4.xyz, r2.xxxx, r4.xyzx
					mad r2.x, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.w, -cb0[13].w, r0.y, l(1.000000)
					mul r2.w, r2.w, r2.w
					div r2.x, r2.x, r2.w
					mul r2.x, r2.x, l(0.079577)
					mul r2.x, r2.x, cb0[12].x
					mul r2.x, r2.z, r2.x
					add r2.z, -cb0[12].y, l(1.000000)
					mul r2.x, r2.z, r2.x
					mad r2.y, -cb0[14].x, cb1[5].z, r2.y
					max r2.y, r2.y, l(0.000000)
					mul r2.y, r2.y, cb0[15].z
					mul r0.z, r0.z, cb0[14].y
					lt r2.z, |r0.z|, l(0.000010)
					movc r0.z, r2.z, l(0.000010), r0.z
					mul r2.z, r0.z, l(-1.442695)
					exp r2.z, r2.z
					add r2.z, -r2.z, l(1.000000)
					div r0.z, r2.z, r0.z
					mul r0.z, r0.z, r2.y
					movc r0.z, r0.w, r0.z, r2.y
					mul r0.z, r0.z, -cb0[12].w
					mul r0.z, r0.z, l(1.442695)
					exp r0.z, r0.z
					min r0.z, r0.z, l(1.000000)
					add r0.z, -r0.z, l(1.000000)
					mul r0.z, r0.z, cb0[14].z
					lt r0.x, r0.x, l(0.999900)
					if_nz r0.x
					  mad r0.x, -cb0[14].w, cb0[14].w, l(1.000000)
					  mad r0.y, -cb0[14].w, r0.y, l(1.000000)
					  mul r0.y, r0.y, r0.y
					  div r0.x, r0.x, r0.y
					  mul r0.x, r0.x, l(0.079577)
					  mul r0.x, r0.x, cb0[12].z
					  mul r0.x, r0.x, cb0[14].z
					  mad r2.yzw, r4.xxyz, l(0.000000, 0.079577, 0.079577, 0.079577), r3.xxyz
					  mad r2.yzw, cb0[17].xxyz, r2.xxxx, r2.yyzw
					  mad r0.xyw, cb0[19].xyxz, r0.xxxx, cb0[18].xyxz
					  add r0.xyw, -r2.yzyw, r0.xyxw
					  mad r0.xyw, r0.zzzz, r0.xyxw, r2.yzyw
					else 
					  mad r2.yzw, r4.xxyz, l(0.000000, 0.079577, 0.079577, 0.079577), r3.xxyz
					  mad r2.xyz, cb0[17].xyzx, r2.xxxx, r2.yzwy
					  add r3.xyz, -r2.xyzx, cb0[18].xyzx
					  mad r0.xyw, r0.zzzz, r3.xyxz, r2.xyxz
					endif 
					add o0.xyz, r1.xyzx, r0.xywx
					mov o0.w, r3.w
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[22], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_temps 5
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyz, r4.xyzx
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyz, r4.xyzx
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyz, r1.xyzx
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyz, r1.xyzx
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r0.yzw, x0[r0.z + 0].xxyz
					mul r1.xyz, r0.xxxx, v3.xyzx
					dp3 r0.x, r1.xyzx, r1.xyzx
					sqrt r1.w, r0.x
					rsq r0.x, r0.x
					mul r2.xyz, r0.xxxx, r1.xyzx
					dp3 r0.x, cb0[16].xyzx, r2.xyzx
					sample r2.xyzw, v1.xyxx, t1.xyzw, s1
					mul r1.xz, r1.wwww, cb0[15].xxyx
					lt r3.x, l(0.001000), |r1.y|
					mul r3.yz, r1.yyyy, cb0[13].xxyx
					lt r4.xy, |r3.yzyy|, l(0.000010, 0.000010, 0.000000, 0.000000)
					movc r3.yz, r4.xxyx, l(0,0.000010,0.000010,0), r3.yyzy
					mul r4.xy, r3.yzyy, l(-1.442695, -1.442695, 0.000000, 0.000000)
					exp r4.xy, r4.xyxx
					add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					div r3.yz, r4.xxyx, r3.yyzy
					mul r3.yz, r1.xxzx, r3.yyzy
					movc r1.xz, r3.xxxx, r3.yyzy, r1.xxzx
					mul r3.yzw, cb0[11].xxyz, cb0[17].xxyz
					mul r3.yzw, r1.xxxx, r3.yyzw
					mad r1.x, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r4.x, -cb0[13].w, r0.x, l(1.000000)
					mul r4.x, r4.x, r4.x
					div r1.x, r1.x, r4.x
					mul r1.x, r1.x, l(0.079577)
					mul r1.x, r1.x, cb0[12].x
					mul r1.x, r1.z, r1.x
					add r1.z, -cb0[12].y, l(1.000000)
					mul r1.x, r1.z, r1.x
					mad r1.z, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r0.x, -cb0[14].w, r0.x, l(1.000000)
					mul r0.x, r0.x, r0.x
					div r0.x, r1.z, r0.x
					mul r0.x, r0.x, l(0.079577)
					mad r1.z, -cb0[14].x, cb1[5].z, r1.w
					max r1.z, r1.z, l(0.000000)
					mul r1.z, r1.z, cb0[15].z
					mul r1.y, r1.y, cb0[14].y
					lt r1.w, |r1.y|, l(0.000010)
					movc r1.y, r1.w, l(0.000010), r1.y
					mul r1.w, r1.y, l(-1.442695)
					exp r1.w, r1.w
					add r1.w, -r1.w, l(1.000000)
					div r1.y, r1.w, r1.y
					mul r1.y, r1.y, r1.z
					movc r1.y, r3.x, r1.y, r1.z
					mul r1.y, r1.y, -cb0[12].w
					mul r1.y, r1.y, l(1.442695)
					exp r1.y, r1.y
					min r1.y, r1.y, l(1.000000)
					add r1.y, -r1.y, l(1.000000)
					mul r1.y, r1.y, cb0[14].z
					mul r0.x, r0.x, cb0[12].z
					mul r0.x, r0.x, cb0[14].z
					mad r2.xyz, r3.yzwy, l(0.079577, 0.079577, 0.079577, 0.000000), r2.xyzx
					mad r1.xzw, cb0[17].xxyz, r1.xxxx, r2.xxyz
					mad r2.xyz, cb0[19].xyzx, r0.xxxx, cb0[18].xyzx
					add r2.xyz, -r1.xzwx, r2.xyzx
					mad r1.xyz, r1.yyyy, r2.xyzx, r1.xzwx
					add o0.xyz, r0.yzwy, r1.xyzx
					mov o0.w, r2.w
					ret 
					// Approximately 0 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DS_HAZE_APPLY_RAYLEIGH" "DS_HAZE_APPLY_MIE" "DS_HAZE_APPLY_FOG_EXTINCTION" "DS_HAZE_APPLY_FOG_RADIANCE" "DS_HAZE_TEMPORAL" }
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					// TEXCOORD                 1   xyz         2     NONE   float       
					// TEXCOORD                 2   xyz         3     NONE   float   xyz 
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[36], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v3.xyz
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 6
					dcl_indexableTemp x0[4], 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mad r0.x, cb1[7].x, r0.x, cb1[7].y
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mad r0.yz, -cb0[21].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.xxyx
					mad r1.xy, cb0[21].xyxx, l(1.000000, 0.000000, 0.000000, 0.000000), r0.yzyy
					mad r1.zw, cb0[21].xxxy, l(0.000000, 0.000000, 0.000000, 1.000000), r0.yyyz
					add r2.xy, r0.yzyy, cb0[21].xyxx
					sample r3.xyzw, r0.yzyy, t2.xyzw, s2
					mad r0.w, cb1[7].x, r3.x, cb1[7].y
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r3.xyzw, r1.xyxx, t2.xyzw, s2
					mad r2.z, cb1[7].x, r3.x, cb1[7].y
					div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
					sample r3.xyzw, r1.zwzz, t2.xyzw, s2
					mad r2.w, cb1[7].x, r3.x, cb1[7].y
					div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
					sample r3.xyzw, r2.xyxx, t2.xyzw, s2
					mad r3.x, cb1[7].x, r3.x, cb1[7].y
					div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					sample r4.xyzw, r0.yzyy, t3.xyzw, s2
					mov x0[0].xyzw, r4.xyzw
					sample r4.xyzw, r1.xyxx, t3.xyzw, s2
					mov x0[1].xyzw, r4.xyzw
					sample r1.xyzw, r1.zwzz, t3.xyzw, s2
					mov x0[2].xyzw, r1.xyzw
					sample r1.xyzw, r2.xyxx, t3.xyzw, s2
					mov x0[3].xyzw, r1.xyzw
					add r0.y, -r0.x, r0.w
					lt r0.z, |r0.y|, l(1.000000)
					if_nz r0.z
					  mov r0.y, |r0.y|
					else 
					  mov r0.y, l(1.000000)
					endif 
					add r0.z, -r0.x, r2.z
					lt r0.w, |r0.z|, r0.y
					if_nz r0.w
					  mov r0.y, |r0.z|
					  mov r0.z, l(1)
					else 
					  mov r0.z, l(0)
					endif 
					add r0.w, -r0.x, r2.w
					lt r1.x, |r0.w|, r0.y
					if_nz r1.x
					  mov r0.y, |r0.w|
					  mov r0.z, l(2)
					endif 
					add r0.w, -r0.x, r3.x
					lt r0.y, |r0.w|, r0.y
					if_nz r0.y
					  mov r0.z, l(3)
					endif 
					mov r1.xyzw, x0[r0.z + 0].xyzw
					mul r0.yzw, r0.xxxx, v3.xxyz
					dp3 r2.x, r0.yzwy, r0.yzwy
					sqrt r2.y, r2.x
					rsq r2.x, r2.x
					mul r2.xzw, r0.yyzw, r2.xxxx
					dp3 r0.y, cb0[16].xyzx, r2.xzwx
					mad r2.xzw, v3.xxyz, r0.xxxx, cb1[4].xxyz
					mul r3.xyz, r2.zzzz, cb0[29].xywx
					mad r3.xyz, cb0[28].xywx, r2.xxxx, r3.xyzx
					mad r3.xyz, cb0[30].xywx, r2.wwww, r3.xyzx
					add r3.xyz, r3.xyzx, cb0[31].xywx
					div r0.xw, r3.xxxy, r3.zzzz
					add r3.xy, r0.xwxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					mul r4.x, r3.x, l(0.500000)
					mad r3.z, -r3.y, l(0.500000), l(1.000000)
					lt r3.w, r3.x, l(0.000000)
					lt r3.x, l(2.000000), r3.x
					or r3.x, r3.x, r3.w
					lt r3.w, r3.z, l(0.000000)
					or r3.x, r3.w, r3.x
					lt r3.z, l(1.000000), r3.z
					or r3.x, r3.z, r3.x
					if_z r3.x
					  mad r4.z, -r3.y, l(0.500000), l(1.000000)
					  sample r3.xyzw, r4.xzxx, t5.xyzw, s4
					  mul r5.xyzw, r0.wwww, cb0[33].xyzw
					  mad r5.xyzw, cb0[32].xyzw, r0.xxxx, r5.xyzw
					  mad r3.xyzw, cb0[34].xyzw, r3.xxxx, r5.xyzw
					  add r3.xyzw, r3.xyzw, cb0[35].xyzw
					  div r3.xyz, r3.xyzx, r3.wwww
					  add r2.xzw, r2.xxzw, -r3.xxyz
					  dp3 r0.x, r2.xzwx, r2.xzwx
					  sqrt r0.x, r0.x
					  mul r0.x, -r0.x, cb0[22].z
					  mul r0.x, r0.x, l(1.442695)
					  exp r0.x, r0.x
					  sample r3.xyzw, r4.xzxx, t4.xyzw, s3
					  mul r0.x, r0.x, cb0[22].w
					  add r3.xyzw, -r1.xyzw, r3.xyzw
					  mad r1.xyzw, r0.xxxx, r3.xyzw, r1.xyzw
					endif 
					sample r3.xyzw, v1.xyxx, t1.xyzw, s1
					mul r0.xw, r2.yyyy, cb0[15].xxxy
					lt r2.x, l(0.001000), |r0.z|
					mul r2.zw, r0.zzzz, cb0[13].xxxy
					lt r4.xy, |r2.zwzz|, l(0.000010, 0.000010, 0.000000, 0.000000)
					movc r2.zw, r4.xxxy, l(0,0,0.000010,0.000010), r2.zzzw
					mul r4.xy, r2.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
					exp r4.xy, r4.xyxx
					add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
					div r2.zw, r4.xxxy, r2.zzzw
					mul r2.zw, r0.xxxw, r2.zzzw
					movc r0.xw, r2.xxxx, r2.zzzw, r0.xxxw
					mul r4.xyz, cb0[11].xyzx, cb0[17].xyzx
					mul r4.xyz, r0.xxxx, r4.xyzx
					mad r0.x, -cb0[13].w, cb0[13].w, l(1.000000)
					mad r2.z, -cb0[13].w, r0.y, l(1.000000)
					mul r2.z, r2.z, r2.z
					div r0.x, r0.x, r2.z
					mul r0.x, r0.x, l(0.079577)
					mul r0.x, r0.x, cb0[12].x
					mul r0.x, r0.w, r0.x
					add r0.w, -cb0[12].y, l(1.000000)
					mul r0.x, r0.w, r0.x
					mad r0.w, -cb0[14].w, cb0[14].w, l(1.000000)
					mad r0.y, -cb0[14].w, r0.y, l(1.000000)
					mul r0.y, r0.y, r0.y
					div r0.y, r0.w, r0.y
					mad r0.w, -cb0[14].x, cb1[5].z, r2.y
					max r0.w, r0.w, l(0.000000)
					mul r0.w, r0.w, cb0[15].z
					mul r0.z, r0.z, cb0[14].y
					lt r2.y, |r0.z|, l(0.000010)
					movc r0.z, r2.y, l(0.000010), r0.z
					mul r2.y, r0.z, l(-1.442695)
					exp r2.y, r2.y
					add r2.y, -r2.y, l(1.000000)
					div r0.z, r2.y, r0.z
					mul r0.z, r0.z, r0.w
					movc r0.z, r2.x, r0.z, r0.w
					mul r0.z, r0.z, -cb0[12].w
					mul r0.yz, r0.yyzy, l(0.000000, 0.079577, 1.442695, 0.000000)
					exp r0.z, r0.z
					min r0.z, r0.z, l(1.000000)
					add r0.z, -r0.z, l(1.000000)
					mul r0.z, r0.z, cb0[14].z
					mul r0.y, r0.y, cb0[12].z
					mul r0.y, r0.y, cb0[14].z
					mad r2.xyz, r4.xyzx, l(0.079577, 0.079577, 0.079577, 0.000000), r3.xyzx
					mad r2.xyz, cb0[17].xyzx, r0.xxxx, r2.xyzx
					mad r0.xyw, cb0[19].xyxz, r0.yyyy, cb0[18].xyxz
					add r0.xyw, -r2.xyxz, r0.xyxw
					mad r0.xyz, r0.zzzz, r0.xywx, r2.xyzx
					add o0.xyz, r1.xyzx, r0.xyzx
					mov o0.w, r3.w
					mov o1.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Name "DS_DEPTHGRAB"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 634066
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[21], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.y, r0.x, r0.y, v1.y
					mov o1.x, v1.x
					mov o1.z, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 1
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mov o0.x, r0.x
					mov o0.yzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Name "DS_DEPTHDOWNSAMPLE_HALF"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 704908
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[21], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.y, r0.x, r0.y, v1.y
					mov o1.x, v1.x
					mov o1.z, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[24], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 4
					mad r0.xyzw, cb0[23].xyxy, l(-0.500000, 0.500000, 0.500000, -0.500000), v1.xyxy
					sample r1.xyzw, r0.zwzz, t0.xyzw, s0
					sample r0.xyzw, r0.xyxx, t0.xyzw, s0
					mad r2.xyzw, cb0[23].xyxy, l(-0.500000, -0.500000, 0.500000, 0.500000), v1.xyxy
					sample r3.xyzw, r2.zwzz, t0.xyzw, s0
					sample r2.xyzw, r2.xyxx, t0.xyzw, s0
					min r0.y, r1.x, r3.x
					min r0.x, r0.y, r0.x
					min o0.x, r0.x, r2.x
					mov o0.yzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Name "DS_DEPTHDOWNSAMPLE_QUARTER"
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 740930
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xyz         1     NONE   float   xyz 
					//
					vs_4_0
					dcl_constantbuffer CB0[21], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xyz
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[20].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.y, r0.x, r0.y, v1.y
					mov o1.x, v1.x
					mov o1.z, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xyz         1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[24], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 3
					add r0.xy, v1.xyxx, cb0[23].xyxx
					sample r0.xyzw, r0.xyxx, t0.xyzw, s0
					mad r1.xyzw, cb0[23].xyxy, l(-1.000000, 1.000000, 1.000000, -1.000000), v1.xyxy
					sample r2.xyzw, r1.zwzz, t0.xyzw, s0
					sample r1.xyzw, r1.xyxx, t0.xyzw, s0
					min r0.x, r0.x, r2.x
					min r0.x, r0.x, r1.x
					add r0.yz, v1.xxyx, -cb0[23].xxyx
					sample r1.xyzw, r0.yzyy, t0.xyzw, s0
					min o0.x, r0.x, r1.x
					mov o0.yzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}