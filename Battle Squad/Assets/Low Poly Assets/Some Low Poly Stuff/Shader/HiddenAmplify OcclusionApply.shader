Shader "Hidden/Amplify Occlusion/Apply" {
	Properties {
	}
	SubShader {
		Tags { "MRTBlending" = "true" }
		Pass {
			Tags { "MRTBlending" = "true" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 49931
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 3
					add r0.x, cb0[3].z, -cb0[34].x
					sample r1.xyzw, v1.xyxx, t0.xyzw, s0
					add r0.y, r1.y, -cb0[2].x
					log r0.z, r1.x
					max r0.y, r0.y, l(0.000000)
					mul_sat r0.y, r0.y, cb0[2].y
					mad r0.x, r0.y, r0.x, cb0[34].x
					mul r0.x, r0.z, r0.x
					exp r0.x, r0.x
					add r1.xyz, -cb0[31].xyzx, cb0[32].xyzx
					mad r1.xyz, r0.yyyy, r1.xyzx, cb0[31].xyzx
					add r2.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mad r0.xzw, r0.xxxx, r2.xxyz, r1.xxyz
					add r0.xzw, r0.xxzw, l(-1.000000, 0.000000, -1.000000, -1.000000)
					add r1.x, cb0[3].x, -cb0[31].w
					mad r0.y, r0.y, r1.x, cb0[31].w
					mad o0.xyz, r0.yyyy, r0.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mov o0.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 87264
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r1.w
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r1.yw, v1.xxxy, l(0.000000, -0.500000, 0.000000, -0.500000)
					  dp2 r1.y, r1.ywyy, r1.ywyy
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 142183
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r1.xyxy
					  sample r5.xyzw, r4.xyxx, t1.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t1.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r1.xyxy
					  sample r7.xyzw, r6.xyxx, t1.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t1.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r2.z
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r2.zw, v1.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
					  dp2 r1.y, r2.zwzz, r2.zwzz
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 222193
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r1.w, r1.w, r2.x
					  or r1.w, r2.y, r1.w
					  and r1.w, r1.w, l(0x3f800000)
					  add r2.xy, v1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
					  dp2 r2.x, r2.xyxx, r2.xyxx
					  add r2.x, -r2.x, l(1.000000)
					  add r1.z, r1.w, r1.z
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.x, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 320698
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r2.xyxy
					  sample r5.xyzw, r4.xyxx, t2.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t2.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r2.xyxy
					  sample r7.xyzw, r6.xyxx, t2.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t2.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r2.x, r2.x, r2.z
					  or r2.x, r2.y, r2.x
					  and r2.x, r2.x, l(0x3f800000)
					  add r2.yz, v1.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
					  dp2 r2.y, r2.yzyy, r2.yzyy
					  add r2.y, -r2.y, l(1.000000)
					  add r1.z, r1.z, r2.x
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.y, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			Blend DstColor Zero, DstAlpha Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 356270
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 3
					add r0.x, cb0[3].z, -cb0[34].x
					sample r1.xyzw, v1.xyxx, t0.xyzw, s0
					add r0.y, r1.y, -cb0[2].x
					log r0.z, r1.x
					max r0.y, r0.y, l(0.000000)
					mul_sat r0.y, r0.y, cb0[2].y
					mad r0.x, r0.y, r0.x, cb0[34].x
					mul r0.x, r0.z, r0.x
					exp r1.w, r0.x
					add r0.xzw, -cb0[31].xxyz, cb0[32].xxyz
					mad r0.xzw, r0.yyyy, r0.xxzw, cb0[31].xxyz
					add r2.xyz, -r0.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mad r1.xyz, r1.wwww, r2.xyzx, r0.xzwx
					add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					add r0.x, cb0[3].x, -cb0[31].w
					mad r0.x, r0.y, r0.x, cb0[31].w
					mad r0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					mov o0.w, r0.w
					mov o1.xyz, r0.xyzx
					mov o0.xyz, l(1.000000,1.000000,1.000000,0)
					mov o1.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			Blend 0 DstColor Zero, DstAlpha Zero
			Blend 1 DstColor Zero, DstAlpha Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 393327
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r1.w
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r1.yw, v1.xxxy, l(0.000000, -0.500000, 0.000000, -0.500000)
					  dp2 r1.y, r1.ywyy, r1.ywyy
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov r0.x, r1.w
					  mov o2.z, r0.w
					else 
					  mov r0.x, l(1.000000)
					  mov r1.xyz, l(1.000000,1.000000,1.000000,0)
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					mov r0.y, l(1.000000)
					mov o0.xyzw, r0.yyyx
					mov o1.xyz, r1.xyzx
					mov o1.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			Blend 0 DstColor Zero, DstAlpha Zero
			Blend 1 DstColor Zero, DstAlpha Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 500721
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r1.xyxy
					  sample r5.xyzw, r4.xyxx, t1.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t1.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r1.xyxy
					  sample r7.xyzw, r6.xyxx, t1.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t1.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r2.z
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r2.zw, v1.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
					  dp2 r1.y, r2.zwzz, r2.zwzz
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov r0.x, r1.w
					  mov o2.z, r0.w
					else 
					  mov r0.x, l(1.000000)
					  mov r1.xyz, l(1.000000,1.000000,1.000000,0)
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					mov r0.y, l(1.000000)
					mov o0.xyzw, r0.yyyx
					mov o1.xyz, r1.xyzx
					mov o1.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			Blend 0 DstColor Zero, DstAlpha Zero
			Blend 1 DstColor Zero, DstAlpha Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 524364
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r1.w, r1.w, r2.x
					  or r1.w, r2.y, r1.w
					  and r1.w, r1.w, l(0x3f800000)
					  add r2.xy, v1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
					  dp2 r2.x, r2.xyxx, r2.xyxx
					  add r2.x, -r2.x, l(1.000000)
					  add r1.z, r1.w, r1.z
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.x, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov r0.x, r1.w
					  mov o2.z, r0.w
					else 
					  mov r0.x, l(1.000000)
					  mov r1.xyz, l(1.000000,1.000000,1.000000,0)
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					mov r0.y, l(1.000000)
					mov o0.xyzw, r0.yyyx
					mov o1.xyz, r1.xyzx
					mov o1.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			Blend 0 DstColor Zero, DstAlpha Zero
			Blend 1 DstColor Zero, DstAlpha Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 646572
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r2.xyxy
					  sample r5.xyzw, r4.xyxx, t2.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t2.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r2.xyxy
					  sample r7.xyzw, r6.xyxx, t2.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t2.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r2.x, r2.x, r2.z
					  or r2.x, r2.y, r2.x
					  and r2.x, r2.x, l(0x3f800000)
					  add r2.yz, v1.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
					  dp2 r2.y, r2.yzyy, r2.yzyy
					  add r2.y, -r2.y, l(1.000000)
					  add r1.z, r1.z, r2.x
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.y, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov r0.x, r1.w
					  mov o2.z, r0.w
					else 
					  mov r0.x, l(1.000000)
					  mov r1.xyz, l(1.000000,1.000000,1.000000,0)
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					mov r0.y, l(1.000000)
					mov o0.xyzw, r0.yyyx
					mov o1.xyz, r1.xyzx
					mov o1.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 689905
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 3
					add r0.x, cb0[3].z, -cb0[34].x
					sample r1.xyzw, v1.xyxx, t0.xyzw, s0
					add r0.y, r1.y, -cb0[2].x
					log r0.z, r1.x
					max r0.y, r0.y, l(0.000000)
					mul_sat r0.y, r0.y, cb0[2].y
					mad r0.x, r0.y, r0.x, cb0[34].x
					mul r0.x, r0.z, r0.x
					exp r1.w, r0.x
					add r0.xzw, -cb0[31].xxyz, cb0[32].xxyz
					mad r0.xzw, r0.yyyy, r0.xxzw, cb0[31].xxyz
					add r2.xyz, -r0.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mad r1.xyz, r1.wwww, r2.xyzx, r0.xzwx
					add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					add r0.x, cb0[3].x, -cb0[31].w
					mad r0.x, r0.y, r0.x, cb0[31].w
					mad r0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					sample r1.xyzw, v1.xyxx, t2.xyzw, s1
					mul o0.w, r0.w, r1.w
					mov o0.xyz, r1.xyzx
					sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					log r1.xyz, r1.xyzx
					mov o1.w, r1.w
					mul r0.xyz, r0.xyzx, -r1.xyzx
					exp o1.xyz, -r0.xyzx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 745328
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r1.w
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r1.yw, v1.xxxy, l(0.000000, -0.500000, 0.000000, -0.500000)
					  dp2 r1.y, r1.ywyy, r1.ywyy
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  sample r2.xyzw, v1.xyxx, t2.xyzw, s3
					  sample r3.xyzw, v1.xyxx, t3.xyzw, s2
					  log r0.xyz, r2.xyzx
					  mul r0.xyz, r1.xyzx, -r0.xyzx
					  mul o0.w, r1.w, r3.w
					  exp o1.xyz, -r0.xyzx
					  mov o0.xyz, r3.xyzx
					  mov o1.w, r2.w
					  mov o2.z, r0.w
					else 
					  sample o1.xyzw, v1.xyxx, t2.xyzw, s3
					  sample o0.xyzw, v1.xyxx, t3.xyzw, s2
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 815579
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r1.xyxy
					  sample r5.xyzw, r4.xyxx, t1.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t1.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r1.xyxy
					  sample r7.xyzw, r6.xyxx, t1.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t1.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r2.z
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r2.zw, v1.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
					  dp2 r1.y, r2.zwzz, r2.zwzz
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  sample r2.xyzw, v1.xyxx, t2.xyzw, s3
					  sample r3.xyzw, v1.xyxx, t3.xyzw, s2
					  log r0.xyz, r2.xyzx
					  mul r0.xyz, r1.xyzx, -r0.xyzx
					  mul o0.w, r1.w, r3.w
					  exp o1.xyz, -r0.xyzx
					  mov o0.xyz, r3.xyzx
					  mov o1.w, r2.w
					  mov o2.z, r0.w
					else 
					  sample o1.xyzw, v1.xyxx, t2.xyzw, s3
					  sample o0.xyzw, v1.xyxx, t3.xyzw, s2
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 907082
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r1.w, r1.w, r2.x
					  or r1.w, r2.y, r1.w
					  and r1.w, r1.w, l(0x3f800000)
					  add r2.xy, v1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
					  dp2 r2.x, r2.xyxx, r2.xyxx
					  add r2.x, -r2.x, l(1.000000)
					  add r1.z, r1.w, r1.z
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.x, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  sample r2.xyzw, v1.xyxx, t3.xyzw, s4
					  sample r3.xyzw, v1.xyxx, t4.xyzw, s3
					  log r0.xyz, r2.xyzx
					  mul r0.xyz, r1.xyzx, -r0.xyzx
					  mul o0.w, r1.w, r3.w
					  exp o1.xyz, -r0.xyzx
					  mov o0.xyz, r3.xyzx
					  mov o1.w, r2.w
					  mov o2.z, r0.w
					else 
					  sample o1.xyzw, v1.xyxx, t3.xyzw, s4
					  sample o0.xyzw, v1.xyxx, t4.xyzw, s3
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 954502
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r2.xyxy
					  sample r5.xyzw, r4.xyxx, t2.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t2.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r2.xyxy
					  sample r7.xyzw, r6.xyxx, t2.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t2.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r2.x, r2.x, r2.z
					  or r2.x, r2.y, r2.x
					  and r2.x, r2.x, l(0x3f800000)
					  add r2.yz, v1.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
					  dp2 r2.y, r2.yzyy, r2.yzyy
					  add r2.y, -r2.y, l(1.000000)
					  add r1.z, r1.z, r2.x
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.y, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  sample r2.xyzw, v1.xyxx, t3.xyzw, s4
					  sample r3.xyzw, v1.xyxx, t4.xyzw, s3
					  log r0.xyz, r2.xyzx
					  mul r0.xyz, r1.xyzx, -r0.xyzx
					  mul o0.w, r1.w, r3.w
					  exp o1.xyz, -r0.xyzx
					  mov o0.xyz, r3.xyzx
					  mov o1.w, r2.w
					  mov o2.z, r0.w
					else 
					  sample o1.xyzw, v1.xyxx, t3.xyzw, s4
					  sample o0.xyzw, v1.xyxx, t4.xyzw, s3
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			Blend DstColor Zero, DstColor Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1001628
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 3
					add r0.x, cb0[3].z, -cb0[34].x
					sample r1.xyzw, v1.xyxx, t0.xyzw, s0
					add r0.y, r1.y, -cb0[2].x
					log r0.z, r1.x
					max r0.y, r0.y, l(0.000000)
					mul_sat r0.y, r0.y, cb0[2].y
					mad r0.x, r0.y, r0.x, cb0[34].x
					mul r0.x, r0.z, r0.x
					exp r0.x, r0.x
					add r1.xyz, -cb0[31].xyzx, cb0[32].xyzx
					mad r1.xyz, r0.yyyy, r1.xyzx, cb0[31].xyzx
					add r2.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mad r0.xzw, r0.xxxx, r2.xxyz, r1.xxyz
					add r0.xzw, r0.xxzw, l(-1.000000, 0.000000, -1.000000, -1.000000)
					add r1.x, cb0[3].x, -cb0[31].w
					mad r0.y, r0.y, r1.x, cb0[31].w
					mad o0.xyz, r0.yyyy, r0.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mov o0.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			Blend 0 DstColor Zero, DstColor Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1059192
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r1.w
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r1.yw, v1.xxxy, l(0.000000, -0.500000, 0.000000, -0.500000)
					  dp2 r1.y, r1.ywyy, r1.ywyy
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			Blend 0 DstColor Zero, DstColor Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1131598
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r1.xyxy
					  sample r5.xyzw, r4.xyxx, t1.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t1.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r1.xyxy
					  sample r7.xyzw, r6.xyxx, t1.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t1.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r2.z
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r2.zw, v1.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
					  dp2 r1.y, r2.zwzz, r2.zwzz
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			Blend 0 DstColor Zero, DstColor Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1240331
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r1.w, r1.w, r2.x
					  or r1.w, r2.y, r1.w
					  and r1.w, r1.w, l(0x3f800000)
					  add r2.xy, v1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
					  dp2 r2.x, r2.xyxx, r2.xyxx
					  add r2.x, -r2.x, l(1.000000)
					  add r1.z, r1.w, r1.z
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.x, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "true" }
			Blend 0 DstColor Zero, DstColor Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1248731
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r2.xyxy
					  sample r5.xyzw, r4.xyxx, t2.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t2.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r2.xyxy
					  sample r7.xyzw, r6.xyxx, t2.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t2.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r2.x, r2.x, r2.z
					  or r2.x, r2.y, r2.x
					  and r2.x, r2.x, l(0x3f800000)
					  add r2.yz, v1.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
					  dp2 r2.y, r2.yzyy, r2.yzyy
					  add r2.y, -r2.y, l(1.000000)
					  add r1.z, r1.z, r2.x
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.y, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
	SubShader {
		Tags { "MRTBlending" = "False" }
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1336011
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 3
					add r0.x, cb0[3].z, -cb0[34].x
					sample r1.xyzw, v1.xyxx, t0.xyzw, s0
					add r0.y, r1.y, -cb0[2].x
					log r0.z, r1.x
					max r0.y, r0.y, l(0.000000)
					mul_sat r0.y, r0.y, cb0[2].y
					mad r0.x, r0.y, r0.x, cb0[34].x
					mul r0.x, r0.z, r0.x
					exp r0.x, r0.x
					add r1.xyz, -cb0[31].xyzx, cb0[32].xyzx
					mad r1.xyz, r0.yyyy, r1.xyzx, cb0[31].xyzx
					add r2.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mad r0.xzw, r0.xxxx, r2.xxyz, r1.xxyz
					add r0.xzw, r0.xxzw, l(-1.000000, 0.000000, -1.000000, -1.000000)
					add r1.x, cb0[3].x, -cb0[31].w
					mad r0.y, r0.y, r1.x, cb0[31].w
					mad o0.xyz, r0.yyyy, r0.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mov o0.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1431932
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r1.w
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r1.yw, v1.xxxy, l(0.000000, -0.500000, 0.000000, -0.500000)
					  dp2 r1.y, r1.ywyy, r1.ywyy
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1479415
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r1.xyxy
					  sample r5.xyzw, r4.xyxx, t1.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t1.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r1.xyxy
					  sample r7.xyzw, r6.xyxx, t1.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t1.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r2.z
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r2.zw, v1.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
					  dp2 r1.y, r2.zwzz, r2.zwzz
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1565302
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r1.w, r1.w, r2.x
					  or r1.w, r2.y, r1.w
					  and r1.w, r1.w, l(0x3f800000)
					  add r2.xy, v1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
					  dp2 r2.x, r2.xyxx, r2.xyxx
					  add r2.x, -r2.x, l(1.000000)
					  add r1.z, r1.w, r1.z
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.x, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1610411
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r2.xyxy
					  sample r5.xyzw, r4.xyxx, t2.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t2.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r2.xyxy
					  sample r7.xyzw, r6.xyxx, t2.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t2.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r2.x, r2.x, r2.z
					  or r2.x, r2.y, r2.x
					  and r2.x, r2.x, l(0x3f800000)
					  add r2.yz, v1.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
					  dp2 r2.y, r2.yzyy, r2.yzyy
					  add r2.y, -r2.y, l(1.000000)
					  add r1.z, r1.z, r2.x
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.y, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			Blend DstColor Zero, DstAlpha Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1702080
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 3
					add r0.x, cb0[3].z, -cb0[34].x
					sample r1.xyzw, v1.xyxx, t0.xyzw, s0
					add r0.y, r1.y, -cb0[2].x
					log r0.z, r1.x
					max r0.y, r0.y, l(0.000000)
					mul_sat r0.y, r0.y, cb0[2].y
					mad r0.x, r0.y, r0.x, cb0[34].x
					mul r0.x, r0.z, r0.x
					exp r1.w, r0.x
					add r0.xzw, -cb0[31].xxyz, cb0[32].xxyz
					mad r0.xzw, r0.yyyy, r0.xxzw, cb0[31].xxyz
					add r2.xyz, -r0.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mad r1.xyz, r1.wwww, r2.xyzx, r0.xzwx
					add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					add r0.x, cb0[3].x, -cb0[31].w
					mad r0.x, r0.y, r0.x, cb0[31].w
					mad r0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					mov o0.w, r0.w
					mov o1.xyz, r0.xyzx
					mov o0.xyz, l(1.000000,1.000000,1.000000,0)
					mov o1.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1740460
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r1.w
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r1.yw, v1.xxxy, l(0.000000, -0.500000, 0.000000, -0.500000)
					  dp2 r1.y, r1.ywyy, r1.ywyy
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov r0.x, r1.w
					  mov o2.z, r0.w
					else 
					  mov r0.x, l(1.000000)
					  mov r1.xyz, l(1.000000,1.000000,1.000000,0)
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					mov r0.y, l(1.000000)
					mov o0.xyzw, r0.yyyx
					mov o1.xyz, r1.xyzx
					mov o1.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1813449
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r1.xyxy
					  sample r5.xyzw, r4.xyxx, t1.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t1.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r1.xyxy
					  sample r7.xyzw, r6.xyxx, t1.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t1.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r2.z
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r2.zw, v1.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
					  dp2 r1.y, r2.zwzz, r2.zwzz
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov r0.x, r1.w
					  mov o2.z, r0.w
					else 
					  mov r0.x, l(1.000000)
					  mov r1.xyz, l(1.000000,1.000000,1.000000,0)
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					mov r0.y, l(1.000000)
					mov o0.xyzw, r0.yyyx
					mov o1.xyz, r1.xyzx
					mov o1.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1841461
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r1.w, r1.w, r2.x
					  or r1.w, r2.y, r1.w
					  and r1.w, r1.w, l(0x3f800000)
					  add r2.xy, v1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
					  dp2 r2.x, r2.xyxx, r2.xyxx
					  add r2.x, -r2.x, l(1.000000)
					  add r1.z, r1.w, r1.z
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.x, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov r0.x, r1.w
					  mov o2.z, r0.w
					else 
					  mov r0.x, l(1.000000)
					  mov r1.xyz, l(1.000000,1.000000,1.000000,0)
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					mov r0.y, l(1.000000)
					mov o0.xyzw, r0.yyyx
					mov o1.xyz, r1.xyzx
					mov o1.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1902502
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r2.xyxy
					  sample r5.xyzw, r4.xyxx, t2.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t2.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r2.xyxy
					  sample r7.xyzw, r6.xyxx, t2.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t2.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r2.x, r2.x, r2.z
					  or r2.x, r2.y, r2.x
					  and r2.x, r2.x, l(0x3f800000)
					  add r2.yz, v1.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
					  dp2 r2.y, r2.yzyy, r2.yzyy
					  add r2.y, -r2.y, l(1.000000)
					  add r1.z, r1.z, r2.x
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.y, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov r0.x, r1.w
					  mov o2.z, r0.w
					else 
					  mov r0.x, l(1.000000)
					  mov r1.xyz, l(1.000000,1.000000,1.000000,0)
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					mov r0.y, l(1.000000)
					mov o0.xyzw, r0.yyyx
					mov o1.xyz, r1.xyzx
					mov o1.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1974277
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 3
					add r0.x, cb0[3].z, -cb0[34].x
					sample r1.xyzw, v1.xyxx, t0.xyzw, s0
					add r0.y, r1.y, -cb0[2].x
					log r0.z, r1.x
					max r0.y, r0.y, l(0.000000)
					mul_sat r0.y, r0.y, cb0[2].y
					mad r0.x, r0.y, r0.x, cb0[34].x
					mul r0.x, r0.z, r0.x
					exp r1.w, r0.x
					add r0.xzw, -cb0[31].xxyz, cb0[32].xxyz
					mad r0.xzw, r0.yyyy, r0.xxzw, cb0[31].xxyz
					add r2.xyz, -r0.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mad r1.xyz, r1.wwww, r2.xyzx, r0.xzwx
					add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					add r0.x, cb0[3].x, -cb0[31].w
					mad r0.x, r0.y, r0.x, cb0[31].w
					mad r0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					sample r1.xyzw, v1.xyxx, t2.xyzw, s1
					mul o0.w, r0.w, r1.w
					mov o0.xyz, r1.xyzx
					sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					log r1.xyz, r1.xyzx
					mov o1.w, r1.w
					mul r0.xyz, r0.xyzx, -r1.xyzx
					exp o1.xyz, -r0.xyzx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2038383
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r1.w
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r1.yw, v1.xxxy, l(0.000000, -0.500000, 0.000000, -0.500000)
					  dp2 r1.y, r1.ywyy, r1.ywyy
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  sample r2.xyzw, v1.xyxx, t2.xyzw, s3
					  sample r3.xyzw, v1.xyxx, t3.xyzw, s2
					  log r0.xyz, r2.xyzx
					  mul r0.xyz, r1.xyzx, -r0.xyzx
					  mul o0.w, r1.w, r3.w
					  exp o1.xyz, -r0.xyzx
					  mov o0.xyz, r3.xyzx
					  mov o1.w, r2.w
					  mov o2.z, r0.w
					else 
					  sample o1.xyzw, v1.xyxx, t2.xyzw, s3
					  sample o0.xyzw, v1.xyxx, t3.xyzw, s2
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2103631
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r1.xyxy
					  sample r5.xyzw, r4.xyxx, t1.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t1.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r1.xyxy
					  sample r7.xyzw, r6.xyxx, t1.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t1.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r2.z
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r2.zw, v1.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
					  dp2 r1.y, r2.zwzz, r2.zwzz
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  sample r2.xyzw, v1.xyxx, t2.xyzw, s3
					  sample r3.xyzw, v1.xyxx, t3.xyzw, s2
					  log r0.xyz, r2.xyzx
					  mul r0.xyz, r1.xyzx, -r0.xyzx
					  mul o0.w, r1.w, r3.w
					  exp o1.xyz, -r0.xyzx
					  mov o0.xyz, r3.xyzx
					  mov o1.w, r2.w
					  mov o2.z, r0.w
					else 
					  sample o1.xyzw, v1.xyxx, t2.xyzw, s3
					  sample o0.xyzw, v1.xyxx, t3.xyzw, s2
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2176497
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r1.w, r1.w, r2.x
					  or r1.w, r2.y, r1.w
					  and r1.w, r1.w, l(0x3f800000)
					  add r2.xy, v1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
					  dp2 r2.x, r2.xyxx, r2.xyxx
					  add r2.x, -r2.x, l(1.000000)
					  add r1.z, r1.w, r1.z
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.x, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  sample r2.xyzw, v1.xyxx, t3.xyzw, s4
					  sample r3.xyzw, v1.xyxx, t4.xyzw, s3
					  log r0.xyz, r2.xyzx
					  mul r0.xyz, r1.xyzx, -r0.xyzx
					  mul o0.w, r1.w, r3.w
					  exp o1.xyz, -r0.xyzx
					  mov o0.xyz, r3.xyzx
					  mov o1.w, r2.w
					  mov o2.z, r0.w
					else 
					  sample o1.xyzw, v1.xyxx, t3.xyzw, s4
					  sample o0.xyzw, v1.xyxx, t4.xyzw, s3
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2287940
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					// SV_Target                2   xyzw        2   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_output o2.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r2.xyxy
					  sample r5.xyzw, r4.xyxx, t2.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t2.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r2.xyxy
					  sample r7.xyzw, r6.xyxx, t2.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t2.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r2.x, r2.x, r2.z
					  or r2.x, r2.y, r2.x
					  and r2.x, r2.x, l(0x3f800000)
					  add r2.yz, v1.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
					  dp2 r2.y, r2.yzyy, r2.yzyy
					  add r2.y, -r2.y, l(1.000000)
					  add r1.z, r1.z, r2.x
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.y, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o2.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o2.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o2.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad r1.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  sample r2.xyzw, v1.xyxx, t3.xyzw, s4
					  sample r3.xyzw, v1.xyxx, t4.xyzw, s3
					  log r0.xyz, r2.xyzx
					  mul r0.xyz, r1.xyzx, -r0.xyzx
					  mul o0.w, r1.w, r3.w
					  exp o1.xyz, -r0.xyzx
					  mov o0.xyz, r3.xyzx
					  mov o1.w, r2.w
					  mov o2.z, r0.w
					else 
					  sample o1.xyzw, v1.xyxx, t3.xyzw, s4
					  sample o0.xyzw, v1.xyxx, t4.xyzw, s3
					  mov o2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			Blend DstColor Zero, DstColor Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2319587
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_temps 3
					add r0.x, cb0[3].z, -cb0[34].x
					sample r1.xyzw, v1.xyxx, t0.xyzw, s0
					add r0.y, r1.y, -cb0[2].x
					log r0.z, r1.x
					max r0.y, r0.y, l(0.000000)
					mul_sat r0.y, r0.y, cb0[2].y
					mad r0.x, r0.y, r0.x, cb0[34].x
					mul r0.x, r0.z, r0.x
					exp r0.x, r0.x
					add r1.xyz, -cb0[31].xyzx, cb0[32].xyzx
					mad r1.xyz, r0.yyyy, r1.xyzx, cb0[31].xyzx
					add r2.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mad r0.xzw, r0.xxxx, r2.xxyz, r1.xxyz
					add r0.xzw, r0.xxzw, l(-1.000000, 0.000000, -1.000000, -1.000000)
					add r1.x, cb0[3].x, -cb0[31].w
					mad r0.y, r0.y, r1.x, cb0[31].w
					mad o0.xyz, r0.yyyy, r0.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)
					mov o0.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2386759
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r1.w
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r1.yw, v1.xxxy, l(0.000000, -0.500000, 0.000000, -0.500000)
					  dp2 r1.y, r1.ywyy, r1.ywyy
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2473782
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  mad r1.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					  add r0.w, -r0.z, l(1.000000)
					  mul r2.xyzw, r1.yyyy, cb0[6].xyzw
					  mad r1.xyzw, cb0[5].xyzw, r1.xxxx, r2.xyzw
					  mad r1.xyzw, cb0[7].xyzw, r0.wwww, r1.xyzw
					  add r1.xyzw, r1.xyzw, cb0[8].xyzw
					  div r1.xyzw, r1.xyzw, r1.wwww
					  mul r2.xyz, r1.yyyy, cb0[10].xywx
					  mad r2.xyz, cb0[9].xywx, r1.xxxx, r2.xyzx
					  mad r1.xyz, cb0[11].xywx, r1.zzzz, r2.xyzx
					  mad r1.xyz, cb0[12].xywx, r1.wwww, r1.xyzx
					  div r1.xy, r1.xyxx, r1.zzzz
					  mad r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.w, -r1.y, l(1.000000)
					  movc r1.z, r0.w, r1.w, r1.y
					  sample r3.xyzw, r1.xzxx, t1.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r1.xyxy
					  sample r5.xyzw, r4.xyxx, t1.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t1.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r1.xyxy
					  sample r7.xyzw, r6.xyxx, t1.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t1.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
					  or r1.x, r1.x, r2.z
					  or r1.x, r1.y, r1.x
					  and r1.x, r1.x, l(0x3f800000)
					  add r2.zw, v1.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
					  dp2 r1.y, r2.zwzz, r2.zwzz
					  add r1.y, -r1.y, l(1.000000)
					  add r1.x, r1.x, r1.z
					  dp2 r1.z, r2.xyxx, r2.xyxx
					  mul r1.z, r1.z, cb0[4].w
					  mul r1.z, r1.z, cb0[29].y
					  mad_sat r1.x, r1.z, r1.y, r1.x
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2533635
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 4
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r1.w, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r1.w, r1.w, r2.x
					  or r1.w, r2.y, r1.w
					  and r1.w, r1.w, l(0x3f800000)
					  add r2.xy, v1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
					  dp2 r2.x, r2.xyxx, r2.xyxx
					  add r2.x, -r2.x, l(1.000000)
					  add r1.z, r1.w, r1.z
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.x, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r3.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2578973
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 8
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					lt r0.z, r0.y, l(65504.000000)
					if_nz r0.z
					  mul r0.z, r0.y, cb1[7].z
					  mad r0.w, -r0.y, cb1[7].w, l(1.000000)
					  div r0.z, r0.w, r0.z
					  add r0.z, -r0.z, l(1.000000)
					  sample r1.xyzw, v1.xyxx, t1.xyzw, s2
					  add r2.xy, -r1.xyxx, v1.xyxx
					  lt r0.w, l(0.000000), cb1[5].x
					  add r1.z, -r2.y, l(1.000000)
					  movc r2.z, r0.w, r1.z, r2.y
					  sample r3.xyzw, r2.xzxx, t2.xyzw, s1
					  sqrt r0.w, r3.x
					  dp2 r1.z, r3.yzyy, l(1.000000, 0.003922, 0.000000, 0.000000)
					  div r1.z, r0.z, r1.z
					  add r1.z, -r1.z, l(1.000000)
					  mul r1.z, |r1.z|, l(2000.000000)
					  mad r1.w, -r0.z, l(2.000000), l(2.000000)
					  add r1.w, r1.w, r1.w
					  mad_sat r1.z, r1.z, cb0[29].y, -r1.w
					  mad r4.xyzw, cb0[4].xyxy, l(-1.000000, 0.000000, 1.000000, 0.000000), r2.xyxy
					  sample r5.xyzw, r4.xyxx, t2.xyzw, s1
					  sample r4.xyzw, r4.zwzz, t2.xyzw, s1
					  mad r6.xyzw, cb0[4].xyxy, l(0.000000, 1.000000, 0.000000, -1.000000), r2.xyxy
					  sample r7.xyzw, r6.xyxx, t2.xyzw, s1
					  sample r6.xyzw, r6.zwzz, t2.xyzw, s1
					  min r1.w, r4.w, r5.w
					  min r1.w, r7.w, r1.w
					  min r1.w, r6.w, r1.w
					  min r1.w, r1.w, r3.w
					  lt r2.zw, r2.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
					  or r2.z, r2.w, r2.z
					  lt r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx
					  or r2.x, r2.x, r2.z
					  or r2.x, r2.y, r2.x
					  and r2.x, r2.x, l(0x3f800000)
					  add r2.yz, v1.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
					  dp2 r2.y, r2.yzyy, r2.yzyy
					  add r2.y, -r2.y, l(1.000000)
					  add r1.z, r1.z, r2.x
					  dp2 r1.x, r1.xyxx, r1.xyxx
					  mul r1.x, r1.x, cb0[4].w
					  mul r1.x, r1.x, cb0[29].y
					  mad_sat r1.x, r1.x, r2.y, r1.z
					  add r1.x, -r1.x, l(1.000000)
					  add r1.y, r1.w, l(0.333333)
					  min r1.y, r1.y, l(1.000000)
					  mul r1.z, r1.x, r1.y
					  min r1.z, r1.w, r1.z
					  mad r1.w, -r0.z, r0.z, l(1.000000)
					  max r1.w, r1.w, l(0.000000)
					  add r2.x, -r0.w, r0.x
					  mul r1.w, r1.w, r2.x
					  mov_sat r2.x, -r1.w
					  mul r1.w, r1.w, l(16.000000)
					  mul_sat r1.w, r1.w, cb0[29].y
					  add r1.w, r1.w, r2.x
					  add_sat r1.w, r1.w, l(-0.005000)
					  mad r1.x, r1.y, r1.x, -r1.w
					  max o1.w, r1.x, l(0.000000)
					  mad r1.x, -r1.w, l(2.000000), l(1.000000)
					  max r1.x, r1.x, l(0.000000)
					  min r1.x, r1.z, r1.x
					  mul r1.x, r1.x, cb0[29].x
					  add r0.w, -r0.x, r0.w
					  mad r0.x, r1.x, r0.w, r0.x
					  mul r0.w, r0.x, r0.x
					  min o1.x, r0.w, l(1.000000)
					  mul r0.zw, r0.zzzz, l(0.000000, 0.000000, 1.000000, 255.000000)
					  frc r0.zw, r0.zzzw
					  mad o1.y, -r0.w, l(0.003922), r0.z
					  add r0.y, r0.y, -cb0[2].x
					  max r0.y, r0.y, l(0.000000)
					  mul_sat r0.y, r0.y, cb0[2].y
					  add r0.z, cb0[3].z, -cb0[34].x
					  mad r0.z, r0.y, r0.z, cb0[34].x
					  log r0.x, r0.x
					  mul r0.x, r0.x, r0.z
					  exp r1.w, r0.x
					  add r2.xyz, -cb0[31].xyzx, cb0[32].xyzx
					  mad r2.xyz, r0.yyyy, r2.xyzx, cb0[31].xyzx
					  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  mad r1.xyz, r1.wwww, r3.xyzx, r2.xyzx
					  add r0.x, cb0[3].x, -cb0[31].w
					  mad r0.x, r0.y, r0.x, cb0[31].w
					  add r1.xyzw, r1.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
					  mad o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
					  mov o1.z, r0.w
					else 
					  mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					  mov o1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			Blend DstColor Zero, DstColor Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2654375
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					sample o0.xyzw, v1.xyxx, t0.xyzw, s0
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			Tags { "MRTBlending" = "False" }
			Blend DstColor Zero, DstAlpha Zero
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2696166
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xy  
					// TEXCOORD                 0   xy          1     NONE   float       
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					vs_4_0
					dcl_constantbuffer CB0[6], immediateIndexed
					dcl_input v0.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_temps 1
					mad o0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mov o0.zw, l(0,0,0,1.000000)
					mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
					mul r0.y, r0.y, cb0[5].x
					mul r0.xz, r0.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
					add o1.xy, r0.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					// SV_Target                1   xyzw        1   TARGET   float   xyzw
					//
					ps_4_0
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.xy
					dcl_output o0.xyzw
					dcl_output o1.xyzw
					dcl_temps 1
					mov o0.xyz, l(1.000000,1.000000,1.000000,0)
					sample r0.xyzw, v1.xyxx, t0.xyzw, s0
					mov o0.w, r0.w
					mov o1.xyz, r0.xyzx
					mov o1.w, l(1.000000)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
}