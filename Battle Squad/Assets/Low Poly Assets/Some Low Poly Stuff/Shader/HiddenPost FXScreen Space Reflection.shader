Shader "Hidden/Post FX/Screen Space Reflection" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 61563
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[27], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 13
					sample r0.xyzw, v1.zwzz, t0.xyzw, s0
					mad r0.x, cb1[7].z, r0.x, cb1[7].w
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mov r1.z, -r0.x
					sample r2.xyzw, v1.zwzz, t1.xyzw, s1
					lt r0.y, r1.z, l(-100.000000)
					eq r0.z, r2.w, l(0.000000)
					or r0.y, r0.z, r0.y
					if_z r0.y
					  mul r0.yz, v1.zzwz, cb0[4].zzwz
					  mad r0.yz, r0.yyzy, cb0[6].xxyx, cb0[6].zzwz
					  mul r1.xy, r1.zzzz, r0.yzyy
					  sample r2.xyzw, v1.zwzz, t2.xyzw, s2
					  mad r0.yzw, r2.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					  mul r2.xyz, r0.zzzz, cb0[8].xyzx
					  mad r2.xyz, cb0[7].xyzx, r0.yyyy, r2.xyzx
					  mad r0.yzw, cb0[9].xxyz, r0.wwww, r2.xxyz
					  dp3 r1.w, r1.xyzx, r1.xyzx
					  rsq r1.w, r1.w
					  mul r2.xyz, r1.wwww, r1.xyzx
					  dp3 r1.w, r0.yzwy, -r2.xyzx
					  add r1.w, r1.w, r1.w
					  mad r3.xyz, r0.yzwy, r1.wwww, r2.xyzx
					  dp3 r1.w, r3.xyzx, r3.xyzx
					  rsq r1.w, r1.w
					  mul r3.xyz, r1.wwww, r3.xyzx
					  ieq r1.w, cb0[24].x, l(0)
					  lt r2.w, l(0.000000), r3.z
					  and r1.w, r1.w, r2.w
					  if_z r1.w
					    mul r0.x, r0.x, l(0.010000)
					    max r0.x, r0.x, l(0.001000)
					    mad r0.xyz, r0.yzwy, r0.xxxx, r1.xyzx
					    ieq r0.w, cb0[26].z, l(1)
					    div r4.xy, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[19].xyxx
					    mad r1.w, r3.z, cb0[22].y, r0.z
					    lt r1.w, l(-0.010000), r1.w
					    add r2.w, -r0.z, l(-0.010000)
					    div r2.w, r2.w, r3.z
					    movc r1.w, r1.w, r2.w, cb0[22].y
					    mad r5.xyz, r3.xyzx, r1.wwww, r0.xyzx
					    mul r6.xyz, r0.yyyy, cb0[16].xywx
					    mad r6.xyz, cb0[15].xywx, r0.xxxx, r6.xyzx
					    mad r6.xyz, cb0[17].xywx, r0.zzzz, r6.xyzx
					    add r6.xyz, r6.xyzx, cb0[18].xywx
					    mul r7.xyz, r5.yyyy, cb0[16].xywx
					    mad r7.xyz, cb0[15].xywx, r5.xxxx, r7.xyzx
					    mad r7.xyz, cb0[17].xywx, r5.zzzz, r7.xyzx
					    add r7.xyz, r7.xyzx, cb0[18].xywx
					    div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.z
					    div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.z
					    mul r4.zw, r1.wwww, r6.yyyx
					    mul r6.zw, r2.wwww, r7.xxxy
					    mul r8.xyz, r0.xyzx, r1.wwww
					    mul r5.xyz, r2.wwww, r5.xyzx
					    add r7.zw, cb0[19].yyyx, l(0.000000, 0.000000, -0.500000, -0.500000)
					    lt r9.xy, r7.zwzz, r6.wzww
					    lt r9.zw, r6.wwwz, l(0.000000, 0.000000, 0.500000, 0.500000)
					    or r9.zw, r9.zzzw, r9.xxxy
					    movc r7.zw, r9.xxxy, -r7.zzzw, l(0,0,-0.500000,-0.500000)
					    mad r7.zw, r7.yyyx, r2.wwww, r7.zzzw
					    mad r7.xy, r7.yxyy, r2.wwww, -r4.zwzz
					    div r7.xy, r7.zwzz, r7.xyxx
					    and r3.w, r7.x, r9.z
					    max r5.w, r7.y, r3.w
					    movc r3.w, r9.w, r5.w, r3.w
					    mad r7.xy, r6.xyxx, r1.wwww, -r6.zwzz
					    mad r6.zw, r3.wwww, r7.xxxy, r6.zzzw
					    add r5.w, r1.w, -r2.w
					    mad r2.w, r3.w, r5.w, r2.w
					    mad r7.xyz, r0.xyzx, r1.wwww, -r5.xyzx
					    mad r5.xyz, r3.wwww, r7.xyzx, r5.xyzx
					    mad r7.xy, r6.xyxx, r1.wwww, -r6.zwzz
					    dp2 r3.w, r7.xyxx, r7.xyxx
					    lt r3.w, r3.w, l(0.000100)
					    mad r7.xy, r6.xyxx, r1.wwww, l(0.010000, 0.010000, 0.000000, 0.000000)
					    movc r7.xy, r3.wwww, r7.xyxx, r6.zwzz
					    mad r7.zw, -r6.xxxy, r1.wwww, r7.xxxy
					    lt r3.w, |r7.z|, |r7.w|
					    movc r4.zw, r3.wwww, r4.zzzw, r4.wwwz
					    movc r6.xyz, r3.wwww, r7.ywzy, r7.xzwx
					    lt r5.w, l(0.000000), r6.y
					    lt r6.w, r6.y, l(0.000000)
					    iadd r5.w, -r5.w, r6.w
					    itof r7.x, r5.w
					    div r5.w, r7.x, r6.y
					    mul r7.y, r6.z, r5.w
					    mad r5.xyz, -r0.xyzx, r1.wwww, r5.xyzx
					    mul r5.xyz, r5.wwww, r5.xyzx
					    add r0.x, -r1.w, r2.w
					    mul r0.x, r5.w, r0.x
					    round_z r0.y, cb0[22].x
					    mul r5.xyw, r0.yyyy, r5.xyxz
					    mul r2.w, r0.y, r0.x
					    mul r6.x, r6.x, r7.x
					    add r6.y, -cb0[22].z, l(100000.000000)
					    ge r6.y, r0.z, r6.y
					    ge r6.z, l(100000.000000), r0.z
					    and r6.y, r6.z, r6.y
					    mov r9.x, r8.z
					    mov r9.y, r1.w
					    mov r6.zw, l(0,0,-1.000000,-1.000000)
					    mov r10.xy, r4.zwzz
					    mov r7.z, l(0)
					    mov r7.w, r6.y
					    mov r11.y, r0.z
					    mov r8.w, r6.y
					    loop 
					      mul r9.z, r7.x, r10.x
					      ge r9.z, r6.x, r9.z
					      ilt r9.w, r7.z, cb0[25].x
					      and r9.z, r9.w, r9.z
					      not r9.w, r8.w
					      and r9.z, r9.w, r9.z
					      breakc_z r9.z
					      mad r9.z, r5.w, l(0.500000), r9.x
					      mad r9.w, r2.w, l(0.500000), r9.y
					      div r11.x, r9.z, r9.w
					      lt r9.z, r11.x, r11.y
					      movc r9.zw, r9.zzzz, r11.xxxy, r11.yyyx
					      movc r6.zw, r3.wwww, r10.yyyx, r10.xxxy
					      mul r10.zw, r4.xxxy, r6.zzzw
					      sample_l r12.xyzw, r10.zwzz, t0.xyzw, s0, l(0.000000)
					      mad r10.z, cb1[7].z, r12.x, cb1[7].w
					      div r10.z, l(1.000000, 1.000000, 1.000000, 1.000000), r10.z
					      ge r9.z, -r10.z, r9.z
					      add r10.z, -r10.z, -cb0[22].z
					      ge r9.w, r9.w, r10.z
					      and r7.w, r9.w, r9.z
					      movc r8.w, r0.w, r7.w, r9.z
					      mad r10.xy, r7.xyxx, r0.yyyy, r10.xyxx
					      mad r9.x, r5.z, r0.y, r9.x
					      mad r9.y, r0.x, r0.y, r9.y
					      iadd r7.z, r7.z, l(1)
					      mov r11.y, r11.x
					    endloop 
					    mad r4.z, -r5.z, r0.y, r9.x
					    mad r0.x, -r0.x, r0.y, r9.y
					    itof r0.y, r7.z
					    mad r4.xy, r5.xyxx, r0.yyyy, r8.xyxx
					    div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					    div r5.xy, r6.zwzz, cb0[19].xyxx
					    mad r0.xzw, r4.xxyz, r0.xxxx, -r1.xxyz
					    dp3 r5.z, r0.xzwx, r3.xyzx
					    if_nz r7.w
					      add r0.x, r0.y, r0.y
					      itof r0.y, cb0[25].x
					      div r0.x, r0.x, r0.y
					      add r0.x, r0.x, l(-1.000000)
					      max r0.x, r0.x, l(0.000000)
					      add r0.x, -r0.x, l(1.000000)
					      mul r0.x, r0.x, r0.x
					      add r0.y, -r5.z, cb0[22].y
					      div_sat r0.y, r0.y, cb0[26].y
					      mul r0.x, r0.y, r0.x
					      dp3 r0.y, r3.xyzx, r2.xyzx
					      log r0.y, |r0.y|
					      mul r0.y, r0.y, cb0[23].x
					      exp r0.y, r0.y
					      add r0.z, -cb0[22].w, l(1.000000)
					      add r0.w, -r0.y, l(1.000000)
					      mad r0.y, r0.z, r0.w, r0.y
					      max r0.y, r0.y, l(0.000000)
					      mul r0.x, r0.y, r0.x
					      ilt r0.y, l(0), cb0[23].w
					      if_nz r0.y
					        sample_l r1.xyzw, r5.xyxx, t2.xyzw, s2, l(0.000000)
					        mad r0.yzw, r1.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					        mul r1.xyz, r3.yyyy, cb0[12].xyzx
					        mad r1.xyz, cb0[11].xyzx, r3.xxxx, r1.xyzx
					        mad r1.xyz, cb0[13].xyzx, r3.zzzz, r1.xyzx
					        dp3 r0.y, r0.yzwy, r1.xyzx
					        lt r0.y, l(0.000000), r0.y
					        movc r0.x, r0.y, l(0), r0.x
					      endif 
					    else 
					      mov r0.x, l(0)
					    endif 
					    add r0.yz, -r5.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
					    min r0.y, r0.z, r0.y
					    min r0.z, r5.x, r5.x
					    min r0.y, r0.z, r0.y
					    mad r0.z, cb0[24].w, l(0.100000), l(0.001000)
					    div_sat r0.y, r0.y, r0.z
					    log r0.y, r0.y
					    mul r0.y, r0.y, l(0.200000)
					    exp r0.y, r0.y
					    mul r0.y, r0.y, r0.y
					    mul o0.w, r0.x, r0.y
					    mov o0.xyz, r5.xyzx
					  else 
					    mov o0.xyzw, l(0,0,0,0)
					  endif 
					else 
					  mov o0.xyzw, l(0,0,0,0)
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 108389
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[27], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_input_ps linear v1.xy
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 3
					mul r0.xy, v1.zwzz, cb0[4].zwzz
					mad r0.xy, r0.xyxx, cb0[6].xyxx, cb0[6].zwzz
					sample r1.xyzw, v1.zwzz, t0.xyzw, s1
					mad r0.z, cb1[7].z, r1.x, cb1[7].w
					div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
					mov r1.z, -r0.z
					mul r1.xy, r0.xyxx, r1.zzzz
					dp3 r0.x, r1.xyzx, r1.xyzx
					rsq r0.x, r0.x
					mul r0.xyz, r0.xxxx, r1.xyzx
					mul r1.xyz, r0.yyyy, cb0[12].xyzx
					mad r0.xyw, cb0[11].xyxz, r0.xxxx, r1.xyxz
					mad r0.xyz, cb0[13].xyzx, r0.zzzz, r0.xywx
					sample r1.xyzw, v1.zwzz, t5.xyzw, s4
					mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3 r0.x, r1.xyzx, -r0.xyzx
					add r0.x, -|r0.x|, l(1.000000)
					mul r0.y, r0.x, r0.x
					mul r0.y, r0.y, r0.y
					mul r0.x, r0.x, r0.y
					sample r1.xyzw, v1.zwzz, t2.xyzw, s3
					max r0.y, r1.y, r1.x
					max r0.y, r1.z, r0.y
					add r0.y, -r0.y, l(1.000000)
					add r0.y, -r0.y, l(1.000000)
					add_sat r0.y, r0.y, r1.w
					add r0.yzw, -r1.xxyz, r0.yyyy
					mad r0.xyz, r0.xxxx, r0.yzwy, r1.xyzx
					add r0.w, -r1.w, l(1.000000)
					mul r0.w, r0.w, r0.w
					max r0.w, r0.w, l(0.002000)
					mad r0.w, r0.w, r0.w, l(1.000000)
					div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
					sample r1.xyzw, v1.zwzz, t3.wxyz, s6
					mul r1.yzw, r0.wwww, r1.yyzw
					mov_sat r1.x, r1.x
					mul r0.xyz, r0.xyzx, r1.yzwy
					mul r1.yzw, r0.xxyz, cb0[26].xxxx
					mul r1.yzw, r1.xxxx, r1.yyzw
					sample r2.xyzw, v1.zwzz, t6.xyzw, s5
					mad r0.xyz, r0.xyzx, cb0[26].xxxx, -r2.xyzx
					mad r0.xyz, r1.xxxx, r0.xyzx, r2.xyzx
					movc r0.xyz, cb0[24].zzzz, r1.yzwy, r0.xyzx
					sample r1.xyzw, v1.zwzz, t4.xyzw, s2
					mul r0.xyz, r0.xyzx, r1.wwww
					mov r2.w, l(0)
					sample r1.xyzw, v1.xyxx, t1.xyzw, s0
					add r2.xyzw, -r2.xyzw, r1.xyzw
					max r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
					movc r1.xyzw, cb0[24].zzzz, r1.xyzw, r2.xyzw
					mov r0.w, l(0)
					add o0.xyzw, r0.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 140660
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[34], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 14
					sample r0.xyzw, v1.zwzz, t0.xyzw, s1
					mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					mul r1.xy, cb0[4].xyxx, cb0[33].xyxx
					mad r2.xyzw, r1.xyxy, l(-8.000000, -8.000000, -6.000000, -6.000000), v1.zwzw
					sample r3.xyzw, r2.xyxx, t1.xyzw, s0
					mul r0.w, r3.w, l(0.052500)
					sample r4.xyzw, r2.xyxx, t0.xyzw, s1
					mad r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3_sat r1.z, r0.xyzx, r4.xyzx
					mul r1.w, r0.w, r1.z
					add r4.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r4.xyz, r3.xyzx, r4.xyzx
					movc r3.xyz, cb0[27].xxxx, r4.xyzx, r3.xyzx
					sample r4.xyzw, r2.zwzz, t1.xyzw, s0
					mul r2.x, r4.w, l(0.075000)
					sample r5.xyzw, r2.zwzz, t0.xyzw, s1
					mad r2.yzw, r5.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3_sat r2.y, r0.xyzx, r2.yzwy
					mul r2.x, r2.y, r2.x
					mad r0.w, r0.w, r1.z, r2.x
					add r2.yzw, r4.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
					div r2.yzw, r4.xxyz, r2.yyzw
					movc r4.xyz, cb0[27].xxxx, r2.yzwy, r4.xyzx
					mad r5.xyzw, r1.xyxy, l(-4.000000, -4.000000, -2.000000, -2.000000), v1.zwzw
					sample r6.xyzw, r5.xyxx, t1.xyzw, s0
					mul r1.z, r6.w, l(0.110000)
					sample r7.xyzw, r5.xyxx, t0.xyzw, s1
					mad r2.yzw, r7.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3_sat r2.y, r0.xyzx, r2.yzwy
					mul r2.z, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r7.xyz, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r7.xyz, r6.xyzx, r7.xyzx
					movc r6.xyz, cb0[27].xxxx, r7.xyzx, r6.xyzx
					sample r7.xyzw, r5.zwzz, t1.xyzw, s0
					mul r1.z, r7.w, l(0.150000)
					sample r5.xyzw, r5.zwzz, t0.xyzw, s1
					mad r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3_sat r2.y, r0.xyzx, r5.xyzx
					mul r2.w, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r5.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r5.xyz, r7.xyzx, r5.xyzx
					movc r7.xyz, cb0[27].xxxx, r5.xyzx, r7.xyzx
					sample r5.xyzw, v1.zwzz, t1.xyzw, s0
					mul r1.z, r5.w, l(0.225000)
					dp3 r2.y, r0.xyzx, r0.xyzx
					min r2.y, r2.y, l(1.000000)
					mul r8.x, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r8.yzw, r5.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
					div r8.yzw, r5.xxyz, r8.yyzw
					movc r5.xyz, cb0[27].xxxx, r8.yzwy, r5.xyzx
					mad r8.yz, r1.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000), v1.zzwz
					sample r9.xyzw, r8.yzyy, t1.xyzw, s0
					mul r1.z, r9.w, l(0.150000)
					sample r10.xyzw, r8.yzyy, t0.xyzw, s1
					mad r8.yzw, r10.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					dp3_sat r2.y, r0.xyzx, r8.yzwy
					mul r8.y, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r10.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r10.xyz, r9.xyzx, r10.xyzx
					movc r9.xyz, cb0[27].xxxx, r10.xyzx, r9.xyzx
					mad r10.xyzw, r1.xyxy, l(4.000000, 4.000000, 6.000000, 6.000000), v1.zwzw
					sample r11.xyzw, r10.xyxx, t1.xyzw, s0
					mul r1.z, r11.w, l(0.110000)
					sample r12.xyzw, r10.xyxx, t0.xyzw, s1
					mad r12.xyz, r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3_sat r2.y, r0.xyzx, r12.xyzx
					mul r8.z, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r12.xyz, r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r12.xyz, r11.xyzx, r12.xyzx
					movc r11.xyz, cb0[27].xxxx, r12.xyzx, r11.xyzx
					sample r12.xyzw, r10.zwzz, t1.xyzw, s0
					mul r1.z, r12.w, l(0.075000)
					sample r10.xyzw, r10.zwzz, t0.xyzw, s1
					mad r10.xyz, r10.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3_sat r2.y, r0.xyzx, r10.xyzx
					mul r8.w, r1.z, r2.y
					mad r0.w, r1.z, r2.y, r0.w
					add r10.xyz, r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r10.xyz, r12.xyzx, r10.xyzx
					movc r12.xyz, cb0[27].xxxx, r10.xyzx, r12.xyzx
					mad r1.xy, r1.xyxx, l(8.000000, 8.000000, 0.000000, 0.000000), v1.zwzz
					sample r10.xyzw, r1.xyxx, t1.xyzw, s0
					mul r1.z, r10.w, l(0.052500)
					sample r13.xyzw, r1.xyxx, t0.xyzw, s1
					mad r13.xyz, r13.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					dp3_sat r0.x, r0.xyzx, r13.xyzx
					mul r0.y, r0.x, r1.z
					mad r0.x, r1.z, r0.x, r0.w
					add r1.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					div r1.xyz, r10.xyzx, r1.xyzx
					movc r10.xyz, cb0[27].xxxx, r1.xyzx, r10.xyzx
					lt r0.z, l(0.010000), r0.x
					if_nz r0.z
					  mul r13.xyzw, r2.xxxx, r4.xyzw
					  mad r1.xyzw, r3.xyzw, r1.wwww, r13.xyzw
					  mad r1.xyzw, r6.xyzw, r2.zzzz, r1.xyzw
					  mad r1.xyzw, r7.xyzw, r2.wwww, r1.xyzw
					  mad r1.xyzw, r5.xyzw, r8.xxxx, r1.xyzw
					  mad r1.xyzw, r9.xyzw, r8.yyyy, r1.xyzw
					  mad r1.xyzw, r11.xyzw, r8.zzzz, r1.xyzw
					  mad r1.xyzw, r12.xyzw, r8.wwww, r1.xyzw
					  mad r1.xyzw, r10.xyzw, r0.yyyy, r1.xyzw
					  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					  max r0.y, r0.x, l(2.000000)
					  sqrt r0.y, r0.y
					  mul r0.y, r0.y, r1.w
					  min o0.w, r0.y, l(1.000000)
					  mul r0.yzw, r0.xxxx, r1.xxyz
					  mad r1.xyz, -r1.xyzx, r0.xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  div r1.xyz, r0.yzwy, r1.xyzx
					  movc o0.xyz, cb0[27].xxxx, r1.xyzx, r0.yzwy
					  ret 
					else 
					  add r0.xyz, r3.xyzx, r4.xyzx
					  add r0.xyz, r6.xyzx, r0.xyzx
					  add r0.xyz, r7.xyzx, r0.xyzx
					  add r0.xyz, r5.xyzx, r0.xyzx
					  add r0.xyz, r9.xyzx, r0.xyzx
					  add r0.xyz, r11.xyzx, r0.xyzx
					  add r0.xyz, r12.xyzx, r0.xyzx
					  add r0.xyz, r10.xyzx, r0.xyzx
					  mul r1.xyz, r0.xyzx, l(0.111111, 0.111111, 0.111111, 0.000000)
					  mad r0.xyz, -r0.xyzx, l(0.111111, 0.111111, 0.111111, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
					  div r0.xyz, r1.xyzx, r0.xyzx
					  movc o0.xyz, cb0[27].xxxx, r0.xyzx, r1.xyzx
					  mov o0.w, l(0)
					  ret 
					endif 
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 221889
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_constantbuffer CB1[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_sampler s3, mode_default
					dcl_sampler s4, mode_default
					dcl_sampler s5, mode_default
					dcl_sampler s6, mode_default
					dcl_sampler s7, mode_default
					dcl_sampler s8, mode_default
					dcl_sampler s9, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_resource_texture2d (float,float,float,float) t3
					dcl_resource_texture2d (float,float,float,float) t4
					dcl_resource_texture2d (float,float,float,float) t5
					dcl_resource_texture2d (float,float,float,float) t6
					dcl_resource_texture2d (float,float,float,float) t7
					dcl_resource_texture2d (float,float,float,float) t8
					dcl_resource_texture2d (float,float,float,float) t9
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 13
					sample r0.xyzw, v1.zwzz, t0.xyzw, s1
					add r0.x, -r0.w, l(1.000000)
					sample r1.xyzw, v1.zwzz, t1.xyzw, s3
					sample r2.xyzw, v1.zwzz, t2.xyzw, s0
					mad r0.y, cb1[7].z, r2.x, cb1[7].w
					div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
					mov r2.z, -r0.y
					mul r0.yz, v1.zzwz, cb0[4].zzwz
					mad r0.yz, r0.yyzy, cb0[6].xxyx, cb0[6].zzwz
					mul r2.xy, r2.zzzz, r0.yzyy
					sample r3.xyzw, v1.zwzz, t3.xyzw, s2
					mad r0.yzw, r3.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					mul r1.xyw, r0.zzzz, cb0[8].xyxz
					mad r1.xyw, cb0[7].xyxz, r0.yyyy, r1.xyxw
					mad r0.yzw, cb0[9].xxyz, r0.wwww, r1.xxyw
					dp3 r1.x, r2.xyzx, r2.xyzx
					rsq r1.x, r1.x
					mul r1.xyw, r1.xxxx, r2.xyxz
					dp3 r2.x, r0.yzwy, -r1.xywx
					add r2.x, r2.x, r2.x
					mad r0.yzw, r0.yyzw, r2.xxxx, r1.xxyw
					dp3 r0.y, r0.yzwy, r0.yzwy
					rsq r0.y, r0.y
					mul r0.y, r0.y, r0.w
					mad r0.y, r0.y, r1.z, r2.z
					log r0.z, r0.x
					mul r0.z, r0.z, l(1.333333)
					exp r0.z, r0.z
					mul r0.z, r1.z, r0.z
					mul r0.z, r0.z, cb0[27].y
					div r0.y, r0.z, r0.y
					ieq r0.z, cb0[23].z, l(1)
					mul r0.w, r0.y, l(0.500000)
					movc r0.y, r0.z, r0.w, r0.y
					add r0.y, r0.y, l(15.000000)
					mul r0.y, r0.y, l(0.062500)
					log r0.y, r0.y
					min r0.y, r0.y, l(4.000000)
					max r0.y, r0.y, l(0.000000)
					ftoi r0.z, r0.y
					iadd r0.w, r0.z, l(1)
					imin r0.w, r0.w, l(4)
					round_z r1.x, r0.y
					add r0.y, r0.y, -r1.x
					ieq r1.x, cb0[25].y, l(1)
					if_nz r1.x
					  itof r1.x, -r0.z
					  exp r1.x, r1.x
					  mul r1.xyzw, r1.xxxx, cb0[19].zwzw
					  round_ni r1.xyzw, r1.xyzw
					  mad r2.xyzw, v1.zwzw, r1.zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r2.xyzw, r2.xyzw
					  add r2.xyzw, r2.xyzw, l(1.500000, 0.500000, 0.500000, 1.500000)
					  div r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r1.xyzw
					  mul r3.xyzw, r2.xyzw, r3.xyzw
					  if_z r0.z
					    sample_l r4.xyzw, r3.zyzz, t4.xyzw, s5, l(0.000000)
					    sample_l r5.xyzw, r3.xyxx, t4.xyzw, s5, l(0.000000)
					    sample_l r6.xyzw, r3.zwzz, t4.xyzw, s5, l(0.000000)
					    sample_l r7.xyzw, r3.xwxx, t4.xyzw, s5, l(0.000000)
					  else 
					    ieq r1.x, r0.z, l(1)
					    if_nz r1.x
					      sample_l r4.xyzw, r3.zyzz, t5.xyzw, s6, l(0.000000)
					    else 
					      ieq r1.y, r0.z, l(2)
					      if_nz r1.y
					        sample_l r4.xyzw, r3.zyzz, t6.xyzw, s7, l(0.000000)
					      else 
					        ieq r1.y, r0.z, l(3)
					        if_nz r1.y
					          sample_l r4.xyzw, r3.zyzz, t7.xyzw, s8, l(0.000000)
					        else 
					          sample_l r4.xyzw, r3.zyzz, t8.xyzw, s9, l(0.000000)
					        endif 
					      endif 
					    endif 
					    if_nz r1.x
					      sample_l r5.xyzw, r3.xyxx, t5.xyzw, s6, l(0.000000)
					    else 
					      ieq r1.y, r0.z, l(2)
					      if_nz r1.y
					        sample_l r5.xyzw, r3.xyxx, t6.xyzw, s7, l(0.000000)
					      else 
					        ieq r1.y, r0.z, l(3)
					        if_nz r1.y
					          sample_l r5.xyzw, r3.xyxx, t7.xyzw, s8, l(0.000000)
					        else 
					          sample_l r5.xyzw, r3.xyxx, t8.xyzw, s9, l(0.000000)
					        endif 
					      endif 
					    endif 
					    if_nz r1.x
					      sample_l r6.xyzw, r3.zwzz, t5.xyzw, s6, l(0.000000)
					    else 
					      ieq r1.y, r0.z, l(2)
					      if_nz r1.y
					        sample_l r6.xyzw, r3.zwzz, t6.xyzw, s7, l(0.000000)
					      else 
					        ieq r1.y, r0.z, l(3)
					        if_nz r1.y
					          sample_l r6.xyzw, r3.zwzz, t7.xyzw, s8, l(0.000000)
					        else 
					          sample_l r6.xyzw, r3.zwzz, t8.xyzw, s9, l(0.000000)
					        endif 
					      endif 
					    endif 
					    if_nz r1.x
					      sample_l r7.xyzw, r3.xwxx, t5.xyzw, s6, l(0.000000)
					    else 
					      ieq r1.x, r0.z, l(2)
					      if_nz r1.x
					        sample_l r7.xyzw, r3.xwxx, t6.xyzw, s7, l(0.000000)
					      else 
					        ieq r1.x, r0.z, l(3)
					        if_nz r1.x
					          sample_l r7.xyzw, r3.xwxx, t7.xyzw, s8, l(0.000000)
					        else 
					          sample_l r7.xyzw, r3.xwxx, t8.xyzw, s9, l(0.000000)
					        endif 
					      endif 
					    endif 
					  endif 
					  mad r1.xy, v1.zwzz, r1.zwzz, -r2.zyzz
					  add r1.zw, -r1.yyyx, l(0.000000, 0.000000, 1.000000, 1.000000)
					  mul r2.x, r1.z, r1.w
					  mul r1.zw, r1.zzzw, r1.xxxy
					  mul r1.x, r1.y, r1.x
					  div r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[19].zwzw
					  mad r9.xyzw, r3.zyxw, cb0[19].zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r9.xyzw, r9.xyzw
					  add r9.xyzw, r9.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					  mul r9.xyzw, r8.xyzw, r9.xyzw
					  mad r3.xyzw, r3.xyzw, cb0[19].zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r3.xyzw, r3.xyzw
					  add r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					  mul r3.xyzw, r8.xyzw, r3.xyzw
					  sample_l r10.xyzw, v1.zwzz, t9.xyzw, s4, l(0.000000)
					  mad r2.yzw, r10.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
					  sample_l r11.xyzw, r9.xyxx, t9.xyzw, s4, l(0.000000)
					  sample_l r12.xyzw, r3.xyxx, t9.xyzw, s4, l(0.000000)
					  sample_l r3.xyzw, r3.zwzz, t9.xyzw, s4, l(0.000000)
					  sample_l r9.xyzw, r9.zwzz, t9.xyzw, s4, l(0.000000)
					  mad r10.xyz, r11.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r11.xyz, r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r9.xyz, r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  dp3_sat r1.y, r2.yzwy, r10.xyzx
					  mul r1.y, r1.y, r2.x
					  dp3_sat r2.x, r2.yzwy, r11.xyzx
					  mul r1.z, r1.z, r2.x
					  dp3_sat r2.x, r2.yzwy, r3.xyzx
					  mul r1.w, r1.w, r2.x
					  dp3_sat r2.x, r2.yzwy, r9.xyzx
					  mul r1.x, r1.x, r2.x
					  add r2.x, r10.w, -r11.w
					  sqrt r2.x, |r2.x|
					  sqrt r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  mul r1.y, r1.y, r2.x
					  add r2.x, r10.w, -r12.w
					  sqrt r2.x, |r2.x|
					  sqrt r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  mul r1.z, r1.z, r2.x
					  add r2.x, -r3.w, r10.w
					  sqrt r2.x, |r2.x|
					  sqrt r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  mul r1.w, r1.w, r2.x
					  add r2.x, -r9.w, r10.w
					  sqrt r2.x, |r2.x|
					  sqrt r2.x, r2.x
					  add r2.x, -r2.x, l(1.000000)
					  mul r1.x, r1.x, r2.x
					  max r1.xyzw, r1.xyzw, l(0.001000, 0.001000, 0.001000, 0.001000)
					  add r2.x, r1.z, r1.y
					  add r2.x, r1.w, r2.x
					  add r2.x, r1.x, r2.x
					  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
					  mul r3.xyzw, r1.zzzz, r5.xyzw
					  mad r3.xyzw, r4.xyzw, r1.yyyy, r3.xyzw
					  mad r3.xyzw, r6.xyzw, r1.wwww, r3.xyzw
					  mad r1.xyzw, r7.xyzw, r1.xxxx, r3.xyzw
					  mul r1.xyzw, r2.xxxx, r1.xyzw
					  itof r2.x, -r0.w
					  exp r2.x, r2.x
					  mul r3.xyzw, r2.xxxx, cb0[19].zwzw
					  round_ni r3.xyzw, r3.xyzw
					  mad r4.xyzw, v1.zwzw, r3.zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r4.xyzw, r4.xyzw
					  add r4.xyzw, r4.xyzw, l(1.500000, 0.500000, 0.500000, 1.500000)
					  div r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r3.xyzw
					  mul r5.xyzw, r4.xyzw, r5.xyzw
					  ieq r2.x, r0.w, l(1)
					  if_nz r2.x
					    sample_l r6.xyzw, r5.zyzz, t5.xyzw, s6, l(0.000000)
					    sample_l r7.xyzw, r5.xyxx, t5.xyzw, s6, l(0.000000)
					    sample_l r9.xyzw, r5.zwzz, t5.xyzw, s6, l(0.000000)
					    sample_l r11.xyzw, r5.xwxx, t5.xyzw, s6, l(0.000000)
					  else 
					    ieq r2.x, r0.w, l(2)
					    if_nz r2.x
					      sample_l r6.xyzw, r5.zyzz, t6.xyzw, s7, l(0.000000)
					    else 
					      ieq r3.x, r0.w, l(3)
					      if_nz r3.x
					        sample_l r6.xyzw, r5.zyzz, t7.xyzw, s8, l(0.000000)
					      else 
					        sample_l r6.xyzw, r5.zyzz, t8.xyzw, s9, l(0.000000)
					      endif 
					    endif 
					    if_nz r2.x
					      sample_l r7.xyzw, r5.xyxx, t6.xyzw, s7, l(0.000000)
					    else 
					      ieq r3.x, r0.w, l(3)
					      if_nz r3.x
					        sample_l r7.xyzw, r5.xyxx, t7.xyzw, s8, l(0.000000)
					      else 
					        sample_l r7.xyzw, r5.xyxx, t8.xyzw, s9, l(0.000000)
					      endif 
					    endif 
					    if_nz r2.x
					      sample_l r9.xyzw, r5.zwzz, t6.xyzw, s7, l(0.000000)
					    else 
					      ieq r3.x, r0.w, l(3)
					      if_nz r3.x
					        sample_l r9.xyzw, r5.zwzz, t7.xyzw, s8, l(0.000000)
					      else 
					        sample_l r9.xyzw, r5.zwzz, t8.xyzw, s9, l(0.000000)
					      endif 
					    endif 
					    if_nz r2.x
					      sample_l r11.xyzw, r5.xwxx, t6.xyzw, s7, l(0.000000)
					    else 
					      ieq r2.x, r0.w, l(3)
					      if_nz r2.x
					        sample_l r11.xyzw, r5.xwxx, t7.xyzw, s8, l(0.000000)
					      else 
					        sample_l r11.xyzw, r5.xwxx, t8.xyzw, s9, l(0.000000)
					      endif 
					    endif 
					  endif 
					  mad r3.xy, v1.zwzz, r3.zwzz, -r4.zyzz
					  add r3.zw, -r3.yyyx, l(0.000000, 0.000000, 1.000000, 1.000000)
					  mul r2.x, r3.z, r3.w
					  mul r3.zw, r3.zzzw, r3.xxxy
					  mul r3.x, r3.y, r3.x
					  mad r4.xyzw, r5.zyxw, cb0[19].zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r4.xyzw, r4.xyzw
					  add r4.xyzw, r4.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					  mul r4.xyzw, r8.xyzw, r4.xyzw
					  mad r5.xyzw, r5.xyzw, cb0[19].zwzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
					  round_ni r5.xyzw, r5.xyzw
					  add r5.xyzw, r5.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
					  mul r5.xyzw, r8.xyzw, r5.xyzw
					  sample_l r8.xyzw, r4.xyxx, t9.xyzw, s4, l(0.000000)
					  sample_l r12.xyzw, r5.xyxx, t9.xyzw, s4, l(0.000000)
					  sample_l r5.xyzw, r5.zwzz, t9.xyzw, s4, l(0.000000)
					  sample_l r4.xyzw, r4.zwzz, t9.xyzw, s4, l(0.000000)
					  mad r8.xyz, r8.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r10.xyz, r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  mad r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
					  dp3_sat r3.y, r2.yzwy, r8.xyzx
					  mul r2.x, r2.x, r3.y
					  dp3_sat r3.y, r2.yzwy, r10.xyzx
					  mul r3.y, r3.y, r3.z
					  dp3_sat r3.z, r2.yzwy, r5.xyzx
					  mul r3.z, r3.z, r3.w
					  dp3_sat r2.y, r2.yzwy, r4.xyzx
					  mul r2.y, r2.y, r3.x
					  add r2.z, -r8.w, r10.w
					  sqrt r2.z, |r2.z|
					  sqrt r2.z, r2.z
					  add r2.z, -r2.z, l(1.000000)
					  mul r2.x, r2.z, r2.x
					  add r2.z, r10.w, -r12.w
					  sqrt r2.z, |r2.z|
					  sqrt r2.z, r2.z
					  add r2.z, -r2.z, l(1.000000)
					  add r2.w, -r5.w, r10.w
					  sqrt r2.w, |r2.w|
					  sqrt r2.w, r2.w
					  add r2.w, -r2.w, l(1.000000)
					  mul r2.zw, r2.zzzw, r3.yyyz
					  add r3.x, -r4.w, r10.w
					  sqrt r3.x, |r3.x|
					  sqrt r3.x, r3.x
					  add r3.x, -r3.x, l(1.000000)
					  mul r2.y, r2.y, r3.x
					  max r2.xyzw, r2.xyzw, l(0.001000, 0.001000, 0.001000, 0.001000)
					  add r3.x, r2.z, r2.x
					  add r3.x, r2.w, r3.x
					  add r3.x, r2.y, r3.x
					  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
					  mul r4.xyzw, r2.zzzz, r7.xyzw
					  mad r4.xyzw, r6.xyzw, r2.xxxx, r4.xyzw
					  mad r4.xyzw, r9.xyzw, r2.wwww, r4.xyzw
					  mad r2.xyzw, r11.xyzw, r2.yyyy, r4.xyzw
					  mad r2.xyzw, r2.xyzw, r3.xxxx, -r1.xyzw
					  mad r1.xyzw, r0.yyyy, r2.wxyz, r1.wxyz
					  mov o0.xyz, r1.yzwy
					else 
					  if_z r0.z
					    sample_l r2.xyzw, v1.zwzz, t4.xyzw, s5, l(0.000000)
					  else 
					    ieq r1.y, r0.z, l(1)
					    if_nz r1.y
					      sample_l r2.xyzw, v1.zwzz, t5.xyzw, s6, l(0.000000)
					    else 
					      ieq r1.y, r0.z, l(2)
					      if_nz r1.y
					        sample_l r2.xyzw, v1.zwzz, t6.xyzw, s7, l(0.000000)
					      else 
					        ieq r0.z, r0.z, l(3)
					        if_nz r0.z
					          sample_l r2.xyzw, v1.zwzz, t7.xyzw, s8, l(0.000000)
					        else 
					          sample_l r2.xyzw, v1.zwzz, t8.xyzw, s9, l(0.000000)
					        endif 
					      endif 
					    endif 
					  endif 
					  ieq r0.z, r0.w, l(1)
					  if_nz r0.z
					    sample_l r3.xyzw, v1.zwzz, t5.xyzw, s6, l(0.000000)
					  else 
					    ieq r0.z, r0.w, l(2)
					    if_nz r0.z
					      sample_l r3.xyzw, v1.zwzz, t6.xyzw, s7, l(0.000000)
					    else 
					      ieq r0.z, r0.w, l(3)
					      if_nz r0.z
					        sample_l r3.xyzw, v1.zwzz, t7.xyzw, s8, l(0.000000)
					      else 
					        sample_l r3.xyzw, v1.zwzz, t8.xyzw, s9, l(0.000000)
					      endif 
					    endif 
					  endif 
					  add r1.yzw, -r2.xxyz, r3.xxyz
					  mad o0.xyz, r0.yyyy, r1.yzwy, r2.xyzx
					  min r1.x, r2.w, r3.w
					endif 
					min r0.y, r1.x, l(1.000000)
					add r0.zw, -v1.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
					min r0.z, r0.w, r0.z
					min r0.z, r0.z, v1.z
					mad r0.w, cb0[24].w, l(0.100000), l(0.001000)
					div_sat r0.z, r0.z, r0.w
					log r0.z, r0.z
					mul r0.z, r0.z, l(0.200000)
					exp r0.z, r0.z
					mul r0.y, r0.z, r0.y
					mul_sat r0.x, r0.x, l(0.300000)
					add r0.x, -r0.x, l(1.000000)
					mul o0.w, r0.x, r0.y
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 322440
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[35], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 4
					itof r0.x, -cb0[34].x
					exp r0.x, r0.x
					mul r0.xy, r0.xxxx, cb0[19].zwzz
					round_ni r0.xy, r0.xyxx
					mad r0.zw, v1.zzzw, r0.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
					div r0.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r0.xyxx
					round_ni r0.zw, r0.zzzw
					add r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
					mul r1.xy, r0.xyxx, r0.zwzz
					mad r1.zw, r0.zzzw, r0.xxxy, r0.xxxy
					sample r0.xyzw, r1.xwxx, t0.xyzw, s0
					sample r2.xyzw, r1.zyzz, t0.xyzw, s0
					sample r3.xyzw, r1.xyxx, t0.xyzw, s0
					sample r1.xyzw, r1.zwzz, t0.xyzw, s0
					min r1.xyzw, r1.xyzw, r3.xyzw
					min r0.xyzw, r0.xyzw, r2.xyzw
					min o0.xyzw, r0.xyzw, r1.xyzw
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 376462
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_sampler s2, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_resource_texture2d (float,float,float,float) t2
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 3
					sample r0.xyzw, v1.zwzz, t2.xyzw, s1
					sample r1.xyzw, v1.zwzz, t0.xyzw, s2
					lt r0.w, l(0.000000), r1.w
					sample r2.xyzw, r1.xyxx, t1.xyzw, s0
					mov o0.w, r1.w
					movc r0.xyz, r0.wwww, r2.xyzx, r0.xyzx
					and r1.xyz, r0.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
					ine r1.xyz, r1.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
					and r0.w, r1.y, r1.x
					and r0.w, r1.z, r0.w
					and o0.xyz, r0.xyzx, r0.wwww
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 444547
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_sampler s0, mode_default
					dcl_sampler s1, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_resource_texture2d (float,float,float,float) t1
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 1
					sample r0.xyzw, v1.zwzz, t0.xyzw, s1
					mov o0.xyz, r0.xyzx
					sample r0.xyzw, v1.zwzz, t1.xyzw, s0
					mov o0.w, r0.w
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 507324
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_constantbuffer CB0[8], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 1
					sample r0.xyzw, v1.zwzz, t0.xyzw, s0
					mad r0.x, cb0[7].z, r0.x, cb0[7].w
					div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
					mov o0.x, -r0.x
					mov o0.yzw, l(0,0,0,0)
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 539721
			Program "vp" {
				SubProgram "d3d11 " {
					"!!DX11VertexSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// POSITION                 0   xyzw        0     NONE   float   xyz 
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float   xyzw
					// TEXCOORD                 0   xy          1     NONE   float   xy  
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					vs_4_0
					dcl_constantbuffer CB0[5], immediateIndexed
					dcl_constantbuffer CB1[4], immediateIndexed
					dcl_constantbuffer CB2[21], immediateIndexed
					dcl_input v0.xyz
					dcl_input v1.xy
					dcl_output_siv o0.xyzw, position
					dcl_output o1.xy
					dcl_output o1.zw
					dcl_temps 2
					mul r0.xyzw, v0.yyyy, cb1[1].xyzw
					mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
					mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
					add r0.xyzw, r0.xyzw, cb1[3].xyzw
					mul r1.xyzw, r0.yyyy, cb2[18].xyzw
					mad r1.xyzw, cb2[17].xyzw, r0.xxxx, r1.xyzw
					mad r1.xyzw, cb2[19].xyzw, r0.zzzz, r1.xyzw
					mad o0.xyzw, cb2[20].xyzw, r0.wwww, r1.xyzw
					lt r0.x, cb0[4].y, l(0.000000)
					add r0.y, -v1.y, l(1.000000)
					movc o1.w, r0.x, r0.y, v1.y
					mov o1.xyz, v1.xyxx
					ret 
					// Approximately 0 instruction slots used"
				}
			}
			Program "fp" {
				SubProgram "d3d11 " {
					"!!DX11PixelSM40
					//
					// Generated by Microsoft (R) D3D Shader Disassembler
					//
					//
					// Input signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_POSITION              0   xyzw        0      POS   float       
					// TEXCOORD                 0   xy          1     NONE   float       
					// TEXCOORD                 1     zw        1     NONE   float     zw
					//
					//
					// Output signature:
					//
					// Name                 Index   Mask Register SysValue  Format   Used
					// -------------------- ----- ------ -------- -------- ------- ------
					// SV_Target                0   xyzw        0   TARGET   float   xyzw
					//
					ps_4_0
					dcl_immediateConstantBuffer { { -0.326212, -0.405810, 0, 0},
					                              { -0.840144, -0.073580, 0, 0},
					                              { -0.695914, 0.457137, 0, 0},
					                              { -0.203345, 0.620716, 0, 0},
					                              { 0.962340, -0.194983, 0, 0},
					                              { 0.473434, -0.480026, 0, 0},
					                              { 0.519456, 0.767022, 0, 0},
					                              { 0.185461, -0.893124, 0, 0},
					                              { 0.507431, 0.064425, 0, 0},
					                              { 0.896420, 0.412458, 0, 0},
					                              { -0.321940, -0.932615, 0, 0},
					                              { -0.791559, -0.597710, 0, 0} }
					dcl_constantbuffer CB0[28], immediateIndexed
					dcl_sampler s0, mode_default
					dcl_resource_texture2d (float,float,float,float) t0
					dcl_input_ps linear v1.zw
					dcl_output o0.xyzw
					dcl_temps 4
					mul r0.x, cb0[4].x, cb0[23].y
					mov r1.xyzw, l(0,0,0,0)
					mov r0.y, l(0)
					loop 
					  ige r0.z, r0.y, l(12)
					  breakc_nz r0.z
					  mad r0.zw, icb[r0.y + 0].xxxy, r0.xxxx, v1.zzzw
					  sample r2.xyzw, r0.zwzz, t0.xyzw, s0
					  add r3.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
					  div r3.xyz, r2.xyzx, r3.xyzx
					  movc r2.xyz, cb0[27].xxxx, r3.xyzx, r2.xyzx
					  add r1.xyzw, r1.xyzw, r2.xyzw
					  iadd r0.y, r0.y, l(1)
					endloop 
					mul r0.xyzw, r1.xyzw, l(0.083333, 0.083333, 0.083333, 0.083333)
					mad r1.xyz, -r1.xyzx, l(0.083333, 0.083333, 0.083333, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
					div r1.xyz, r0.xyzx, r1.xyzx
					movc o0.xyz, cb0[27].xxxx, r1.xyzx, r0.xyzx
					mov o0.w, r0.w
					ret 
					// Approximately 0 instruction slots used"
				}
			}
		}
	}
	Fallback "Diffuse"
}